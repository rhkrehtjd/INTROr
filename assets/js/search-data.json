{
  
    
        "post0": {
            "title": "기술통계량",
            "content": "등간척도 기술통계량 속성의 간격이 일정한 값을 갖는 변수 | 예를 들면, 귀하는 교육 시설에 만족하십니까?라는 질문에서, 매우 만족, 만족, 보통, 불만족, 매우 불만족의 범주에서 응답을 얻은 다음 가중치를 적용하여 가감산하거나 역코딩 하여 총득점으로 응답자의 생각을 측정하는 방법이다. | 문항은 긍정-부정, 찬성-반대 등과 같은 반응을 느낌의 강약에 따라서 3점, 5점, 7점 척도로 나타낸다. | . | . data = read.csv(&#39;descriptive.csv&#39;,header=T) . survey = data$survey survey . &lt;ol class=list-inline&gt;1 | 2 | 1 | 4 | 3 | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 1 | 2 | 2 | 2 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 2 | 1 | 2 | 3 | 3 | 5 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 2 | 3 | 4 | 3 | 2 | 2 | 3 | 4 | 5 | 4 | 2 | &lt;NA&gt; | 2 | 3 | 4 | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 3 | 3 | 2 | 2 | 3 | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 2 | 2 | &lt;NA&gt; | 2 | 2 | 3 | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 1 | 4 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 4 | 3 | 3 | 4 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 2 | &lt;NA&gt; | &lt;NA&gt; | 3 | &lt;NA&gt; | 2 | &lt;NA&gt; | 2 | 2 | 5 | 2 | &lt;NA&gt; | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 2 | 4 | 3 | 4 | 3 | 3 | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 2 | 2 | 2 | 2 | 1 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 3 | 3 | 4 | 3 | &lt;NA&gt; | 4 | 2 | 2 | 2 | 2 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 2 | &lt;NA&gt; | 2 | 3 | 3 | 3 | &lt;NA&gt; | &lt;NA&gt; | 3 | 4 | 3 | 4 | &lt;NA&gt; | &lt;NA&gt; | 3 | 3 | 4 | 2 | 1 | 2 | 4 | 3 | 3 | 2 | 5 | 2 | 2 | 2 | 2 | 1 | 2 | 4 | &lt;NA&gt; | 2 | 2 | 1 | 1 | 1 | 2 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 3 | 4 | 5 | 3 | 3 | 4 | &lt;NA&gt; | 2 | 1 | 2 | &lt;NA&gt; | 1 | 2 | 2 | 1 | 2 | 2 | &lt;NA&gt; | &lt;NA&gt; | 3 | 4 | 5 | 3 | &lt;NA&gt; | 3 | 4 | 4 | 5 | 2 | 2 | 3 | &lt;NA&gt; | &lt;NA&gt; | 2 | 1 | 2 | 1 | &lt;NA&gt; | &lt;NA&gt; | 2 | 3 | &lt;NA&gt; | 3 | 4 | 3 | 4 | 3 | 4 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 1 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 1 | 1 | 2 | 2 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 2 | 1 | 2 | 3 | 3 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 3 | &lt;NA&gt; | &lt;/ol&gt; 등간척도 요약통계량 | . summary(survey) # 의미있게 사용 가능하다. . Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s 1.00 2.00 3.00 2.61 3.00 5.00 113 . x1 = table(survey) x1 # 의미있게 사용 가능하다. . survey 1 2 3 4 5 20 72 63 25 7 . 두 번째와 세 번째 속성의 만족도 비중이 높다. | 만약, 5점 척도를 기준으로 다음과 같이 측정 도구가 만들어지는 경우 순번 자체를 점수화하기 위해서는 역코딩을 해야한다. | . hist(survey) # 등간척도 히스토그램으로 시각화 pie(x1) . 비율척도 기술통계량 등간척도의 특성에 절대 원점(0)이 존재하는 척도를 의미한다. 비율척도 변수는 응답자가 직접 수치로 입력한 변수로 속성이 0을 기준으로 한 수치로 되어있기 때문에 사칙연산이 모두 가능하다. | 따라서 빈도분석과 기술통계량 등 가장 많은 표본의 통계량을 얻을 수 있는 척도이다. | . | . length(data$cost) . 300 summary(data$cost) # 의미있게 사용 가능하다. # 결측치도 있음 # 이상치도 있음 . Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s -457.200 4.425 5.400 8.752 6.300 675.000 30 . plot(data$cost) . 이상치와 결측치 제거하자 | . data = subset(data, data$cost &gt;= 2 &amp; data$cost &lt;=10) x = data$cost mean(x) . 5.3605577689243 대표값 구하기 자료 전체를 대표하는 값으로 분포의 중심위치를 나타내는 평균, 중위수, 사분위수, 최빈수 등의 통계량을 의미한다. | . | . mean(x) # 중위수 median(x) # 오름차순 정렬 sort(x) # 내림차순 정렬 sort(x, decreasing=T) . 5.3605577689243 5.4 &lt;ol class=list-inline&gt;2.1 | 2.3 | 2.3 | 3 | 3 | 3 | 3 | 3 | 3 | 3.3 | 3.3 | 3.4 | 3.4 | 3.5 | 3.5 | 3.5 | 3.5 | 3.5 | 3.8 | 3.8 | 3.8 | 3.9 | 3.9 | 3.9 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.2 | 4.2 | 4.2 | 4.3 | 4.3 | 4.3 | 4.3 | 4.3 | 4.4 | 4.4 | 4.4 | 4.4 | 4.5 | 4.6 | 4.6 | 4.6 | 4.6 | 4.6 | 4.7 | 4.7 | 4.7 | 4.7 | 4.7 | 4.7 | 4.8 | 4.8 | 4.9 | 4.9 | 4.9 | 4.9 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.4 | 5.4 | 5.4 | 5.4 | 5.4 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.6 | 5.6 | 5.6 | 5.6 | 5.7 | 5.7 | 5.7 | 5.7 | 5.7 | 5.7 | 5.8 | 5.8 | 5.8 | 5.8 | 5.8 | 5.9 | 5.9 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.5 | 6.5 | 6.5 | 6.5 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.8 | 6.8 | 6.8 | 6.8 | 6.9 | 6.9 | 6.9 | 6.9 | 7 | 7 | 7 | 7.1 | 7.1 | 7.1 | 7.1 | 7.2 | 7.2 | 7.7 | 7.7 | 7.7 | 7.7 | 7.9 | 7.9 | &lt;/ol&gt; &lt;ol class=list-inline&gt;7.9 | 7.9 | 7.7 | 7.7 | 7.7 | 7.7 | 7.2 | 7.2 | 7.1 | 7.1 | 7.1 | 7.1 | 7 | 7 | 7 | 6.9 | 6.9 | 6.9 | 6.9 | 6.8 | 6.8 | 6.8 | 6.8 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.7 | 6.5 | 6.5 | 6.5 | 6.5 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.4 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.3 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.2 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6.1 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 5.9 | 5.9 | 5.8 | 5.8 | 5.8 | 5.8 | 5.8 | 5.7 | 5.7 | 5.7 | 5.7 | 5.7 | 5.7 | 5.6 | 5.6 | 5.6 | 5.6 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.5 | 5.4 | 5.4 | 5.4 | 5.4 | 5.4 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.3 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.2 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5.1 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 4.9 | 4.9 | 4.9 | 4.9 | 4.8 | 4.8 | 4.7 | 4.7 | 4.7 | 4.7 | 4.7 | 4.7 | 4.6 | 4.6 | 4.6 | 4.6 | 4.6 | 4.5 | 4.4 | 4.4 | 4.4 | 4.4 | 4.3 | 4.3 | 4.3 | 4.3 | 4.3 | 4.2 | 4.2 | 4.2 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4.1 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 3.9 | 3.9 | 3.9 | 3.8 | 3.8 | 3.8 | 3.5 | 3.5 | 3.5 | 3.5 | 3.5 | 3.4 | 3.4 | 3.3 | 3.3 | 3 | 3 | 3 | 3 | 3 | 3 | 2.3 | 2.3 | 2.1 | &lt;/ol&gt; 사분위수는 전체 데이터의 크기를 네 등분하여 나타낸 통계량을 의미한다. | 제1사분위수는 누적 백분율이 25%에 해당하고, 제2사분위수는 누적 백분율이 50%, 제3사분위수는 75%, 제4사분위수는 100%에 해당한다. 특히 제 2사분위수는 중앙값과 동일하다. | . quantile(x,1/4) quantile(x,2/4) quantile(x,3/4) quantile(x,4/4) . 25%: 4.6 50%: 5.4 75%: 6.2 100%: 7.9 최빈수 : 빈도수가 가장 많은 변량 | . length(x) # 일단 각 값들 별로 빈도를 구하고 그 빈도들 사이에서 최댓값을 구하는 방식을 사용한다. xtable = table(x) max(xtable) . 251 18 xtable . x 2.1 2.3 3 3.3 3.4 3.5 3.8 3.9 4 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5 5.1 1 2 6 2 2 5 3 3 15 9 3 5 4 1 5 6 2 4 18 11 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6 6.1 6.2 6.3 6.4 6.5 6.7 6.8 6.9 7 7.1 7.2 9 7 5 9 4 6 5 2 14 8 13 16 11 4 8 4 4 3 4 2 7.7 7.9 4 2 . xmatrix = rbind(xtable) xmatrix . A matrix: 1 × 42 of type int 2.12.333.33.43.53.83.944.1⋯6.46.56.76.86.977.17.27.77.9 . xtable1 | 2 | 6 | 2 | 2 | 5 | 3 | 3 | 15 | 9 | ⋯ | 11 | 4 | 8 | 4 | 4 | 3 | 4 | 2 | 4 | 2 | . class(xmatrix) str(xmatrix) . &lt;ol class=list-inline&gt;&#39;matrix&#39; | &#39;array&#39; | &lt;/ol&gt; int [1, 1:42] 1 2 6 2 2 5 3 3 15 9 ... - attr(*, &#34;dimnames&#34;)=List of 2 ..$ : chr &#34;xtable&#34; ..$ : chr [1:42] &#34;2.1&#34; &#34;2.3&#34; &#34;3&#34; &#34;3.3&#34; ... . which(xmatrix[1,]==18) . 5: 19 19가 최빈수 18이 있는 위치가 된다. | . xdataframe = as.data.frame(xmatrix) which(xdataframe[1,]==18) . 19 이게 좀 명료하게 나오긴 함 | . xdataframe[1,19] . 18 attributes(xdataframe) . $names &lt;ol class=list-inline&gt;&#39;2.1&#39; | &#39;2.3&#39; | &#39;3&#39; | &#39;3.3&#39; | &#39;3.4&#39; | &#39;3.5&#39; | &#39;3.8&#39; | &#39;3.9&#39; | &#39;4&#39; | &#39;4.1&#39; | &#39;4.2&#39; | &#39;4.3&#39; | &#39;4.4&#39; | &#39;4.5&#39; | &#39;4.6&#39; | &#39;4.7&#39; | &#39;4.8&#39; | &#39;4.9&#39; | &#39;5&#39; | &#39;5.1&#39; | &#39;5.2&#39; | &#39;5.3&#39; | &#39;5.4&#39; | &#39;5.5&#39; | &#39;5.6&#39; | &#39;5.7&#39; | &#39;5.8&#39; | &#39;5.9&#39; | &#39;6&#39; | &#39;6.1&#39; | &#39;6.2&#39; | &#39;6.3&#39; | &#39;6.4&#39; | &#39;6.5&#39; | &#39;6.7&#39; | &#39;6.8&#39; | &#39;6.9&#39; | &#39;7&#39; | &#39;7.1&#39; | &#39;7.2&#39; | &#39;7.7&#39; | &#39;7.9&#39; | &lt;/ol&gt; $class &#39;data.frame&#39; $row.names &#39;xtable&#39; . 산포도 : 자료가 대표값으로부터 얼마나 흩어져 분포하고 있는가의 정도를 나타내는 척도, 분산과 표준편차를 통계량으로 사용 | . var(x) # variance . 1.2937580876494 sd(x) # standard deviation . 1.13743487182757 sqrt(var(x)) sqrt(var(data$cost, na.rm=T)) . 1.13743487182757 1.13743487182757 분산이 0에 근접할수록 x의 모든 변량이 평균이 집중되어 흩어짐이 없다는 의미이다. | . . 표본분산 ($S^2$) 과 표본표준편차 ($S$) 표본분산을 구할 땐 모분산 구하는 과정과 달리 N으로 나누지 않고 N-1로 나눠준다. | . | 산포도의 통계량에서 특히 표준편차는 표준오차($= frac{S}{ sqrt(N)}$)를 구하는 데 이용된다. (S=표준편차,N=관측치 수) 표준오차 : 표본과 실제 모집단 간의 차이를 나타내는 값으로 표본의 수가 커지면 표준오차는 작아지는 특성을 나타내고 있다. | . | 분산과 표준편차의 보완된 개념으로 변동계수를 사용할 수 있다. 변동계수 = 표준편차 / 평균 | . | . . 빈도분석 비율척도를 대상으로 직접 빈도분석을 수행한 결과는 큰 의미 없다. 비율척도 변수의 값은 응답자가 직접 입력하는 수치이기 때문에 동일한 수치의 빈도수를 나타내는 table() 함수의 수행 결과는 의미가 없다고 볼 수 있기 때문이다. 만약 빈도분석에 의미를 두기 위해서는 일정한 간격으로 범주화하는 리코딩 과정이 필요하다. | . | . table(data$cost) . 2.1 2.3 3 3.3 3.4 3.5 3.8 3.9 4 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5 5.1 1 2 6 2 2 5 3 3 15 9 3 5 4 1 5 6 2 4 18 11 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6 6.1 6.2 6.3 6.4 6.5 6.7 6.8 6.9 7 7.1 7.2 9 7 5 9 4 6 5 2 14 8 13 16 11 4 8 4 4 3 4 2 7.7 7.9 4 2 . 연속형 변수는 히스토그램이나 산점도 등으로 시각화하는 것이 효과적이다. | . hist(data$cost) . plot(data$cost) . data$cost2[data$cost &gt;= 1 &amp; data$cost &lt;=3 ] = 1 data$cost2[data$cost &gt;= 4 &amp; data$cost &lt;=6 ] = 2 data$cost2[data$cost &gt;= 7] = 3 . table(data$cost2) . 1 2 3 9 144 15 . par(mfrow = c(1,2)) # 1행 2열 barplot(table(data$cost2)) # 막대차트 시각화 pie(table(data$cost2)) # 파이차트 시각화 . . 비대칭도 구학 비대칭도는 데이터의 분포가 정규분포를 갖는지를 알기 위해 이용하여 왜도와 첨도의 통계량을 사용한다. | 왜도 : 평균을 중심으로 하는 확률분포의 비대칭 정도 | 첨도 : 표준정규분포와 비교하여 얼마나 뾰족한가를 나타내는 정도 | . | . install.packages(&#39;moments&#39;) . package &#39;moments&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp RtmpkrGJAd downloaded_packages . library(moments) cost=data$cost . skewness(cost) # 0보다 작기 때문에 왼쪽 방향으로 비대칭 꼬리가 치우친다. . -0.297490798484923 kurtosis() 함수에서는 첨도 식에서 -3을 적용하지 않았으므로, 정규분포 첨도는 3이 된다. | 따라서 표준정규분포와 비교하여 첨도가 3이면 정규분포 곡선을 이루고, 첨도가 3보다 크면 정규분포보다 뾰족한 형태, 3보다 작으면 정규분포보다 완만한 형태의 분포를 갖는다. | . kurtosis(cost) . 2.68343829304508 hist(cost) . 히스토그램에 정규분포 곡선을 추가하여 왜도와 첨도의 통계량을 확인해보자 | . hist(cost, freq =F) # 히스토그램의 계급을 빈도가 아닌 확률 밀도로 표현 lines(density(cost), col=&#39;blue&#39;) # cost의 밀도분포 곡선 추가 x = seq(0,8,0.1) # 0~8 범위에서 0.1씩 증가하는 벡터 생성 curve(dnorm(x,mean(cost)),col=&#39;red&#39;,add=T) # 정규분포 확률 밀도 함수를 이용하여 정규 분포 곡선 추가 . 정규분포 확률 밀도가 적용된 정규분포 곡선을 빨간색으로 추가했을 때 정규분포 곡선과 밀도분포 곡선을 비교했더니 cost의 첨도는 정규분포보다 다소 낮고, 왜도는 음의 비대칭도를 나타내고 있다. | . . attach()와 detach() 함수로 기술통계량 구하기 | . attach(data) # 이렇게 하면 data$ 이런식으로 사용하지 않아도 됨 . The following objects are masked _by_ .GlobalEnv: cost, survey . length(cost) . 251 원래는 length(data $cost)이런 식으로 사용했어야 하는데 attach()함수를 통해서 length(cost)로 사용 가능하다. | 해제하려면 아래와 같이 입력해준다 | . detach(data) . . NA가 있는 경우 제거한 뒤에 기술통계량 구하기 | . test = c(1:5,NA,10:20) min(test) max(test) range(test) mean(test) . &lt;NA&gt; &lt;NA&gt; &lt;ol class=list-inline&gt;&lt;NA&gt; | &lt;NA&gt; | &lt;/ol&gt; &lt;NA&gt; 이때 NA를 제거해주려면 na.rm=T를 추가 입력해주면 된다. | . . 기술 통계량 보고서 작성 설문 조사한 결과를 토대로 논문이나 보고서를 작성하는 경우에는 응답자의 인구통계학적 특성을 반드시 제시해야 한다. | . | . 1) 기술통계량 구하기 표본의 인구통계학적 특성을 제시하는 데 필요한 기술통계량을 준비한다. | 인구통계학적 특성에 해당하는 변수 들을 대상으로 먼저 보고서의 가독성을 높이기 위해서 리코딩한다. | . | . data$resident2[data$resident == 1] = &#39;특별시&#39; data$resident2[data$resident &gt;= 1 &amp; data$resident &lt;= 4] = &#39;광역시&#39; data$resident2[data$resident == 5] = &#39;시구군&#39; x = table(data$resident2) x # 이 table을 비율 계산해보자 y = prop.table(x) y # 백분율 적용 round(y * 100, 2) . 광역시 시구군 200 34 . 광역시 시구군 0.8547009 0.1452991 . 광역시 시구군 85.47 14.53 . head(data,2) . A data.frame: 2 × 10 residentgenderagelevelcosttypesurveypasscost2resident2 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 11 | 1 | 50 | 1 | 5.1 | 1 | 1 | 2 | 2 | 광역시 | . 22 | 1 | 54 | 2 | 4.2 | 1 | 2 | 2 | 2 | 광역시 | . 이런식으로 gender,age 등의 칼럼에 동일하게 적용해줄 수 있다. | 이렇게 논문이나 보고서에서 연구 환경을 제시하기 위해서 인구통계학적 변수들을 대상으로 가독성을 높이기 위해서 리코딩하고 , 빈도분석과 기술통계분석을 통해서 기술통계량을 구하는 과정이다. | 빈도분석과 기술통계분석을 통해서 구해진 기초통계량을 표본의 인구통계적 특성으로 제시하기 위해서 표본의 인구통계적 특성 결과표를 작성한다. | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/23/r.html",
            "relUrl": "/2022/02/23/r.html",
            "date": " • Feb 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "기술통계분석",
            "content": "정규 분포 도수분포곡선이 평균값을 중앙으로 하여 좌우대칭인 종 모양을 이루고 있다. | 가우스 분포라고도 하며, 이 곡선을 가우스 곡선이라고도 한다. | 평균과 표준편차에 의해서 그래프의 모양과 위치가 결정된다. | 일반적으로 데이터의 분포가 평균을 중심으로 많은 데이터가 모여 있는 특성을 보인다. | 중심 극한 정리에 의해서 데이터의 수가 많아질수록 정규 분포를 따른다고 할 수 있다. 하지만 모든 데이터의 분포가 정규분포를 따른다고 가정할 수는 없다. 따라서 정규성을 전제로 하는 분석기법을 적용하기 귀해서는 정규성 검증을 수행해야 한다. | 정규 분포의 전체 면적은 1이며, 왜도 = 0, 첨도 = 0 또는 3이다. | 정규분포의 확률을 구하기 위해서 평균을 0, 표준편차를 1로 고정하여 표준화한 결과를 표준정규분포라고 한다. | . | . 모수와 비모수 검정 모수 검정 : 관측값이 어느 특정한 확룰분포를 따른다고 전제한 후, 그 분포의 모수에 대한 검정을 시행하는 방법 | 비모수 검정 : 관측값이 어느 특정한 확률분포를 따른다고 전제할 수 없는 경우에 실시하는 검정방법이다. | 일반적으로 케이스의 수가 30개 이상이면 중심극한정리에 의해서 정규분포를 따른다는 전제하에 모수 검정을 적용하게 된다. 만약 케이스의 수가 적거나 정확한 정규분포를 검정하기 위해서는 정규성 검증을 수행한다. 이러한 정규성 검정을 통해서 정규분포이면 모수 검정을 수행하고 그렇지 않으면 비모수 검정을 수행한다. 중심 극한 정리 : 표본의 크기가 커질수록 근사적으로 표본의 평균이 모평균과 같고, 분산이 모분산과 같은 정규분포를 취한다는 이론. | 정규성 검정방법 : 정규성 검정방법에는 히스토그램과 Q-Q 플롯을 이용한다. | . | . | . 표준정규분포 평균과 분산이 다른 정규분포를 표준화한 것이 표준정규분포이다. 이러한 표준정규분포는 정규분포의 근간이 되는 평군과 표준편차를 0과 1로 고정하는 과정을 의미한다. | 용도 : 정규분포의 확률(신뢰구간)을 구할 때 이용한다. | 전체 면적 = 1 | 기술통계량 : 평균 = 0, 표준편차 = 1 | 표준화 변수 : Z | 이 표준화 변수 Z값에 의해서 평균 0을 기준으로 (+-)1$ sigma$의 표준정규분포로 나타낼 수 있다. 또한 이러한 z값의 확률을 구하기 위해서는 표준정규분포 표를 이용하면 된다. | z값과 확률 구간 만약, 특정 자료가 정규분포를 따를 때, 평균으로부터 (+-)1$ sigma$만큼의 구간 확률은 P( -1 &lt; Z &lt; 1 ) = 68.3%이다. | 이때 어느 학생이 65 ~ 85점 사이의 확률은 표준화 변수로 표현하면 P( -2 &lt; Z &lt; 2 ) = 95.4%가 되고, 60~90점 사이의 확률은 P( -3 &lt; Z &lt; 3 ) = 99.7%이 된다. | 즉, 확률 변수 X값의 범위가 커질 수록 확률값은 커지는 당연한 결과를 볼 수 있다. | . | 신뢰수준 사회과학 분야에서 일반적으로 사용되는 신뢰수준은 90%, 95%, 99%이다. 이때의 Z값은 각각 1.65, 1.96, 2.58이다. | . | 신뢰구간 모집단이 정규분포를 이루고 있다면 다음과 같은 모평균의 신뢰구간 추정 식에 의해서 신뢰구간을 계산할 수 있다. | 다음은 모평균의 신뢰구간 추정 식이다. | | | 이때 $ alpha$는 유의수준이다. 유의수준이 0.1이면 신뢰수준은 90%가 되며, 유의수준이 0.05이면 신뢰수준은 95%가 되는 것이다. | 위 부등식에서 좌측값과 우측값을 이용하여 신뢰구간을 구할 수도 있다. | . | . | . 표본오차 표본에서 계산된 추측값과 모집단의 실제값과의 차이를 의미한다. 즉, 허용 오차를 백분율로 나타낸 것이다. 이러한 표본오차는 신뢰수준이 결정되면 다음과 같은 허용오차 계산식에 의해서 계산할 수 있다. | | 분산을 아는 경우 p(1-p)를 $ sigma$로 대체할 수 있다. | . | . 왜도와 첨도 왜도 : 평균을 중심으로 한 확률분포의 비대칭 정도를 나타내는 지표이다. 즉, 분포의 기울어진 방향과 정도를 나타내는 양을 의미한다. 왜도의 값이 0보다 크면 분포의 오른쪽 방향으로 비대칭 꼬리가 치우치고 왜도가 0보다 작으면 왼쪽 방향으로 비대칭 꼬리가 치우친다. 0에 근접하면 평균을 중심으로 좌우대칭에 가깝다. | 비대칭 분포는 평균, 중위수, 최빈수의 관계에 따라서 나눌 수 있다. | 음의 비대칭도 : 평균 &lt; 중위수 &lt; 최빈수 | 양의 비대칭고 : 평균 &gt; 중위수 &gt; 최빈수 | 평균 = 중위수 = 최빈수, 정규분포가 된다. | 분포가 기울어진 방향과 정도를 나타냄 | . | 첨도 : 표준정규분포와 비교하여 얼마나 뾰족한가를 측정하는 지표 첨도가 0 또는 3이면 정규분포 곡선을 이루고, 첨도가 0 또는 3보다 크면 정규분포보다 뾰족한 형태로 나타나며 그보다 작으면 정규분포보다 완만한 형태의 곡선을 그린다. | 분포도가 얼마나 중심에 집중되어 있는가? | . | . | . . 기술통계량 개요 기술통계? 자료를 요약하는 기초적인 통계량으로 데이터 분석 전에 전체적인 데이터 분포의 이해와 통계적 수치를 제공한다. | 모집단의 특성을 유추하는 데 이용할 수 있다. | . | . 빈도분석 설문 조사 결과에 대한 가장 기초적인 정보를 제공해 주는 분석 방법으로 광범위하게 이용된다. | 특히 성별이나 직급을 수치화하는 명목척도나 서열척도 같은 범주형 데이터를 대상으로 비율을 측정하는 데 주로 이용한다. | 또는 전체 응답자 중에서 특정 변수값의 범주에 속한 응답자가 차지하는 비율을 알아보고자 할 때 주로 이용한다. | 분포의 특성은 빈도수나 비율 등으로 나타낸다. | . | . 기술통계분석 빈도분석과 유사하지만 등간척도나 비율척도와 같은 연속적 데이터를 분석할 때 주로 이용한다. | 분포의 특성은 표본의 평균값, 중앙값, 최빈값으로 나타내며, 빈도수, 비율, 표준편차, 분산 등으로 표본의 분포를 알 수 있다. | . | . . 척도별 기술통계량 구하기 전체 데이터 셋의 분포와 특성을 분석하여 결측치와 이상치를 발견하고 데이터 정제를 통해서 척도별로 기술통계량을 구하는 방법에 대해서 알아보자 | . | . data = read.csv(&#39;descriptive.csv&#39;,header=T) head(data,3) . A data.frame: 3 × 8 residentgenderagelevelcosttypesurveypass . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 1 1 | 1 | 50 | 1 | 5.1 | 1 | 1 | 2 | . 2 2 | 1 | 54 | 2 | 4.2 | 1 | 2 | 2 | . 3NA | 1 | 62 | 2 | 4.7 | 1 | 1 | 1 | . 8개의 칼럼으로 구성되어 있으며 각 칼럼은 서로 다른 척도로 구성된다. | 인구통계학적 특성을 나타내는 변수를 기준으로 부모의 학력 수준에 따라 자녀의 대학진학 합격 여부를 조사한 데이터 셋이다. | . dim(data) cat(&#39;-&#39;) # 변수(칼럼) 개수 length(data) cat(&#39;-&#39;) # survey 칼럼의 관찰치 length(data$survey) cat(&#39;-&#39;) # 데이터 구조보기 str(data) . &lt;ol class=list-inline&gt;300 | 8 | &lt;/ol&gt; - . 8 - . 300 -&#39;data.frame&#39;: 300 obs. of 8 variables: $ resident: int 1 2 NA 4 5 3 2 5 NA 2 ... $ gender : int 1 1 1 2 1 1 2 1 1 1 ... $ age : int 50 54 62 50 51 55 56 49 49 49 ... $ level : int 1 2 2 NA 1 2 1 2 1 2 ... $ cost : num 5.1 4.2 4.7 3.5 5 5.4 4.1 675 4.4 4.9 ... $ type : int 1 1 1 1 1 1 1 NA 1 1 ... $ survey : int 1 2 1 4 3 3 NA NA NA 1 ... $ pass : int 2 2 1 1 1 NA 2 2 2 1 ... . summary(data) # 최소값, 최대값, 평균, 분위수, 결측치 등 제공 . resident gender age level Min. :1.000 Min. :0.00 Min. :40.00 Min. :1.000 1st Qu.:1.000 1st Qu.:1.00 1st Qu.:48.00 1st Qu.:1.000 Median :2.000 Median :1.00 Median :53.00 Median :2.000 Mean :2.233 Mean :1.42 Mean :53.88 Mean :1.836 3rd Qu.:3.000 3rd Qu.:2.00 3rd Qu.:60.00 3rd Qu.:2.000 Max. :5.000 Max. :5.00 Max. :69.00 Max. :3.000 NA&#39;s :21 NA&#39;s :13 cost type survey pass Min. :-457.200 Min. :1.00 Min. :1.00 Min. :1.000 1st Qu.: 4.425 1st Qu.:1.00 1st Qu.:2.00 1st Qu.:1.000 Median : 5.400 Median :1.00 Median :3.00 Median :1.000 Mean : 8.752 Mean :1.27 Mean :2.61 Mean :1.432 3rd Qu.: 6.300 3rd Qu.:2.00 3rd Qu.:3.00 3rd Qu.:2.000 Max. : 675.000 Max. :2.00 Max. :5.00 Max. :2.000 NA&#39;s :30 NA&#39;s :26 NA&#39;s :113 NA&#39;s :20 . 명목척도 기술통계량 명목상 의미 없는 수치로 표현된 거주지역이나 성별과 같은 명목척도 변수를 대상으로 기초통계량을 구한다. 명목척도를 대상으로 summary() 함수에 의해서 계산된 요약통계량(최대값, 최소값, 평균 등)은 의미가 없다. | 하지만 성별의 구성 비율은 표본의 통계량으로 의미가 있다. | . | . length(data$gender) . 300 summary(data$gender) . Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 1.00 1.00 1.42 2.00 5.00 . 이때 최대값, 최소값, 중위수, 평균은 의미없음 | . table(data$gender) . 0 1 2 5 2 173 124 1 . 성별 빈도수 -&gt; 0과 5 이상치 발견 | 성별인데 남,여 제외하고 0과 5가 있는 게 이상함 | 이상치 제거하자 | . data = subset(data, gender==1 | gender==2) # 이상치 제거 x = table(data$gender) x . 1 2 173 124 . barplot(x) . 구성 비율 계산 | . x . 1 2 173 124 . y = prop.table(x) y . 1 2 0.5824916 0.4175084 . round(y * 100, 2) # 소수점 두자리까지만 백분율로 나타내자 . 1 2 58.25 41.75 . 서열척도 기술통계량 계급 순위를 수치로 표현한 직급이나 학력 수준 등과 같은 서열척도 변수를 대상으로 기초 통계량을 구한다. | 서열척도 역시 summary() 함수에 의해서 계산된 최대값, 최소값, 평균 등의 요약 통계량은 큰 의미 없다. 따라서 table() 함수에 의해서 구해진 빈도수를 통해서 표본의 통계량을 산출한다. | . | . length(data$level) . 297 summary(data$level) . Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s 1.000 1.000 2.000 1.842 2.000 3.000 13 . 무쓸모 | . table(data$level) . 1 2 3 115 99 70 . barplot(table(data$level)) . barplot(prop.table(table(data$level))) .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/22/r.html",
            "relUrl": "/2022/02/22/r.html",
            "date": " • Feb 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "분석 절차와 통계 지식",
            "content": "추론통계를 바탕으로 하는 분석 절차 1) 가설검정 실증적인 증명에 앞서 세우는 잠정적인 진술, 통계분석을 통해서 채택 또는 기각될 수 있다. | 귀무가설(영가설) - &#39;~관계가, 차이가 없다&#39;등의 부정적 형태로 진술하는 가설($H_0$) | 대립가설(연구가설) - &#39;차이가 있다&#39;등의 형태로 진술하는 가설($H_1$), 검증하고자 하는 현상에 관한 예측 | 논문에서는 대립가설을 제시하고, 이 가설이 채택 또는 기각되는지는 귀무가설을 통해서 검정한다. | 귀무가설을 입증하기가 훨씬 쉽기 때문에 자신이 내세운 귀무가설이 틀렸음을 통계적인 분석과정을 통해서 입증함으로써 귀무가설과 대립 관계에 있는 연구가설을 채택하고 궁극적으로 연구가설이 사실임을 주장하고자 한다. | . | 2) 유의수준 결정 유의수준에 기준하여 가설의 채택여부가 결정된다. 유의수준은 $ alpha = 0.5 또는 P &lt; 0.5 $로 표시한다. | $ alpha &gt; P$ : 연구가설 채택, 귀무가설 기각 | 분석 결과가 유의 확률(p)이 유의 수준($ alpha$)보다 작은 경우 귀무가설을 기각, 그렇지 않으면 기각하지 못한다. | 즉 유의확률이 유의수준보다 작다는 것은 관측치가 귀무가설의 기각역에 있다는 것을 의미한다. | . | 3) 측정도구 선정 가설에 나오는 변수를 무엇으로 측정할 것인가를 결정하는 단계 | 변수의 척도를 고려하여 측정 도구를 설계 | 객체 : 연구 대상의 단위로 여러 개의 속성으로 구성된다. 예를 들면 자동차 객체는 엔진, 바퀴, 문짝 등이 속성에 해당할 수 있다. | 데이터베이스에서 객체는 레코드에 해당하고, 속성은 칼럼에 해당한다. 따라서 칼럼은 변수로 표현되고, 이러한 변수들이 모여서 객체가 된다. | 속성 : 변수 또는 변인. | 변수의 유형 : 독립변수, 종속변수, 매개변수, 조절변수, 외생변수, 억제변수, 왜곡변수 | 척도 : 연구 대상을 측정하기 위한 측정 도구로서 응답자가 변인의 값을 선택할 수 있도록 일련의 기호 또는 숫자로 나타내어 변수를 측정하게 하는 단위이다. 따라서 척도를 측정 수준이라고도 한다. | 명목척도 : 단순 속성 분류, 연산이 의미 없다. | 서열척도 : 순서 관계를 밝혀준다. 연산이 의미 없다. | 등간척도 : 절대원점을 갖고 있지 않으며 측정 대상의 속성에 대한 각 수준 간의 간격이 동일한 척도로 간격이 일정하여 덧셈과 뺄셈 연산이 가능한 변수이다. | 비율척도 : 척도의 수가 등간이며, 절대원점을 가지고 있는 척도를 말한다. 즉, 속성이 0을 기준으로 한 수치로 되어있기 때문에 사칙연산이 모두 가능한 변수이다. | . | 4) 데이터 수집(설문지, 웹, SNS) 선정되 측정 도구를 이용하여 설문 문항을 작성하고, 오프라인 온라인을 통해서 데이터를 수집하는 단계이다. | . | 5) 데이터 코딩/프로그래밍 데이터의 수집을 통해서 획득한 데이터를 통계분석 프로그램(R, Python, SAS, SPSS, Excel 등)을 이용하여 데이터를 입력(코딩)하는 단계이다. 코딩은 사용자의 응답 결과를 숫자나 기호 등을 이용하여 데이터를 입력하는 과정을 말한다. | . | 6) 통계분석 수행(R/SPSS/SAS) 전문 통계분석 프로그램(R,SPSS,SAS)을 이용하여 분석을 시행하는 단계이다. | 변수의 척도에 의해서 대부분 통계분석 방법이 결정되기 때문에 변수의 척도 선정과 모델링이 무엇보다도 중요하다. | 빈도분석, 교차분석(카이제곱), 요인 분석, 신뢰도 분석, 상관관계 분석, 회귀분석, t-검정, 분산분석 | . | 7) 결과분석(논문/보고서 작성) 연구목적과 연구가설에 대한 검증을 중심으로 분석하는 단계이다. 단순한 통계 결과 제시보다는 인구 통계학적 특성을 시작으로 결과의 의미를 해석하고, 연구자의 개인적인 의견을 기술하여 분석 결과를 제시한다. | . | . | . 가설 설정 이전의 연구조사 추론통계 기반의 데이터 분석 절차 이전에 연구조사 과정이 선행되어야 한다. | 연구문제 선정 단계, 예비조사 단계, 연구모형 설계 단계 등이 포함될 수 있다. | . | . . 통계 관련 용어 이용 분야에 따른 통계학의 구분 기술 통계학 : 수집된 자료의 특성을 쉽게 파악하기 위해서 자료를 정리 및 요약 | 추론 통계학 : 모집단에서 추출한 표본의 정보를 이용하여 모집단의 다양한 특성을 과학적으로 추론 | . | . | . 전수조사와 표본조사 전수조사 : 모집단 내에 있는 모든 대상을 조사하는 방법 | 표본조사 : 모집단으로부터 추출된 표본을 대상으로 분석을 시행하기 떄문에 전수조사의 단점을 보완할 수 있지만 모집단의 특성을 반영하는 표본이 추출되지 못하면 수집된 자료가 무용지물이 될 수 있다. | . | 모집단과 표본 모집단은 통계적 관찰 대상이 되는 개체의 전체집합을 의미. | 표본은 모집단에서 조사대상으로 추출된 부분집합을 뜻한다. | 모집단으로부터 표본을 추출하는 과정을 표본추출이라고 한다. | 모집단의 특성을 나타내는 모수 | 표본의 특성을 나타내는 통계량 | . | . 통계적 추정 모집단의 특성을 파악하기 위해서 모집단의 특성을 대표하는 표본을 추출하고, 이러한 표본을 이용하여 모집단의 특성을 나타내는 각종 모수인 모평균, 모분산 등을 예측하는 방법이 통계적 추첮이다. 점추정 : 모집단의 특성을 하나의 값으로 추정하는 방식, 모수와 동일할 가능성이 가장 큰 하나의 값을 선택하는 방법으로 가능성 희박 | 구간 추정 : 모집단의 특성을 적절한 구간을 이용하여 추정하는 방식, 모수가 속하는 일정 구간(하한값, 상한값)으로 추정하기 때문에 일반적으로 많이 사용한다. | . | . | . 통계적 추정 中 구간 추정의 주요 용어 신뢰수준 : 계산된 구간이 모수를 포함할 확률 | 신뢰구간 : 신뢰수준 하에서 모수를 포함하는 구간으로 (하한값, 상한값)의 형식으로 표현한다. | 표본오차 : 모집단에서 추출한 표본이 모집단의 특성과 정확이 일치하지 않아서 발생하는 확률의 차이를 의미한다. | . | . . 기각역과 채택역 이때 귀무가설을 채택하거나 기각하는 기준을 임계값이라고 한다. | 이러한 임계값을 기준으로 채택되는 범위를 채택역이라고 하며, 기각되는 범위를 기각역이라고 표현한다. | 즉, 검정 통계량의 값이 기각역에 속하면 귀무가설을 기각하게 된다는 의미이다. | . | . 양측 검정과 단측 검정 검정 통계량의 분포에서 유의수준 $ alpha$에 의하여 기각역의 크기가 결정되는데 기각역의 위치는 연구가설의 형태에 의하여 결정된다. 연구가설의 형태에 따라서 양측 검정과 단측 검정으로 나누어진다. | 양측 검정 : 귀무가설이 &#39;성별에 따른 만족도에 차이가 없다&#39;와 같은 형식으로 방향성(어느 한쪽이 많고 적음이 없음)이 없는 경우 적용하는 검정방법이다. 따라서 연구가설은 &#39;성별에 따라 만족도에 차이가 있다&#39;와 같은 방향성이 없는 가설과 방향성(남성의 만족도가 더 크다)을 갖는 형식으로 연구가설을 진술할 수 있다. | 단측 검정 : 어느 한쪽이 많거나 적은 가설인 경우에 해당된다. | 모집단의 특성을 나타내는 수치인 모수가 가설에 의해서 정해지는 특정값보다 작은 경우는 좌측 검정이라고 하고, 모수가 특정값보다 큰 경우에는 우측 검정이라고 한다. | . | . 가설 검정 오류 가설을 검정하기 위해서는 귀무가설과 연구가설을 설정하여 통계분석을 통해서 둘 중 하나를 채택하게 된다. 이러한 검정 과정에서 발생할 수 있는 오류는 제 1종 오류와 제 2종 오류가 있다. | 제 1종 오류 : 귀무가설이 참인데도 불구하고 귀무가설을 기각하는 오류를 의미한다. | 제 2종 오류 : 귀무가설이 거짓인데도 불구하고 귀무가설을 채택하는 오류를 의미한다. | 제 1종 오류를 범할 확률은 $ alpha$로 표현하고, 제 2종 오류를 범할 확률은 $ beta$로 표현한다. 또한 제 1종 오류를 범할 확률 $ alpha$는 유의수준이라고 하며 제 2종 오류를 범하지 않을 확률은 1-$ beta$로서 검정력이라고 한다. | 검정력이란 대립가설이 맞을 때 귀무가설을 기각할 확률을 의미한다. | . | . 가설검정 오류와 기각역은 밀접한 관련이 있다. 만약 귀무가설의 채택역을 크게 하면 제 1종 오류는 적어지지만 제2종 오류는 커지고, 귀무가설의 채택역을 작게하면 제2종 오류는 작아지지만 제1종 오류가 커지는 특성을 보인다. | 가설검정에서는 이러한 두 가지 오류는 발생할 수밖에 없지만 가능하면 모두 작은 경우가 바람직할 것이다. 따라서 가설검정의 특성에 맞게 적절한 유의수준을 결정하여 가설검정의 오류가 최소화되도록 해야한다. | . | . . 검정 통계량 가설을 검정하기 위해 수집된 데이터로부터 계산된 통계량을 말한다. 즉 가설검정에서 기각역을 결정하는 기준이 되는 통계량을 의미한다. | 이러한 검정 통계량은 유의수준 $ alpha$의 값과 비교하여 귀무가설 기각 혹은 채택 여부를 결정하게 된다. | 검정 통계량은 분석 방법에 따라서 달라지는데 상관분석은 r값, 회귀분석은 F값과 t값, T-검정은 t값, 분산분석은 F값, 카이제곱은 $x^2$값 등으로 나타난다. | . | . 예) 연구가설은 &#39;학력 수준에 따라 제품만족도에 차이가 있다&#39;를 검정하기 위해서 독립 표본 T-검정을 수행했고, 이때 유의수준은 0.05로 결정하였다. 검정 결과 검정 통계량 t값이 10.652 유의확률 P값이 0.012가 나왔다고 가정한다면 유의수준 0.05에서 귀무가설이 기각된다. 따라서 학력수준에 따라 제품만족도에 유의미한 차이가 있음을 알 수 있다. | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/21/r.html",
            "relUrl": "/2022/02/21/r.html",
            "date": " • Feb 21, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "교차검정, 파생변수 등",
            "content": "변수 간의 관계 분석 1) 범주형, 범주형 | . | . new_data = read.csv(&#39;new_data.csv&#39;,header=T) str(new_data) . &#39;data.frame&#39;: 231 obs. of 15 variables: $ resident : int 1 2 4 5 3 2 2 5 3 1 ... $ gender : int 1 1 2 1 1 2 1 2 1 1 ... $ job : int 1 2 NA 3 2 1 2 NA 3 1 ... $ age : int 26 54 45 62 57 36 37 29 35 56 ... $ position : int 4 1 2 1 NA 3 3 4 4 1 ... $ price : num 5.1 4.2 3.5 5 5.4 4.1 4.9 2.3 4.2 6.7 ... $ survey : int 5 4 4 5 4 2 3 1 3 4 ... $ price2 : num 5.1 4.2 3.5 5 5.4 4.1 4.9 2.3 4.2 6.7 ... $ price3 : num 5.1 4.2 3.5 5 5.4 4.1 4.9 2.3 4.2 6.7 ... $ resident2: chr &#34;1.서울특별시&#34; &#34;2.인천광역시&#34; &#34;4.대구광역시&#34; &#34;5.시구군&#34; ... $ job2 : chr &#34;공무원&#34; &#34;회사원&#34; NA &#34;개인사업&#34; ... $ age2 : chr &#34;청년층&#34; &#34;중년층&#34; &#34;중년층&#34; &#34;장년층&#34; ... $ position2: chr &#34;4급&#34; &#34;1급&#34; &#34;2급&#34; &#34;1급&#34; ... $ gender2 : chr &#34;남자&#34; &#34;남자&#34; &#34;여자&#34; &#34;남자&#34; ... $ age3 : int 1 2 2 3 3 2 2 1 2 3 ... . resident_gender = table(new_data$resident2, new_data$gender2) resident_gender . 남자 여자 1.서울특별시 67 43 2.인천광역시 26 20 3.대전광역시 16 10 4.대구광역시 6 9 5.시구군 19 15 . gender_resident = table(new_data$gender2, new_data$resident2) gender_resident . 1.서울특별시 2.인천광역시 3.대전광역시 4.대구광역시 5.시구군 남자 67 26 16 6 19 여자 43 20 10 9 15 . 성별에 따른 거주지역의 분포 현황 시각화 | . barplot(resident_gender, beside = T, horiz = T, col = rainbow(5), legend = row.names(resident_gender), main = &#39;성별에 따른 거주지역 분포 현황&#39;) . 거주지역에 따른 성별의 분포 현황 시각화 | . barplot(gender_resident, beside=T, col=rep(c(2,4),5), horiz=T, legend = c(&#39;남자&#39;,&#39;여자&#39;),main = &#39;거주지역별 성별 분포 현황&#39;) . 변수 간의 관계 분석 1) 범주형, 연속형 | . | . install.packages(&#39;lattice&#39;) library(lattice) . package &#39;lattice&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp Rtmp0ckrOG downloaded_packages . head(new_data) . A data.frame: 6 × 15 residentgenderjobagepositionpricesurveyprice2price3resident2job2age2position2gender2age3 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt; . 11 | 1 | 1 | 26 | 4 | 5.1 | 5 | 5.1 | 5.1 | 1.서울특별시 | 공무원 | 청년층 | 4급 | 남자 | 1 | . 22 | 1 | 2 | 54 | 1 | 4.2 | 4 | 4.2 | 4.2 | 2.인천광역시 | 회사원 | 중년층 | 1급 | 남자 | 2 | . 34 | 2 | NA | 45 | 2 | 3.5 | 4 | 3.5 | 3.5 | 4.대구광역시 | NA | 중년층 | 2급 | 여자 | 2 | . 45 | 1 | 3 | 62 | 1 | 5.0 | 5 | 5.0 | 5.0 | 5.시구군 | 개인사업 | 장년층 | 1급 | 남자 | 3 | . 53 | 1 | 2 | 57 | NA | 5.4 | 4 | 5.4 | 5.4 | 3.대전광역시 | 회사원 | 장년층 | NA | 남자 | 3 | . 62 | 2 | 1 | 36 | 3 | 4.1 | 2 | 4.1 | 4.1 | 2.인천광역시 | 공무원 | 중년층 | 3급 | 여자 | 2 | . densityplot(~age,data=new_data, groups = job2, # plt.points = T : 밀도, auto.key=T : 범례 plt.points = T,auto.key=T) . 연속형, 범주형, 범주형 | . densityplot(~price|factor(gender2), # 격자를 만들어주는 칼럼을 지정하는 속성(성별로 격자 생성) data = new_data, groups = position2, # 하나의 격자에서 그룹을 지정하는 속성(직급으로 그룹 생성) plot.points = T, auto.key=T) . densityplot(~price|factor(position2), data=new_data, groups = gender2, plot.points=T,auto.key=T) . 연속형, 연속형, 범주형 | . xyplot(price~age | factor(gender2), data= new_data) . . 분석을 위해서는 코딩된 데이터를 대상으로 새로운 변수를 생성하여 분석에 이용할 수 있는데, 이렇게 만들어진 변수를 파생변수라고 한다. 즉, 기존 변수를 이용하여 새로 만들어진 변수를 의미한다. | 사칙 연산을 이용하는 방법과 1:1 관계로 나열하는 방법이 있다. 사칙 연산을 이용하는 방법은 예로 성적 분포를 나타내는 데이터에서 국어, 영어, 수학 점수를 갖는 칼럼을 대상으로 덧셈 연산이나 나눗셈 연산을 이용하여 총점이나 평균 칼럼을 생성하는 방법이다. | 1:1 관계로 나열하는 것은 원-핫 인코딩을 생각하면 된다. $ to$ 칼럼의 수는 늘어나지만 추론통계분석이나 예측분석에서 설명 변수 즉, 독립 변수로 사용할 수 있다. | . | . . 더미 형식으로 파생변수 생성 특정 칼럼을 명목상 두 가지 상태(0과 1)로 범주화하여 나타내는 형태를 더미라고 표현한다. | 여기서는 1:N 관계를 갖는 고객 정보 테이블의 주거환경 칼럼을 대상으로 주택 유형(단독주택과 다세대주택)과 아파트 유형(아파트와 오피스텔)의 두 가지 상태로 더미화 하여 파생변수를 생성하는 과정에 대해서 알아보자 | . | . user_data = read.csv(&#39;user_data.csv&#39;,header=T) head(user_data) . A data.frame: 6 × 5 user_idagehouse_typeresidentjob . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt; . 11001 | 35 | 4 | 전북 | 6 | . 21002 | 45 | 4 | 경남 | 2 | . 31003 | 55 | 4 | 경기 | 6 | . 41004 | 43 | 3 | 대전 | 1 | . 51005 | 55 | 4 | 경기 | 2 | . 61006 | 45 | 1 | 대구 | 1 | . table(user_data$house_type) . 1 2 3 4 32 47 21 300 . 주거환경 오피스텔(4)이 가장 많은 빈도수를 나타낸다. | . house_type2 = ifelse(user_data$house_type == 1 | user_data$house_type == 2 ,0 ,1 ) house_type2[1:10] # house_type이 1 또는 2이면 0으로 바꿔주고 아니면 1로 바꿔준다. . &lt;ol class=list-inline&gt;1 | 1 | 1 | 1 | 1 | 0 | 1 | 0 | 1 | 1 | &lt;/ol&gt; user_data$house_type2 = house_type2 # user_data 데이터셋에 새로운 칼럼을 추가 . 1:N 관계를 1:1 관계로 파생변수 생성 | . pay_data = read.csv(&#39;pay_data.csv&#39;,header=T) head(pay_data) . A data.frame: 6 × 4 user_idproduct_typepay_methodprice . &lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;dbl&gt; . 11001 | 1 | 1.현금 | 153000 | . 21002 | 2 | 2.직불카드 | 120000 | . 31003 | 3 | 3.신용카드 | 780000 | . 41003 | 4 | 3.신용카드 | 123000 | . 51003 | 5 | 3.신용카드 | 79000 | . 61003 | 1 | 3.신용카드 | 125000 | . table(pay_data$product_type) . 1 2 3 4 5 55 82 89 104 70 . 지불정보 테이블을 대상으로 상품 유형의 빈도수를 나타낸다. 상품 유형은 잡화(4)가 가장 많은 빈도수를 보인다. | . library(reshape2) # 구조 변경을 위한 패키지 로딩 product_price = dcast(pay_data, user_id~product_type, sum, na.rm=T) # 행~열 head(product_price) . Using price as value column: use value.var to override. . A data.frame: 6 × 6 user_id12345 . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11001 | 153000 | 0 | 0 | 0 | 0 | . 21002 | 0 | 120000 | 0 | 0 | 0 | . 31003 | 125000 | 0 | 780000 | 123000 | 79000 | . 41007 | 0 | 150000 | 78879 | 81980 | 71773 | . 51011 | 0 | 71774 | 0 | 0 | 0 | . 61012 | 0 | 0 | 74968 | 0 | 0 | . names(product_price) = c(&#39;user_id&#39;,&#39;식료품1&#39;,&#39;생필품(2)&#39;,&#39;의류(3)&#39;,&#39;잡화(4)&#39;,&#39;기타(5)&#39;) # 확인 head(product_price) . A data.frame: 6 × 6 user_id식료품1생필품(2)의류(3)잡화(4)기타(5) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11001 | 153000 | 0 | 0 | 0 | 0 | . 21002 | 0 | 120000 | 0 | 0 | 0 | . 31003 | 125000 | 0 | 780000 | 123000 | 79000 | . 41007 | 0 | 150000 | 78879 | 81980 | 71773 | . 51011 | 0 | 71774 | 0 | 0 | 0 | . 61012 | 0 | 0 | 74968 | 0 | 0 | . . pay_price = dcast(pay_data, user_id~pay_method, length) head(pay_price) . Using price as value column: use value.var to override. . A data.frame: 6 × 5 user_id1.현금2.직불카드3.신용카드4.상품권 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 11001 | 1 | 0 | 0 | 0 | . 21002 | 0 | 1 | 0 | 0 | . 31003 | 0 | 0 | 4 | 0 | . 41007 | 0 | 4 | 0 | 0 | . 51011 | 1 | 0 | 0 | 0 | . 61012 | 0 | 1 | 0 | 0 | . names(pay_price)=c(&#39;user_id&#39;,&#39;현금(1)&#39;,&#39;직불카드(2)&#39;,&#39;신용카드(3)&#39;,&#39;상품권(4)&#39;) head(pay_price) . A data.frame: 6 × 5 user_id현금(1)직불카드(2)신용카드(3)상품권(4) . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 11001 | 1 | 0 | 0 | 0 | . 21002 | 0 | 1 | 0 | 0 | . 31003 | 0 | 0 | 4 | 0 | . 41007 | 0 | 4 | 0 | 0 | . 51011 | 1 | 0 | 0 | 0 | . 61012 | 0 | 1 | 0 | 0 | . 파생 변수 합치기 지금까지 생성된 파생변수를 대상으로 고객정보 테이블에 파생변수를 추가하여 새로운 형태의 데이터프레임을 생성하는 과정에 대해서 알아보자 | . | . library(plyr) # 데이터프레임 병합을 위한 패키지 로딩 . user_pay_data = join(user_data, product_price, by = &#39;user_id&#39;) head(user_pay_data,3) . A data.frame: 3 × 11 user_idagehouse_typeresidentjobhouse_type2식료품1생필품(2)의류(3)잡화(4)기타(5) . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11001 | 35 | 4 | 전북 | 6 | 1 | 153000 | 0 | 0 | 0 | 0 | . 21002 | 45 | 4 | 경남 | 2 | 1 | 0 | 120000 | 0 | 0 | 0 | . 31003 | 55 | 4 | 경기 | 6 | 1 | 125000 | 0 | 780000 | 123000 | 79000 | . user_pay_data = join(user_pay_data, pay_price, by = &#39;user_id&#39;) head(user_pay_data ,3) . A data.frame: 3 × 15 user_idagehouse_typeresidentjobhouse_type2식료품1생필품(2)의류(3)잡화(4)기타(5)현금(1)직불카드(2)신용카드(3)상품권(4) . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 11001 | 35 | 4 | 전북 | 6 | 1 | 153000 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 21002 | 45 | 4 | 경남 | 2 | 1 | 0 | 120000 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 31003 | 55 | 4 | 경기 | 6 | 1 | 125000 | 0 | 780000 | 123000 | 79000 | 0 | 0 | 4 | 0 | . 사칙연산으로 총 구매금액 파생변수 생성하기 | . user_pay_data$총구매금액 = user_pay_data$&#39;식료품1&#39; + user_pay_data$&#39;생필품(2)&#39; + user_pay_data$&#39;의류(3)&#39; + user_pay_data$&#39;잡화(4)&#39; + user_pay_data$&#39;기타(5)&#39; . user_pay_data[c(1:10),c(1,7:11,16)] . A data.frame: 10 × 7 user_id식료품1생필품(2)의류(3)잡화(4)기타(5)총구매금액 . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11001 | 153000 | 0 | 0 | 0 | 0 | 153000 | . 21002 | 0 | 120000 | 0 | 0 | 0 | 120000 | . 31003 | 125000 | 0 | 780000 | 123000 | 79000 | 1107000 | . 41004 | NA | NA | NA | NA | NA | NA | . 51005 | NA | NA | NA | NA | NA | NA | . 61006 | NA | NA | NA | NA | NA | NA | . 71007 | 0 | 150000 | 78879 | 81980 | 71773 | 382632 | . 81008 | NA | NA | NA | NA | NA | NA | . 91009 | NA | NA | NA | NA | NA | NA | . 101010 | NA | NA | NA | NA | NA | NA | . 표본 추출 정제된 데이터를 저장하고, 표본으로 사용할 데이터를 추출하는 샘플링에 대해 알아보자 | . | . 정제 데이터 저장 | . getwd() . &#39;C:/Users/ehfus/Downloads/R&#39; write.csv(user_pay_data,&#39;cleanedData.csv&#39;,quote=F,row.names=F) # 따옴표와 행이름 제거하고 저장하자 . data = read.csv(&#39;cleanedData.csv&#39;,header=T) data . A data.frame: 400 × 16 user_idagehouse_typeresidentjobhouse_type2식료품1생필품.2.의류.3.잡화.4.기타.5.현금.1.직불카드.2.신용카드.3.상품권.4.총구매금액 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 1001 | 35 | 4 | 전북 | 6 | 1 | 153000 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 153000 | . 1002 | 45 | 4 | 경남 | 2 | 1 | 0 | 120000 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 120000 | . 1003 | 55 | 4 | 경기 | 6 | 1 | 125000 | 0 | 780000 | 123000 | 79000 | 0 | 0 | 4 | 0 | 1107000 | . 1004 | 43 | 3 | 대전 | 1 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1005 | 55 | 4 | 경기 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1006 | 45 | 1 | 대구 | 1 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1007 | 39 | 4 | 경남 | 1 | 1 | 0 | 150000 | 78879 | 81980 | 71773 | 0 | 4 | 0 | 0 | 382632 | . 1008 | 55 | 2 | 경기 | 6 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1009 | 33 | 4 | 인천 | 3 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1010 | 55 | 3 | 서울 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1011 | 66 | 4 | 서울 | 2 | 1 | 0 | 71774 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 71774 | . 1012 | 55 | 4 | 서울 | 6 | 1 | 0 | 0 | 74968 | 0 | 0 | 0 | 1 | 0 | 0 | 74968 | . 1013 | 62 | 4 | 부산 | 6 | 1 | 0 | 0 | 0 | 81841 | 0 | 1 | 0 | 0 | 0 | 81841 | . 1014 | 35 | 4 | 경기 | 6 | 1 | 0 | 0 | 0 | 94782 | 83804 | 0 | 2 | 0 | 0 | 178586 | . 1015 | 48 | 4 | 경기 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1016 | 55 | 2 | 대구 | 5 | 0 | 5813 | 6459 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 12272 | . 1017 | 60 | 2 | 서울 | 1 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1018 | 60 | 1 | 충북 | 1 | 0 | 0 | 171136 | 236924 | 4275 | 83410 | 0 | 0 | 7 | 0 | 495745 | . 1019 | 50 | 4 | 대구 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1020 | 50 | 4 | 경기 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1021 | 50 | 4 | 부산 | 5 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1022 | 50 | 4 | 경남 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1023 | 50 | 2 | 경북 | 5 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1024 | 60 | 1 | 전북 | 6 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1025 | 60 | 2 | 서울 | 6 | 0 | 67067 | 68996 | 86768 | 88246 | 70757 | 5 | 0 | 0 | 0 | 381834 | . 1026 | 60 | 4 | 인천 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1027 | 60 | 4 | 경기 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1028 | 59 | 4 | 서울 | 1 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1029 | 59 | 1 | 충북 | 2 | 0 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1030 | 59 | 4 | 경남 | 2 | 1 | 0 | 78758 | 0 | 290 | 290 | 0 | 0 | 3 | 0 | 79338 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 1371 | 47 | 2 | 경기 | 5 | 0 | 0 | 0 | 10937 | 0 | 0 | 0 | 0 | 1 | 0 | 10937 | . 1372 | 47 | 4 | 부산 | 6 | 1 | 0 | 10937 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 10937 | . 1373 | 47 | 2 | 서울 | 2 | 0 | 0 | 0 | 96691 | 0 | 0 | 0 | 0 | 1 | 0 | 96691 | . 1374 | 47 | 4 | 경북 | 6 | 1 | 0 | 0 | 0 | 96691 | 0 | 0 | 0 | 1 | 0 | 96691 | . 1375 | 47 | 4 | 서울 | 2 | 1 | 0 | 0 | 0 | 0 | 16309 | 1 | 0 | 0 | 0 | 16309 | . 1376 | 47 | 2 | 경기 | 3 | 0 | 2971 | 77371 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 80342 | . 1377 | 47 | 4 | 충북 | 3 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1378 | 47 | 4 | 경기 | 2 | 1 | 0 | 0 | 12289 | 2781 | 87731 | 0 | 0 | 3 | 0 | 102801 | . 1379 | 47 | 4 | 경기 | 3 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1380 | 47 | 4 | 광주 | 4 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1381 | 47 | 4 | 광주 | 4 | 1 | 0 | 3896 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 3896 | . 1382 | 47 | 4 | 경남 | 1 | 1 | 0 | 0 | 6933 | 14131 | 0 | 0 | 0 | 2 | 0 | 21064 | . 1383 | 47 | 4 | 경기 | 1 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1384 | 47 | 2 | 서울 | 1 | 0 | 96071 | 96071 | 0 | 89455 | 89455 | 4 | 0 | 0 | 0 | 371052 | . 1385 | 47 | 4 | 경기 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1386 | 47 | 4 | 경기 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1387 | 47 | 4 | 서울 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1388 | 47 | 4 | 서울 | 6 | 1 | 99530 | 0 | 99530 | 99530 | 0 | 3 | 0 | 0 | 0 | 298590 | . 1389 | 47 | 4 | 부산 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1390 | 47 | 4 | 경기 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1391 | 47 | 4 | 인천 | 2 | 1 | 0 | 0 | 0 | 0 | 70099 | 0 | 0 | 1 | 0 | 70099 | . 1392 | 47 | 4 | 서울 | 5 | 1 | 0 | 0 | 0 | 82179 | 0 | 0 | 0 | 1 | 0 | 82179 | . 1393 | 47 | 4 | 경남 | 6 | 1 | 0 | 0 | 0 | 0 | 73369 | 1 | 0 | 0 | 0 | 73369 | . 1394 | 47 | 4 | 서울 | 4 | 1 | 87900 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 87900 | . 1395 | 47 | 4 | 강원 | 2 | 1 | 0 | 14392 | 69235 | 86474 | 0 | 3 | 0 | 0 | 0 | 170101 | . 1396 | 47 | 4 | 충남 | 6 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1397 | 47 | 4 | 서울 | 4 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1398 | 47 | 2 | 경기 | 2 | 0 | 68672 | 0 | 101700 | 150000 | 0 | 0 | 0 | 3 | 0 | 320372 | . 1399 | 47 | 4 | 전남 | 2 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 1400 | 46 | 4 | 인천 | 5 | 1 | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | . 표본 샘플링 정제된 데이터를 대상으로 원하는 행수 만큼 임의로 데이터를 추출하는 표본 샘플링에 대해서 알아보자 | . | . nrow(data) . 400 choice1 = sample(nrow(data), 30) choice1 # 계속 바뀔 것이다. . &lt;ol class=list-inline&gt;264 | 359 | 320 | 147 | 165 | 170 | 287 | 274 | 248 | 275 | 217 | 354 | 11 | 256 | 353 | 352 | 357 | 208 | 121 | 244 | 258 | 276 | 322 | 42 | 356 | 297 | 307 | 400 | 388 | 169 | &lt;/ol&gt; choice2 = sample(50 : nrow(data),30) choice2 . &lt;ol class=list-inline&gt;229 | 158 | 145 | 89 | 78 | 198 | 207 | 271 | 73 | 316 | 56 | 386 | 186 | 260 | 234 | 211 | 325 | 119 | 246 | 51 | 160 | 384 | 289 | 91 | 214 | 360 | 305 | 188 | 351 | 371 | &lt;/ol&gt; choice3 = sample(50 : 100 ,30) choice3 . &lt;ol class=list-inline&gt;64 | 95 | 89 | 81 | 83 | 67 | 100 | 59 | 62 | 88 | 54 | 66 | 63 | 65 | 76 | 98 | 91 | 68 | 86 | 72 | 79 | 74 | 94 | 51 | 75 | 55 | 84 | 77 | 69 | 70 | &lt;/ol&gt; choice4 = sample(c(10:50,80:150,160:190),30) choice4 . &lt;ol class=list-inline&gt;16 | 116 | 94 | 93 | 122 | 19 | 126 | 90 | 171 | 105 | 100 | 49 | 138 | 185 | 35 | 177 | 109 | 168 | 87 | 115 | 142 | 114 | 33 | 85 | 188 | 166 | 141 | 180 | 89 | 47 | &lt;/ol&gt; 위의 샘플링된 데이터로 표본을 추출해보자 | . head(data[choice1,]) . A data.frame: 6 × 16 user_idagehouse_typeresidentjobhouse_type2식료품1생필품.2.의류.3.잡화.4.기타.5.현금.1.직불카드.2.신용카드.3.상품권.4.총구매금액 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2641264 | 51 | 4 | 서울 | 2 | 1 | 0 | 13941 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 13941 | . 3591359 | 48 | 1 | 경기 | 5 | 0 | 0 | 0 | 0 | 8320 | 0 | 1 | 0 | 0 | 0 | 8320 | . 3201320 | 49 | 4 | 경기 | 6 | 1 | 0 | 0 | 0 | 0 | 77563 | 0 | 0 | 1 | 0 | 77563 | . 1471147 | 55 | 4 | 경남 | 2 | 1 | 0 | 0 | 0 | 96351 | 0 | 1 | 0 | 0 | 0 | 96351 | . 1651165 | 54 | 4 | 경기 | 4 | 1 | 0 | 0 | 0 | 0 | 11785 | 1 | 0 | 0 | 0 | 11785 | . 1701170 | 54 | 4 | 경기 | 1 | 1 | 0 | 0 | 0 | 2383 | 0 | 1 | 0 | 0 | 0 | 2383 | . . data(&#39;iris&#39;) dim(iris) . &lt;ol class=list-inline&gt;150 | 5 | &lt;/ol&gt; idx = sample(1:nrow(iris),nrow(iris)*0.7) training = iris[idx,] # 학습 데이터 셋 test = iris[-idx,] # 검정 데이터 셋 = 학습 데이터 셋의 idx에 -을 취해주면 이것만 제외되니깐 남는 건 30%밖에 남지 않게 됨 dim(training) . &lt;ol class=list-inline&gt;105 | 5 | &lt;/ol&gt; . 교차 검정 샘플링 교차 검정은 학습데이터와 검정데이터를 7:3 비율로 구성하여 학습데이터로 모델을 생성하고, 검정데이터로 모델을 평가하는 전통적인 방식과 비교하여 평가의 신뢰도를 높이기 위해 동일한 데이터 셋을 N등분하여 N-1 개의 학습데이터로 모델을 생성하고 나머지 1개를 검정데이터로 이용하여 모델을 평가하는 방식이다. 교차 검정을 위한 데이터 셋 생성 알고리즘으로 K겹 교차 검정 데이터 셋 생성 알고리즘을 사용한다. | 데이터 셋을 일정한 크기로 분할 한다는 의미에서 겹이라는 용어를 사용하고 K겹 교차 검정이란 K겹의 회수만큼 모델을 평가하고, 각 모델의 평가 결과를 다시 산술평균으로 최종 모델의 성능을 평가한다. 1) K개로 데이터를 분할하여 D1은 검정 데이터, D2~Dk는 학습 데이터 | 2) 검정데이터의 위치를 하나씩 변경하고, 나머지 데이터를 학습데이터로 생성 | 3) 위의 단계1과 단계2의 과정을 K만큼 반복한다. | . | . | . name = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;) score = c(90,85,99,78,65,88) df = data.frame(Name=name,Score=score) df . A data.frame: 6 × 2 NameScore . &lt;chr&gt;&lt;dbl&gt; . a | 90 | . b | 85 | . c | 99 | . d | 78 | . e | 65 | . f | 88 | . install.packages(&#39;cvTools&#39;) . also installing the dependencies &#39;DEoptimR&#39;, &#39;robustbase&#39; . package &#39;DEoptimR&#39; successfully unpacked and MD5 sums checked package &#39;robustbase&#39; successfully unpacked and MD5 sums checked package &#39;cvTools&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp Rtmp0ckrOG downloaded_packages . library(cvTools) . df . A data.frame: 6 × 2 NameScore . &lt;chr&gt;&lt;dbl&gt; . a | 90 | . b | 85 | . c | 99 | . d | 78 | . e | 65 | . f | 88 | . cross = (cvFolds(n=6,K=3,R=2,type = &#39;random&#39;)) cross . Repeated 3-fold CV with 2 replications: Fold 1 2 1 2 3 2 1 4 3 4 1 1 3 5 2 5 2 3 6 6 . 6개 데이터를 무작위로 3개 분할하여 1회 교차 검정 데이터를 생성한다. | . str(cross) . List of 5 $ n : num 6 $ K : num 3 $ R : num 2 $ subsets: int [1:6, 1:2] 2 1 4 3 5 6 3 4 1 5 ... $ which : int [1:6] 1 2 3 1 2 3 - attr(*, &#34;class&#34;)= chr &#34;cvFolds&#34; . 5개의 key로 구성된 List 자료구조로 구성되어 있다. | . cross$subsets[cross$which == 1,1] cross$subsets[cross$which == 1,2] . &lt;ol class=list-inline&gt;2 | 3 | &lt;/ol&gt; &lt;ol class=list-inline&gt;3 | 5 | &lt;/ol&gt;",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/17/r.html",
            "relUrl": "/2022/02/17/r.html",
            "date": " • Feb 17, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "EDA(Exploratory Data Analysis)",
            "content": "EDA : 탐색적 자료 분석, 즉 수집한 자료를 다양한 각도에서 관찰하고 이해하는 과정으로 그래프나 통계적 방법을 이용해서 자료를 직관적으로 파악하는 과정을 말한다. 자료의 분포와 통계를 파악하여 자료가 갖고 있는 특성을 이해하고, 잠재적인 문제를 발견해서 분석전에 발견이 어려운 다양한 문제점을 발견하고 이를 바탕으로 기존의 가설을 수정하거나 새로운 방향의 가설을 세울 수 있다. | EDA는 분석에 필요한 자료를 이해하고 자료의 전처리 그리고 정제된 데이터셋을 대상으로 변수 간의 특성을 분석하는 데 필요하다. 1) 분석의 목적과 변수의 특징 확인 수집된 자료를 대상으로 셀 수 없는 변수와 셀 수 있는 변수를 구분한다. | . | 2) 자료 확인 및 전처리 수집된 자료를 확인하고 결측치와 이상치를 확인하고 정제한다. | . | 3) 자료의 각 변수 관찰 대표값이나 산포도를 이용한 통계 조사 및 이산변수와 연속변수 시각화 | . | 4) 변수 간의 관계에 초점을 맞춰 패턴 발견 변수와 변수 간의 상관관계이나 고급 시각화 도구를 이용한 변수 간의 패턴 발견 | . | . | . . 1) 수집 자료 이해 예를 들면 자료 구조, 관측치의 길이, 변수 구성, 각 변수의 의미, 측정 방법, 척도 유형 등을 확인한다. 수집 자료의 이해는 자료로부터 의미 있는 통찰을 얻는 출발점이다. | 데이터의 분포 현황을 통해서 데이터의 유형과 결측치(NA) 그리고 극단치(outlier)등의 데이터를 발견할 수 있다. 결측치는 응답자의 회피와 응답할 수 없는 상황(예를 들면 여성인 경우 군필 항목)에서 주로 발생하며, 극단치는 데이터의 수집과 입력과정에서 실수로 발생한다. | . | . getwd() setwd(&#39;C:/Users/ehfus/Downloads/R&#39;) . &#39;C:/Users/ehfus/Downloads/R&#39; dataset = read.csv(&#39;dataset.csv&#39;,header=T) . head(dataset) names(dataset) . A data.frame: 6 × 7 residentgenderjobagepositionpricesurvey . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt; . 1 1 | 1 | 1 | 26 | 2 | 5.1 | 1 | . 2 2 | 1 | 2 | 54 | 5 | 4.2 | 2 | . 3NA | 1 | 2 | 41 | 4 | 4.7 | 4 | . 4 4 | 2 | NA | 45 | 4 | 3.5 | 2 | . 5 5 | 1 | 3 | 62 | 5 | 5.0 | 1 | . 6 3 | 1 | 2 | 57 | NA | 5.4 | 2 | . &lt;ol class=list-inline&gt;&#39;resident&#39; | &#39;gender&#39; | &#39;job&#39; | &#39;age&#39; | &#39;position&#39; | &#39;price&#39; | &#39;survey&#39; | &lt;/ol&gt; print() 함수의 결과는 콘솔 창에서 확인할 수 있고, View() 함수의 결과는 별도의 창을 통해 테이블 형식으로 확인할 수 있다. | 여기서는 jupyter notebook으로 실행하기 때문에 생략한다. | . tail(dataset) . A data.frame: 6 × 7 residentgenderjobagepositionpricesurvey . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt; . 2952 | 1 | 1 | 20 | 1 | 3.5 | 5 | . 2961 | 5 | 2 | 26 | 1 | 7.1 | 2 | . 2973 | 1 | 3 | 24 | 1 | 6.1 | 2 | . 2984 | 1 | 3 | 59 | 5 | 5.5 | 2 | . 2993 | 0 | 1 | 45 | 4 | 5.1 | 2 | . 3001 | 1 | 3 | 27 | 2 | 4.4 | 2 | . 2) 데이터 셋 구조 보기 분석에 필요한 데이터 셋의 구조를 확인하는 함수는 names(),attributes(),str() 함수 등이 있다. 이러한 함수들을 이용하여 데이터 셋의 세부정보를 조회할 수 있다. 특히 attributes() 함수는 열 이름과 행 이름 그리고 자료구조 정보를 제공하며 str() 함수는 자료구조 그리고 관측치와 변수의 개수를 제공한다. | . | . names(dataset) # 변수명(칼럼) 조회 . &lt;ol class=list-inline&gt;&#39;resident&#39; | &#39;gender&#39; | &#39;job&#39; | &#39;age&#39; | &#39;position&#39; | &#39;price&#39; | &#39;survey&#39; | &lt;/ol&gt; attributes(dataset) # 열,행,그리고 자료구조 정보 제공 . $names &lt;ol class=list-inline&gt;&#39;resident&#39; | &#39;gender&#39; | &#39;job&#39; | &#39;age&#39; | &#39;position&#39; | &#39;price&#39; | &#39;survey&#39; | &lt;/ol&gt; $class &#39;data.frame&#39; $row.names &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 173 | 174 | 175 | 176 | 177 | 178 | 179 | 180 | 181 | 182 | 183 | 184 | 185 | 186 | 187 | 188 | 189 | 190 | 191 | 192 | 193 | 194 | 195 | 196 | 197 | 198 | 199 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 209 | 210 | 211 | 212 | 213 | 214 | 215 | 216 | 217 | 218 | 219 | 220 | 221 | 222 | 223 | 224 | 225 | 226 | 227 | 228 | 229 | 230 | 231 | 232 | 233 | 234 | 235 | 236 | 237 | 238 | 239 | 240 | 241 | 242 | 243 | 244 | 245 | 246 | 247 | 248 | 249 | 250 | 251 | 252 | 253 | 254 | 255 | 256 | 257 | 258 | 259 | 260 | 261 | 262 | 263 | 264 | 265 | 266 | 267 | 268 | 269 | 270 | 271 | 272 | 273 | 274 | 275 | 276 | 277 | 278 | 279 | 280 | 281 | 282 | 283 | 284 | 285 | 286 | 287 | 288 | 289 | 290 | 291 | 292 | 293 | 294 | 295 | 296 | 297 | 298 | 299 | 300 | &lt;/ol&gt; str(dataset) . &#39;data.frame&#39;: 300 obs. of 7 variables: $ resident: int 1 2 NA 4 5 3 2 5 NA 2 ... $ gender : int 1 1 1 2 1 1 2 1 1 1 ... $ job : int 1 2 2 NA 3 2 1 2 1 2 ... $ age : int 26 54 41 45 62 57 36 NA 56 37 ... $ position: int 2 5 4 4 5 NA 3 3 5 3 ... $ price : num 5.1 4.2 4.7 3.5 5 5.4 4.1 675 4.4 4.9 ... $ survey : int 1 2 4 2 1 2 4 4 3 3 ... . 3) 데이터 셋 조회 데이터 셋에 포함된 특정 변수의 내용을 조회하는 방법에 대해서 알아본다. | . | . names(dataset) . &lt;ol class=list-inline&gt;&#39;resident&#39; | &#39;gender&#39; | &#39;job&#39; | &#39;age&#39; | &#39;position&#39; | &#39;price&#39; | &#39;survey&#39; | &lt;/ol&gt; dataset$resident . &lt;ol class=list-inline&gt;1 | 2 | &lt;NA&gt; | 4 | 5 | 3 | 2 | 5 | &lt;NA&gt; | 2 | 5 | 3 | 1 | 2 | &lt;NA&gt; | 1 | 3 | 2 | 1 | 1 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 3 | 2 | 5 | 1 | 3 | 2 | 4 | 2 | 5 | 3 | 5 | 5 | 3 | 1 | 1 | 1 | 4 | 1 | 2 | 1 | 1 | 1 | &lt;NA&gt; | 1 | 4 | 2 | 1 | 1 | 3 | &lt;NA&gt; | 1 | 1 | 2 | &lt;NA&gt; | 2 | 1 | 1 | &lt;NA&gt; | 5 | 1 | 3 | 1 | 1 | 3 | 1 | &lt;NA&gt; | 1 | 1 | 1 | &lt;NA&gt; | 1 | 5 | 1 | 2 | 1 | 5 | 2 | 5 | 1 | 2 | 1 | 1 | 4 | 2 | 1 | 2 | 5 | 1 | 2 | 1 | 5 | 1 | 5 | 3 | 1 | 1 | 3 | 4 | 1 | 3 | 1 | 1 | 5 | 3 | 1 | &lt;NA&gt; | 5 | 5 | 2 | 1 | 2 | 1 | 4 | 2 | 1 | 2 | 2 | &lt;NA&gt; | 1 | 3 | 1 | 2 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 3 | 2 | 5 | 1 | 3 | 2 | 4 | 2 | 5 | 3 | 5 | 5 | 3 | 1 | 1 | 1 | 4 | 1 | 2 | 1 | 1 | 1 | &lt;NA&gt; | 1 | 4 | 2 | 1 | 1 | 3 | &lt;NA&gt; | 1 | 1 | 2 | &lt;NA&gt; | 2 | 1 | 1 | &lt;NA&gt; | 5 | 1 | 3 | 1 | 1 | 3 | 1 | &lt;NA&gt; | 1 | 1 | 1 | &lt;NA&gt; | 1 | 5 | 1 | 2 | 1 | 5 | 2 | 5 | 1 | 2 | 1 | 1 | 4 | 2 | 1 | 2 | 5 | 1 | 2 | 1 | 5 | 1 | 5 | 3 | 1 | 1 | 3 | 4 | 1 | 3 | 1 | 1 | 5 | 3 | 1 | &lt;NA&gt; | 1 | 1 | 1 | 5 | 1 | &lt;NA&gt; | 5 | 1 | 1 | 5 | 1 | 5 | 5 | 1 | 2 | &lt;NA&gt; | 5 | 2 | 1 | 4 | 2 | 1 | 5 | 5 | 2 | 1 | 2 | 1 | 3 | 4 | 1 | 3 | 1 | 1 | 5 | 3 | 1 | 5 | 1 | 1 | 5 | 1 | 5 | 5 | 1 | 2 | &lt;NA&gt; | 5 | 2 | 1 | 4 | 2 | 1 | 4 | 2 | 1 | 1 | 1 | 1 | 5 | 1 | 2 | 1 | 2 | 1 | 3 | 4 | 3 | 1 | &lt;/ol&gt; length(dataset$resident) . 300 위의 특정 변수의 조회 결과를 변수에 저장하기 | . x = dataset$age x . &lt;ol class=list-inline&gt;26 | 54 | 41 | 45 | 62 | 57 | 36 | &lt;NA&gt; | 56 | 37 | 29 | 35 | 56 | 20 | 63 | 49 | 49 | 49 | 25 | 57 | 56 | 21 | 69 | 63 | 30 | 34 | 26 | 59 | 38 | 57 | 60 | 49 | 65 | &lt;NA&gt; | 49 | 23 | 63 | &lt;NA&gt; | 45 | 29 | 28 | 65 | 60 | 32 | 25 | &lt;NA&gt; | 38 | 65 | &lt;NA&gt; | 24 | 61 | 41 | 63 | 30 | 37 | 22 | 29 | &lt;NA&gt; | 25 | 36 | 47 | 64 | &lt;NA&gt; | 28 | 65 | 24 | 62 | 62 | 28 | 63 | &lt;NA&gt; | 26 | 40 | 52 | &lt;NA&gt; | 43 | 44 | 30 | 48 | 41 | 54 | 44 | 29 | 31 | 49 | 64 | 65 | 46 | 42 | 38 | 65 | 40 | 42 | 40 | 55 | 41 | 63 | 45 | 59 | 43 | &lt;NA&gt; | 63 | 47 | 45 | 44 | &lt;NA&gt; | 27 | 37 | 35 | 69 | 20 | &lt;NA&gt; | 20 | 24 | 46 | 25 | &lt;NA&gt; | 21 | 53 | 33 | 56 | 45 | 60 | 38 | &lt;NA&gt; | 63 | 41 | 27 | 37 | 20 | 63 | 49 | 49 | 21 | 69 | 63 | 30 | 34 | 26 | 59 | 38 | 57 | 60 | 49 | 65 | &lt;NA&gt; | 49 | 23 | 63 | &lt;NA&gt; | 45 | 29 | 28 | 65 | 60 | 32 | 25 | &lt;NA&gt; | 38 | 65 | &lt;NA&gt; | 24 | 61 | 41 | 63 | 30 | 37 | 22 | 29 | &lt;NA&gt; | 25 | 36 | 47 | 64 | &lt;NA&gt; | 28 | 65 | 24 | 62 | 62 | 28 | 63 | &lt;NA&gt; | 26 | 40 | 52 | &lt;NA&gt; | 43 | 44 | 30 | 48 | 41 | 54 | 44 | 29 | 31 | 49 | 64 | 65 | 46 | 42 | 38 | 65 | 40 | 42 | 40 | 55 | 41 | 63 | 45 | 59 | 43 | &lt;NA&gt; | 63 | 47 | 45 | 44 | &lt;NA&gt; | 27 | 37 | 35 | 69 | 20 | &lt;NA&gt; | 20 | 24 | 46 | 25 | &lt;NA&gt; | 21 | 53 | 47 | 48 | 22 | 48 | 21 | 51 | 64 | 27 | 64 | 54 | &lt;NA&gt; | 42 | 54 | 25 | 54 | 60 | &lt;NA&gt; | 63 | 43 | 21 | 23 | 24 | 33 | 56 | 45 | 60 | 38 | &lt;NA&gt; | 63 | 20 | 60 | 20 | 24 | 46 | 25 | 50 | 21 | 64 | 27 | 64 | 54 | &lt;NA&gt; | 42 | 54 | 25 | 54 | 60 | &lt;NA&gt; | 63 | 43 | 21 | 23 | 24 | 63 | 41 | 27 | 47 | 48 | 22 | 48 | 21 | 55 | 43 | 20 | 26 | 24 | 59 | 45 | 27 | &lt;/ol&gt; 산점도 그래프로 변수 조회 | . plot(dataset$price) # x축은 index 즉, price의 순서?이니까 딱 300개가 있을 것이다. . 칼럼명을 이용하여 특정 변수 조회 | . head(dataset[&#39;gender&#39;]) . A data.frame: 6 × 1 gender . &lt;int&gt; . 11 | . 21 | . 31 | . 42 | . 51 | . 61 | . 색인을 사용하여 특정 변수 조회 | . dataset[2] # 두 번째 칼럼 조회 # 칼럼이 default . A data.frame: 300 × 1 gender . &lt;int&gt; . 1 | . 1 | . 1 | . 2 | . 1 | . 1 | . 2 | . 1 | . 1 | . 1 | . 2 | . 1 | . 1 | . 2 | . 1 | . 1 | . 1 | . 1 | . 2 | . 1 | . 1 | . 1 | . 1 | . 1 | . 1 | . 2 | . 1 | . 1 | . 1 | . 2 | . ⋮ | . 2 | . 1 | . 2 | . 2 | . 2 | . 1 | . 2 | . 1 | . 1 | . 2 | . 2 | . 2 | . 2 | . 1 | . 2 | . 1 | . 2 | . 1 | . 2 | . 2 | . 2 | . 2 | . 0 | . 2 | . 1 | . 5 | . 1 | . 1 | . 0 | . 1 | . dataset[3,] # 3번째 행, 모든 열 . A data.frame: 1 × 7 residentgenderjobagepositionpricesurvey . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt; . 3NA | 1 | 2 | 41 | 4 | 4.7 | 4 | . dataset[,3] dataset[3] . &lt;ol class=list-inline&gt;1 | 2 | 2 | &lt;NA&gt; | 3 | 2 | 1 | 2 | 1 | 2 | &lt;NA&gt; | 3 | 1 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | &lt;NA&gt; | 3 | 1 | 2 | 1 | 3 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 3 | 1 | 3 | 1 | 2 | 2 | 1 | 3 | &lt;NA&gt; | 1 | 2 | 1 | 2 | 3 | 3 | 1 | 2 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 2 | 2 | 1 | 3 | 2 | 2 | &lt;NA&gt; | 3 | 2 | 1 | 2 | 3 | 2 | 2 | 1 | 2 | 3 | 2 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 1 | 1 | 2 | 3 | 2 | 2 | 3 | 2 | 2 | 3 | 3 | &lt;NA&gt; | 3 | 1 | 3 | 2 | 3 | 3 | 3 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | 3 | 2 | 3 | 3 | 3 | 1 | 3 | 3 | 2 | 3 | 2 | 3 | 2 | 1 | 2 | 3 | 1 | 2 | 1 | 3 | 1 | 1 | 2 | 1 | 1 | 2 | 1 | 3 | 1 | 3 | 1 | 2 | 2 | 1 | 3 | &lt;NA&gt; | 1 | 2 | 1 | 2 | 3 | 3 | 1 | 2 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 2 | 2 | 1 | 3 | 2 | 2 | &lt;NA&gt; | 3 | 2 | 1 | 2 | 3 | 2 | 2 | 1 | 2 | 3 | 2 | 2 | 2 | 1 | 3 | 2 | 2 | 1 | 3 | 1 | 1 | 2 | 3 | 2 | 2 | 3 | 2 | 2 | 3 | 3 | &lt;NA&gt; | 3 | 1 | 3 | 2 | 3 | 3 | 3 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | 3 | 3 | 2 | 3 | 1 | 3 | 3 | 2 | &lt;NA&gt; | 1 | 3 | 1 | 3 | 3 | &lt;NA&gt; | 3 | 1 | 3 | 2 | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 3 | 1 | 3 | 3 | 2 | 3 | 3 | 1 | 2 | 3 | 3 | 1 | 2 | &lt;NA&gt; | 1 | 3 | 1 | 3 | 3 | &lt;NA&gt; | 3 | 1 | 3 | 2 | 3 | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2 | 3 | 1 | 3 | 1 | 2 | 1 | 2 | 3 | 3 | 1 | 3 | &lt;/ol&gt; A data.frame: 300 × 1 job . &lt;int&gt; . 1 | . 2 | . 2 | . NA | . 3 | . 2 | . 1 | . 2 | . 1 | . 2 | . NA | . 3 | . 1 | . 3 | . 2 | . 1 | . 2 | . 3 | . 2 | . 1 | . NA | . 3 | . 1 | . 2 | . 1 | . 3 | . 1 | . 1 | . 2 | . 1 | . ⋮ | . 1 | . 3 | . 1 | . 3 | . 3 | . NA | . 3 | . 1 | . 3 | . 2 | . 3 | . 3 | . 3 | . 3 | . 3 | . 2 | . 3 | . 3 | . 2 | . 3 | . 1 | . 3 | . 1 | . 2 | . 1 | . 2 | . 3 | . 3 | . 1 | . 3 | . 2개 이상의 칼럼 조회 | . dataset[c(&#39;age&#39;,&#39;price&#39;)] . A data.frame: 300 × 2 ageprice . &lt;int&gt;&lt;dbl&gt; . 26 | 5.1 | . 54 | 4.2 | . 41 | 4.7 | . 45 | 3.5 | . 62 | 5.0 | . 57 | 5.4 | . 36 | 4.1 | . NA | 675.0 | . 56 | 4.4 | . 37 | 4.9 | . 29 | 2.3 | . 35 | 4.2 | . 56 | 6.7 | . 20 | 4.3 | . 63 | 257.8 | . 49 | 5.7 | . 49 | 4.6 | . 49 | 5.1 | . 25 | 2.1 | . 57 | 5.1 | . 56 | 6.2 | . 21 | 5.1 | . 69 | 4.1 | . 63 | 4.1 | . 30 | -75.0 | . 34 | 2.3 | . 26 | 5.0 | . 59 | NA | . 38 | 5.2 | . 57 | 4.7 | . ⋮ | ⋮ | . 64 | NA | . 54 | 6.4 | . NA | -235.8 | . 42 | NA | . 54 | 7.9 | . 25 | 6.4 | . 54 | 6.3 | . 60 | 6.1 | . NA | NA | . 63 | 6.3 | . 43 | NA | . 21 | 6.0 | . 23 | 6.9 | . 24 | NA | . 63 | 336.5 | . 41 | 6.2 | . 27 | 5.9 | . 47 | NA | . 48 | 6.9 | . 22 | NA | . 48 | 7.7 | . 21 | 6.3 | . 55 | 5.5 | . 43 | 4.5 | . 20 | 3.5 | . 26 | 7.1 | . 24 | 6.1 | . 59 | 5.5 | . 45 | 5.1 | . 27 | 4.4 | . dataset[c(2,6)] . A data.frame: 300 × 2 genderprice . &lt;int&gt;&lt;dbl&gt; . 1 | 5.1 | . 1 | 4.2 | . 1 | 4.7 | . 2 | 3.5 | . 1 | 5.0 | . 1 | 5.4 | . 2 | 4.1 | . 1 | 675.0 | . 1 | 4.4 | . 1 | 4.9 | . 2 | 2.3 | . 1 | 4.2 | . 1 | 6.7 | . 2 | 4.3 | . 1 | 257.8 | . 1 | 5.7 | . 1 | 4.6 | . 1 | 5.1 | . 2 | 2.1 | . 1 | 5.1 | . 1 | 6.2 | . 1 | 5.1 | . 1 | 4.1 | . 1 | 4.1 | . 1 | -75.0 | . 2 | 2.3 | . 1 | 5.0 | . 1 | NA | . 1 | 5.2 | . 2 | 4.7 | . ⋮ | ⋮ | . 2 | NA | . 1 | 6.4 | . 2 | -235.8 | . 2 | NA | . 2 | 7.9 | . 1 | 6.4 | . 2 | 6.3 | . 1 | 6.1 | . 1 | NA | . 2 | 6.3 | . 2 | NA | . 2 | 6.0 | . 2 | 6.9 | . 1 | NA | . 2 | 336.5 | . 1 | 6.2 | . 2 | 5.9 | . 1 | NA | . 2 | 6.9 | . 2 | NA | . 2 | 7.7 | . 2 | 6.3 | . 0 | 5.5 | . 2 | 4.5 | . 1 | 3.5 | . 5 | 7.1 | . 1 | 6.1 | . 1 | 5.5 | . 0 | 5.1 | . 1 | 4.4 | . . 결측치 처리 na.rm=T 또는 na.omit() 함수를 통해 결측치를 제거한 후 유효한 자료만을 대상으로 연산할 수도 있다. 하지만 무조건 결측치를 제거한다면 그로 인하여 중요한 데이터가 손실될 수 있다. 따라서 결측치를 처리하는 방법에는 결측치를 제거하는 방법도 있지만 결측치를 제거하지 않고 다른 값으로 대체하는 방법도 고려해볼 수 있다. | . | . 결측치 확인 | . summary(dataset$price) . Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s -457.200 4.425 5.400 8.752 6.300 675.000 30 . 결측치가 30개 있다. | . sum(dataset$price) # error sum(dataset$price,na.rm=T) # 무시 sum(na.omit(dataset$price)) # na.omit() 함수는 결측치를 제거한 후 남은 것을 반환해준다. . &lt;NA&gt; 2362.9 2362.9 결측치 대체 (0으로 대체하거나 평균으로 대체한다.) | . ifelse(!is.na(dataset$price),dataset$price,0) . &lt;ol class=list-inline&gt;5.1 | 4.2 | 4.7 | 3.5 | 5 | 5.4 | 4.1 | 675 | 4.4 | 4.9 | 2.3 | 4.2 | 6.7 | 4.3 | 257.8 | 5.7 | 4.6 | 5.1 | 2.1 | 5.1 | 6.2 | 5.1 | 4.1 | 4.1 | -75 | 2.3 | 5 | 0 | 5.2 | 4.7 | 0 | 4.4 | 5.2 | 0 | 6.3 | 4 | 5.3 | 0 | 4.2 | 4.1 | 5 | 0 | 7.1 | 4 | 85.1 | 3.8 | 5.3 | 4.7 | 5.3 | 6.2 | 7 | 6.4 | 5.1 | 5.5 | 6.4 | 4.7 | 6.3 | 3.9 | 4.1 | 4.1 | 5 | 3.5 | 6 | 3.3 | -457.2 | 6.3 | 5.6 | 6.2 | 6.2 | 6.3 | -5.9 | 3.4 | 6.3 | 3.5 | 6.4 | 3 | 6.8 | 0 | 3.5 | 5.2 | 5.5 | 6.1 | 5.8 | 6.1 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 5.1 | 5.5 | 6.1 | 0 | 5 | 4 | 5.7 | 115.7 | 0 | 75.1 | 5.7 | 6.3 | 0 | 7.1 | 5 | 6.5 | 0 | 4.9 | 6.2 | 4.6 | 7.2 | 6.5 | 6.4 | 6.8 | 5.5 | 5.8 | 4 | 6 | 6.7 | 7.7 | 4.3 | 5 | 4 | 6.7 | 5.4 | 0 | 336.5 | 6.2 | 5.9 | 4.9 | 4.3 | 225.8 | 5.7 | 4 | 5.1 | 3.8 | 4.1 | -4.8 | 5.1 | 5 | 0 | 5.2 | 4.7 | 5.1 | 4.4 | 5.2 | 0 | 5 | 4 | 3.9 | 0 | 4 | 4.1 | 5 | 5 | 4 | 4 | 85.1 | 3.8 | 6 | 3 | 5.3 | 5 | 7 | 6.4 | 6.2 | 5.5 | 4.3 | 4.7 | 4.8 | 3.9 | 6 | 4.1 | 5 | 4 | 6 | 3.3 | -345.6 | 0 | 5.6 | 5.3 | 6.2 | 4.6 | -5.9 | 3.4 | 6.3 | 6.3 | 6.4 | 3 | 6.8 | 5 | 4 | 5.2 | 5.5 | 3 | 5.8 | 6.3 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 4.6 | 5.5 | 6.1 | 5.3 | 5 | 6 | 5.7 | 115.7 | 4.6 | 75.1 | 5.7 | 6.3 | 6.3 | 7.1 | 5.2 | 6.5 | 0 | 4.9 | 6.2 | 4 | 7.2 | 6.5 | 6.4 | 6.8 | 5 | 5.8 | 6 | 3 | 6.7 | 7.7 | 0 | 6.9 | 4 | 7.7 | 5.3 | 6.7 | 4.8 | 6.2 | 6 | 6.4 | -235.8 | 5.1 | 7.9 | 6.4 | 6.3 | 6.1 | 0 | 6.3 | 0 | 6 | 6.9 | 0 | 4.3 | 0 | 0 | 6.7 | 5.4 | 0 | 7 | 6 | 6.2 | 6.1 | 5 | 5.8 | 4 | 3 | 5 | 6 | 6.2 | 0 | 6.4 | -235.8 | 0 | 7.9 | 6.4 | 6.3 | 6.1 | 0 | 6.3 | 0 | 6 | 6.9 | 0 | 336.5 | 6.2 | 5.9 | 0 | 6.9 | 0 | 7.7 | 6.3 | 5.5 | 4.5 | 3.5 | 7.1 | 6.1 | 5.5 | 5.1 | 4.4 | &lt;/ol&gt; ifelse(!is.na(dataset$price),dataset$price,round(mean(dataset$price,na.rm=T),2)) . &lt;ol class=list-inline&gt;5.1 | 4.2 | 4.7 | 3.5 | 5 | 5.4 | 4.1 | 675 | 4.4 | 4.9 | 2.3 | 4.2 | 6.7 | 4.3 | 257.8 | 5.7 | 4.6 | 5.1 | 2.1 | 5.1 | 6.2 | 5.1 | 4.1 | 4.1 | -75 | 2.3 | 5 | 8.75 | 5.2 | 4.7 | 8.75 | 4.4 | 5.2 | 8.75 | 6.3 | 4 | 5.3 | 8.75 | 4.2 | 4.1 | 5 | 8.75 | 7.1 | 4 | 85.1 | 3.8 | 5.3 | 4.7 | 5.3 | 6.2 | 7 | 6.4 | 5.1 | 5.5 | 6.4 | 4.7 | 6.3 | 3.9 | 4.1 | 4.1 | 5 | 3.5 | 6 | 3.3 | -457.2 | 6.3 | 5.6 | 6.2 | 6.2 | 6.3 | -5.9 | 3.4 | 6.3 | 3.5 | 6.4 | 3 | 6.8 | 8.75 | 3.5 | 5.2 | 5.5 | 6.1 | 5.8 | 6.1 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 5.1 | 5.5 | 6.1 | 8.75 | 5 | 4 | 5.7 | 115.7 | 8.75 | 75.1 | 5.7 | 6.3 | 8.75 | 7.1 | 5 | 6.5 | 8.75 | 4.9 | 6.2 | 4.6 | 7.2 | 6.5 | 6.4 | 6.8 | 5.5 | 5.8 | 4 | 6 | 6.7 | 7.7 | 4.3 | 5 | 4 | 6.7 | 5.4 | 8.75 | 336.5 | 6.2 | 5.9 | 4.9 | 4.3 | 225.8 | 5.7 | 4 | 5.1 | 3.8 | 4.1 | -4.8 | 5.1 | 5 | 8.75 | 5.2 | 4.7 | 5.1 | 4.4 | 5.2 | 8.75 | 5 | 4 | 3.9 | 8.75 | 4 | 4.1 | 5 | 5 | 4 | 4 | 85.1 | 3.8 | 6 | 3 | 5.3 | 5 | 7 | 6.4 | 6.2 | 5.5 | 4.3 | 4.7 | 4.8 | 3.9 | 6 | 4.1 | 5 | 4 | 6 | 3.3 | -345.6 | 8.75 | 5.6 | 5.3 | 6.2 | 4.6 | -5.9 | 3.4 | 6.3 | 6.3 | 6.4 | 3 | 6.8 | 5 | 4 | 5.2 | 5.5 | 3 | 5.8 | 6.3 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 4.6 | 5.5 | 6.1 | 5.3 | 5 | 6 | 5.7 | 115.7 | 4.6 | 75.1 | 5.7 | 6.3 | 6.3 | 7.1 | 5.2 | 6.5 | 8.75 | 4.9 | 6.2 | 4 | 7.2 | 6.5 | 6.4 | 6.8 | 5 | 5.8 | 6 | 3 | 6.7 | 7.7 | 8.75 | 6.9 | 4 | 7.7 | 5.3 | 6.7 | 4.8 | 6.2 | 6 | 6.4 | -235.8 | 5.1 | 7.9 | 6.4 | 6.3 | 6.1 | 8.75 | 6.3 | 8.75 | 6 | 6.9 | 8.75 | 4.3 | 8.75 | 8.75 | 6.7 | 5.4 | 8.75 | 7 | 6 | 6.2 | 6.1 | 5 | 5.8 | 4 | 3 | 5 | 6 | 6.2 | 8.75 | 6.4 | -235.8 | 8.75 | 7.9 | 6.4 | 6.3 | 6.1 | 8.75 | 6.3 | 8.75 | 6 | 6.9 | 8.75 | 336.5 | 6.2 | 5.9 | 8.75 | 6.9 | 8.75 | 7.7 | 6.3 | 5.5 | 4.5 | 3.5 | 7.1 | 6.1 | 5.5 | 5.1 | 4.4 | &lt;/ol&gt; dataset$newprice = ifelse(!is.na(dataset$price),dataset$price,round(mean(dataset$price,na.rm=T),2)) . dataset$newprice . &lt;ol class=list-inline&gt;5.1 | 4.2 | 4.7 | 3.5 | 5 | 5.4 | 4.1 | 675 | 4.4 | 4.9 | 2.3 | 4.2 | 6.7 | 4.3 | 257.8 | 5.7 | 4.6 | 5.1 | 2.1 | 5.1 | 6.2 | 5.1 | 4.1 | 4.1 | -75 | 2.3 | 5 | 8.75 | 5.2 | 4.7 | 8.75 | 4.4 | 5.2 | 8.75 | 6.3 | 4 | 5.3 | 8.75 | 4.2 | 4.1 | 5 | 8.75 | 7.1 | 4 | 85.1 | 3.8 | 5.3 | 4.7 | 5.3 | 6.2 | 7 | 6.4 | 5.1 | 5.5 | 6.4 | 4.7 | 6.3 | 3.9 | 4.1 | 4.1 | 5 | 3.5 | 6 | 3.3 | -457.2 | 6.3 | 5.6 | 6.2 | 6.2 | 6.3 | -5.9 | 3.4 | 6.3 | 3.5 | 6.4 | 3 | 6.8 | 8.75 | 3.5 | 5.2 | 5.5 | 6.1 | 5.8 | 6.1 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 5.1 | 5.5 | 6.1 | 8.75 | 5 | 4 | 5.7 | 115.7 | 8.75 | 75.1 | 5.7 | 6.3 | 8.75 | 7.1 | 5 | 6.5 | 8.75 | 4.9 | 6.2 | 4.6 | 7.2 | 6.5 | 6.4 | 6.8 | 5.5 | 5.8 | 4 | 6 | 6.7 | 7.7 | 4.3 | 5 | 4 | 6.7 | 5.4 | 8.75 | 336.5 | 6.2 | 5.9 | 4.9 | 4.3 | 225.8 | 5.7 | 4 | 5.1 | 3.8 | 4.1 | -4.8 | 5.1 | 5 | 8.75 | 5.2 | 4.7 | 5.1 | 4.4 | 5.2 | 8.75 | 5 | 4 | 3.9 | 8.75 | 4 | 4.1 | 5 | 5 | 4 | 4 | 85.1 | 3.8 | 6 | 3 | 5.3 | 5 | 7 | 6.4 | 6.2 | 5.5 | 4.3 | 4.7 | 4.8 | 3.9 | 6 | 4.1 | 5 | 4 | 6 | 3.3 | -345.6 | 8.75 | 5.6 | 5.3 | 6.2 | 4.6 | -5.9 | 3.4 | 6.3 | 6.3 | 6.4 | 3 | 6.8 | 5 | 4 | 5.2 | 5.5 | 3 | 5.8 | 6.3 | 5.4 | 6 | 6.7 | 5.2 | 5.6 | 4.6 | 5.5 | 6.1 | 5.3 | 5 | 6 | 5.7 | 115.7 | 4.6 | 75.1 | 5.7 | 6.3 | 6.3 | 7.1 | 5.2 | 6.5 | 8.75 | 4.9 | 6.2 | 4 | 7.2 | 6.5 | 6.4 | 6.8 | 5 | 5.8 | 6 | 3 | 6.7 | 7.7 | 8.75 | 6.9 | 4 | 7.7 | 5.3 | 6.7 | 4.8 | 6.2 | 6 | 6.4 | -235.8 | 5.1 | 7.9 | 6.4 | 6.3 | 6.1 | 8.75 | 6.3 | 8.75 | 6 | 6.9 | 8.75 | 4.3 | 8.75 | 8.75 | 6.7 | 5.4 | 8.75 | 7 | 6 | 6.2 | 6.1 | 5 | 5.8 | 4 | 3 | 5 | 6 | 6.2 | 8.75 | 6.4 | -235.8 | 8.75 | 7.9 | 6.4 | 6.3 | 6.1 | 8.75 | 6.3 | 8.75 | 6 | 6.9 | 8.75 | 336.5 | 6.2 | 5.9 | 8.75 | 6.9 | 8.75 | 7.7 | 6.3 | 5.5 | 4.5 | 3.5 | 7.1 | 6.1 | 5.5 | 5.1 | 4.4 | &lt;/ol&gt; 극단치 처리 극단치 : 표본 중 다른 대상들과 확연히 구분되는 통계적 관측치를 의미한다. 즉, 변수의 분포에서 비정상적으로 분포를 벗어난 값을 극단치(outlier)라고 한다. 예를 들면 나이의 분포는 0세 이상 100세 사이의 분포를 보이는 것이 일반적이지만 -2 또는 230과 같은 비정상적인 수치가 보인다면 이는 극단치에 해당한다. 또한 변수와의 상관관계에 있어서 높은 직급의 경력사원이 직급이나 낮은 일반 사원보다 급여가 월등하게 적다면 이 또한 비정상적인 수치로 의심해볼 수 있다. | . | . 범주형 변수 극단치 처리 성별과 같은 변수를 컴퓨터로 처리하기 위해서는 남자(1), 여자(2)와 같이 수치 데이터로 표현해야 한다. 이렇게 명목상 수치로 표현된 변수들을 범주형(명목척도)이라고 한다. | 범주형 변수들을 대상으로 극단치를 확인하고 이를 토대로 데이터를 정제하는 과정을 알아보자 | . | . table(dataset$gender) pie(table(dataset$gender)) . 0 1 2 5 2 173 124 1 . dataset = subset(dataset,gender==1|gender==2) # subset은 데이터 셋의 특정 변수를 대상으로 조건식에 해당하는 레코드(행)를 추출하여 별도의 변수에 저장하는 경우 유용한 함수이다. dataset # subset 함수를 이용하여 데이터를 정제한 것이다. (gender==5인 경우는 걸러낸 것이다. subset으로!) . A data.frame: 297 × 8 residentgenderjobagepositionpricesurveynewprice . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt; . 1 1 | 1 | 1 | 26 | 2 | 5.1 | 1 | 5.10 | . 2 2 | 1 | 2 | 54 | 5 | 4.2 | 2 | 4.20 | . 3NA | 1 | 2 | 41 | 4 | 4.7 | 4 | 4.70 | . 4 4 | 2 | NA | 45 | 4 | 3.5 | 2 | 3.50 | . 5 5 | 1 | 3 | 62 | 5 | 5.0 | 1 | 5.00 | . 6 3 | 1 | 2 | 57 | NA | 5.4 | 2 | 5.40 | . 7 2 | 2 | 1 | 36 | 3 | 4.1 | 4 | 4.10 | . 8 5 | 1 | 2 | NA | 3 | 675.0 | 4 | 675.00 | . 9NA | 1 | 1 | 56 | 5 | 4.4 | 3 | 4.40 | . 10 2 | 1 | 2 | 37 | 3 | 4.9 | 3 | 4.90 | . 11 5 | 2 | NA | 29 | 2 | 2.3 | 5 | 2.30 | . 12 3 | 1 | 3 | 35 | 2 | 4.2 | 3 | 4.20 | . 13 1 | 1 | 1 | 56 | 5 | 6.7 | 2 | 6.70 | . 14 2 | 2 | 3 | 20 | 1 | 4.3 | 2 | 4.30 | . 15NA | 1 | 2 | 63 | NA | 257.8 | 2 | 257.80 | . 16 1 | 1 | 1 | 49 | 4 | 5.7 | 2 | 5.70 | . 17 3 | 1 | 2 | 49 | 4 | 4.6 | 1 | 4.60 | . 18 2 | 1 | 3 | 49 | 4 | 5.1 | 2 | 5.10 | . 19 1 | 2 | 2 | 25 | 1 | 2.1 | 2 | 2.10 | . 20 1 | 1 | 1 | 57 | 5 | 5.1 | 2 | 5.10 | . 21 1 | 1 | NA | 56 | 5 | 6.2 | 2 | 6.20 | . 22 1 | 1 | 3 | 21 | 1 | 5.1 | 2 | 5.10 | . 23 2 | 1 | 1 | 69 | 5 | 4.1 | 1 | 4.10 | . 24 1 | 1 | 2 | 63 | 5 | 4.1 | 2 | 4.10 | . 25 1 | 1 | 1 | 30 | 2 | -75.0 | 2 | -75.00 | . 26 2 | 2 | 3 | 34 | 2 | 2.3 | 3 | 2.30 | . 27 1 | 1 | 1 | 26 | 2 | 5.0 | 3 | 5.00 | . 28 1 | 1 | 1 | 59 | NA | NA | 4 | 8.75 | . 29 2 | 1 | 2 | 38 | 3 | 5.2 | 3 | 5.20 | . 30 1 | 2 | 1 | 57 | 5 | 4.7 | 3 | 4.70 | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 268 1 | 2 | 1 | 21 | 1 | 5.0 | 3 | 5.00 | . 269 5 | 1 | 2 | 64 | 5 | 6.0 | 4 | 6.00 | . 270 1 | 2 | NA | 27 | 2 | 6.2 | 2 | 6.20 | . 271 1 | 2 | 1 | 64 | NA | NA | 1 | 8.75 | . 272 5 | 1 | 3 | 54 | 5 | 6.4 | 2 | 6.40 | . 273 1 | 2 | 1 | NA | 1 | -235.8 | 3 | -235.80 | . 274 5 | 2 | 3 | 42 | 4 | NA | 3 | 8.75 | . 275 5 | 2 | 3 | 54 | 5 | 7.9 | 3 | 7.90 | . 276 1 | 1 | NA | 25 | NA | 6.4 | 4 | 6.40 | . 277 2 | 2 | 3 | 54 | 5 | 6.3 | 3 | 6.30 | . 278NA | 1 | 1 | 60 | 5 | 6.1 | 3 | 6.10 | . 279 5 | 1 | 3 | NA | 5 | NA | 4 | 8.75 | . 280 2 | 2 | 2 | 63 | 5 | 6.3 | 3 | 6.30 | . 281 1 | 2 | 3 | 43 | 4 | NA | 3 | 8.75 | . 282 4 | 2 | 3 | 21 | 1 | 6.0 | 4 | 6.00 | . 283 2 | 2 | 3 | 23 | 1 | 6.9 | 2 | 6.90 | . 284 1 | 1 | 3 | 24 | 1 | NA | 2 | 8.75 | . 285 4 | 2 | 3 | 63 | 5 | 336.5 | 2 | 336.50 | . 286 2 | 1 | 2 | 41 | 4 | 6.2 | 1 | 6.20 | . 287 1 | 2 | 3 | 27 | 2 | 5.9 | 2 | 5.90 | . 288 1 | 1 | 3 | 47 | NA | NA | 2 | 8.75 | . 289 1 | 2 | 2 | 48 | 4 | 6.9 | 4 | 6.90 | . 290 1 | 2 | 3 | 22 | 1 | NA | 3 | 8.75 | . 291 5 | 2 | 1 | 48 | 4 | 7.7 | 3 | 7.70 | . 292 1 | 2 | 3 | 21 | 1 | 6.3 | 3 | 6.30 | . 294 1 | 2 | 2 | 43 | 4 | 4.5 | 2 | 4.50 | . 295 2 | 1 | 1 | 20 | 1 | 3.5 | 5 | 3.50 | . 297 3 | 1 | 3 | 24 | 1 | 6.1 | 2 | 6.10 | . 298 4 | 1 | 3 | 59 | 5 | 5.5 | 2 | 5.50 | . 300 1 | 1 | 3 | 27 | 2 | 4.4 | 2 | 4.40 | . length(dataset$gender) . 297 원래는 300개였는데 297개로 3개 줄어듦을 확인할 수 있다. | . pie(table(dataset$gender),col=c(&#39;red&#39;,&#39;blue&#39;)) . 연속형 변수의 극단치 처리 연소득이나 구매금액 등 연속된 데이터를 갖는 변수들을 대상으로 극단치를 확인하고 이를 토대로 데이터를 정제해보자 | . | . dataset = read.csv(&#39;dataset.csv&#39;, header=T) length(dataset$price) # NA를 포함하여 300개의 데이터가 있다. plot(dataset$price) # 산점도를 이용하여 가격 분포 보기 summary(dataset$price) # -457~675까지 분포되어 있음 . 300 Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s -457.200 4.425 5.400 8.752 6.300 675.000 30 . price 변수의 데이터 정제와 시각화 | . dataset2 = subset(dataset,price&gt;=2 &amp; price&lt;=8) length(dataset2$price) . 251 stem(dataset2$price) . The decimal point is at the | 2 | 133 2 | 3 | 0000003344 3 | 55555888999 4 | 000000000000000111111111222333334444 4 | 566666777777889999 5 | 00000000000000000011111111111222222222333333344444 5 | 55555555566667777778888899 6 | 00000000000000111111112222222222222333333333333333344444444444 6 | 55557777777788889999 7 | 000111122 7 | 777799 . age 변수의 데이터 정제와 시각화 | . summary(dataset2$age) . Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s 20.0 28.5 43.0 42.6 54.5 69.0 16 . length(dataset2$age) . 251 dataset2 = subset(dataset2, age&gt;=20 &amp; age&lt;=69) length(dataset2$age) . 235 극단치를 찾기 어려운 경우 범주형 변수를 일정한 범주를 가지고 있기 때문에 극단치를 찾는 데 큰 어려움이 없다. 하지만 구매 가격과 같은 연속 변수는 극단치를 찾기 어려울 수 있따. 실제 VIP 고객은 일반 고객과 비교하여 평균 구매금액이 월등히 많은 경우를 종종 볼 수 있따. 이런 경우 값의 범위에서 상하위 0.3 %를 극단치로 보여주는 boxplot와 통계를 이용해 볼 수 있다. | . | . boxplot(dataset$price) . 극단치 통계 확인 | . boxplot(dataset$price)$stats . A matrix: 5 × 1 of type dbl 2.1 | . 4.4 | . 5.4 | . 6.3 | . 7.9 | . 이를 통해 극단치를 제거한 서브 셋을 만들자 | . dataset_sub = subset(dataset,price&gt;=2.1&amp;price&lt;=7.9) . summary(dataset_sub$price) . Min. 1st Qu. Median Mean 3rd Qu. Max. 2.100 4.600 5.400 5.361 6.200 7.900 . . 코딩 변경 최초 코딩 내용을 용도에 맞게 변경하는 작업을 의미.데이터 가독성과 척도 변경 그리고 역 코딩 등의 목적으로 수행. | . | . 1) 가독성을 위한 코딩 변경 일반적으로 데이터는 디지털화하기 위해서 숫자로 코딩한다. 예를 들면 거주지 관련 칼럼에서 서울은 1, 인천은 2로 코딩한다. 이런 코딩 결과를 대상으로 기술통계분석을 수행하면 1과 2의 숫자를 실제 거주지명으로 표현해야 한다. 실습해보자 | . | . | . head(dataset2) . A data.frame: 6 × 7 residentgenderjobagepositionpricesurvey . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt; . 1 1 | 1 | 1 | 26 | 2 | 5.1 | 1 | . 2 2 | 1 | 2 | 54 | 5 | 4.2 | 2 | . 3NA | 1 | 2 | 41 | 4 | 4.7 | 4 | . 4 4 | 2 | NA | 45 | 4 | 3.5 | 2 | . 5 5 | 1 | 3 | 62 | 5 | 5.0 | 1 | . 6 3 | 1 | 2 | 57 | NA | 5.4 | 2 | . resident 칼럼을 보면 실제 거주지명이 아닌 1,2,3,4,5로 표현되어 있음을 알 수 있다. | dataset2의 resident 칼럼으로 조건식을 지정하여 거주지역별로 실제 거주지명을 resident2 칼럼에 추가한다. | . dataset2$resident2[dataset2$resident == 1] = &#39;1.서울특별시&#39; dataset2$resident2[dataset2$resident == 2] = &#39;2.인천광역시&#39; dataset2$resident2[dataset2$resident == 3] = &#39;3.대전광역시&#39; dataset2$resident2[dataset2$resident == 4] = &#39;4.대구광역시&#39; dataset2$resident2[dataset2$resident == 5] = &#39;5.시구군&#39; . 코딩 변경 전과 변경 후의 칼럼을 살펴보자 | . head(dataset2[c(&#39;resident&#39;,&#39;resident2&#39;)]) . A data.frame: 6 × 2 residentresident2 . &lt;int&gt;&lt;chr&gt; . 1 1 | 1.서울특별시 | . 2 2 | 2.인천광역시 | . 3NA | NA | . 4 4 | 4.대구광역시 | . 5 5 | 5.시구군 | . 6 3 | 3.대전광역시 | . 동일한 원리를 통해 job칼럼에도 코딩변경을 수행하여 가독성을 향상시켜줄 수 있다. | . . 척도 변경을 위한 코딩 변경 | . dataset2$age2[dataset2$age&lt;=30] = &#39;청년층&#39; . dataset2$age2 dataset2[&#39;age2&#39;] . &lt;ol class=list-inline&gt;&#39;청년층&#39; | NA | NA | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | &#39;청년층&#39; | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | &#39;청년층&#39; | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | NA | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | &#39;청년층&#39; | &#39;청년층&#39; | NA | NA | &#39;청년층&#39; | &lt;/ol&gt; A data.frame: 235 × 1 age2 . &lt;chr&gt; . 1청년층 | . 2NA | . 3NA | . 4NA | . 5NA | . 6NA | . 7NA | . 9NA | . 10NA | . 11청년층 | . 12NA | . 13NA | . 14청년층 | . 16NA | . 17NA | . 18NA | . 19청년층 | . 20NA | . 21NA | . 22청년층 | . 23NA | . 24NA | . 26NA | . 27청년층 | . 29NA | . 30NA | . 32NA | . 33NA | . 35NA | . 36청년층 | . ⋮⋮ | . 262NA | . 263청년층 | . 264청년층 | . 265NA | . 266청년층 | . 267NA | . 268청년층 | . 269NA | . 270청년층 | . 272NA | . 275NA | . 276청년층 | . 277NA | . 278NA | . 280NA | . 282청년층 | . 283청년층 | . 286NA | . 287청년층 | . 289NA | . 291NA | . 292청년층 | . 293NA | . 294NA | . 295청년층 | . 296청년층 | . 297청년층 | . 298NA | . 299NA | . 300청년층 | . 역 코딩을 위한 코딩 변경 만족도 평가를 위해서 설문지 문항을 5점 척도인 매우만족, 만족, 보통, 불만족, 매우 불만족 형태로 작성된 경우 순서대로 코딩하면 매우 만족이 1 그리고 매우 불만족이 5로 코딩된다. 이러한 만족도 평가를 점수화하기 위해서는 매우 만족과 매우 불만족이 역순으로 변경되어야 하는데 이러한 작업을 역코딩이라고 한다. | . | . head(dataset2[&#39;survey&#39;]) . A data.frame: 6 × 1 survey . &lt;int&gt; . 11 | . 22 | . 34 | . 42 | . 51 | . 62 | . 예를 들면 만족도(survey) 칼럼을 대상으로 1~5 순서로 코딩된 값을 5~1 순서로 역코딩하기 위해서는 6-현재값 형식으로 수식을 적용하면 된다. | . survey = dataset2$survey dataset2$survey2 = 6 - survey . dataset2[&#39;survey2&#39;] . A data.frame: 235 × 1 survey2 . &lt;dbl&gt; . 15 | . 24 | . 32 | . 44 | . 55 | . 64 | . 72 | . 93 | . 103 | . 111 | . 123 | . 134 | . 144 | . 164 | . 175 | . 184 | . 194 | . 204 | . 214 | . 224 | . 235 | . 244 | . 263 | . 273 | . 293 | . 303 | . 323 | . 334 | . 354 | . 365 | . ⋮⋮ | . 2623 | . 2633 | . 2643 | . 2653 | . 2663 | . 2672 | . 2683 | . 2692 | . 2704 | . 2724 | . 2753 | . 2762 | . 2773 | . 2783 | . 2803 | . 2822 | . 2834 | . 2865 | . 2874 | . 2892 | . 2913 | . 2923 | . 2933 | . 2944 | . 2951 | . 2964 | . 2974 | . 2984 | . 2994 | . 3004 | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/15/r.html",
            "relUrl": "/2022/02/15/r.html",
            "date": " • Feb 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "데이터 전처리",
            "content": "칼럼으로 데이터 정렬 | . library(hflights) library(dplyr) # 데이터를 년, 월, 출발시간, 도착시간 기준으로 오름차순 정렬 arrange(hflights,Year,Month,DepTime,ArrTime) # 정렬의 우선순위는 가장 왼쪽의 칼럼부터 시작하여 오른쪽 칼럼 순으로 정렬된다. . A data.frame: 227496 × 21 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯ArrDelayDepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDiverted . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt; . 2011 | 1 | 1 | 6 | 1 | 621 | CO | 1542 | N76254 | 260 | ⋯ | 24 | 2 | IAH | SJU | 2007 | 10 | 16 | 0 | | 0 | . 2011 | 1 | 21 | 5 | 4 | 46 | XE | 2956 | N13997 | 42 | ⋯ | 60 | 64 | IAH | AUS | 140 | 4 | 7 | 0 | | 0 | . 2011 | 1 | 4 | 2 | 5 | 59 | OO | 1118 | N745SK | 54 | ⋯ | 171 | 180 | IAH | DFW | 224 | 3 | 12 | 0 | | 0 | . 2011 | 1 | 27 | 4 | 11 | 216 | CO | 209 | N17730 | 245 | ⋯ | 137 | 168 | IAH | PDX | 1825 | 3 | 8 | 0 | | 0 | . 2011 | 1 | 27 | 4 | 17 | 240 | XE | 2771 | N11565 | 143 | ⋯ | 202 | 185 | IAH | OMA | 781 | 5 | 16 | 0 | | 0 | . 2011 | 1 | 9 | 7 | 22 | 117 | WN | 55 | N506SW | 55 | ⋯ | 167 | 172 | HOU | HRL | 276 | 2 | 7 | 0 | | 0 | . 2011 | 1 | 28 | 5 | 226 | 310 | XE | 2956 | N11535 | 44 | ⋯ | 204 | 206 | IAH | AUS | 140 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 18 | 2 | 537 | 829 | DL | 1248 | N302NB | 112 | ⋯ | -18 | -8 | IAH | ATL | 689 | 18 | 9 | 0 | | 0 | . 2011 | 1 | 25 | 2 | 538 | 824 | DL | 1248 | N355NB | 106 | ⋯ | -23 | -7 | IAH | ATL | 689 | 10 | 14 | 0 | | 0 | . 2011 | 1 | 7 | 5 | 538 | 832 | DL | 1248 | N337NB | 114 | ⋯ | -15 | -7 | IAH | ATL | 689 | 16 | 10 | 0 | | 0 | . 2011 | 1 | 19 | 3 | 538 | 844 | DL | 1248 | N370NB | 126 | ⋯ | -3 | -7 | IAH | ATL | 689 | 11 | 16 | 0 | | 0 | . 2011 | 1 | 27 | 4 | 540 | 824 | DL | 1248 | N320NB | 104 | ⋯ | -23 | -5 | IAH | ATL | 689 | 7 | 10 | 0 | | 0 | . 2011 | 1 | 20 | 4 | 540 | 828 | DL | 1248 | N316NB | 108 | ⋯ | -19 | -5 | IAH | ATL | 689 | 18 | 9 | 0 | | 0 | . 2011 | 1 | 14 | 5 | 540 | 846 | DL | 1248 | N324NB | 126 | ⋯ | -1 | -5 | IAH | ATL | 689 | 14 | 19 | 0 | | 0 | . 2011 | 1 | 22 | 6 | 540 | 850 | DL | 1248 | N315NB | 130 | ⋯ | 3 | -5 | IAH | ATL | 689 | 11 | 38 | 0 | | 0 | . 2011 | 1 | 26 | 3 | 540 | 851 | DL | 1248 | N321NB | 131 | ⋯ | 4 | -5 | IAH | ATL | 689 | 21 | 20 | 0 | | 0 | . 2011 | 1 | 13 | 4 | 541 | 817 | DL | 1248 | N360NB | 96 | ⋯ | -30 | -4 | IAH | ATL | 689 | 5 | 9 | 0 | | 0 | . 2011 | 1 | 9 | 7 | 541 | 823 | DL | 1248 | N338NB | 102 | ⋯ | -24 | -4 | IAH | ATL | 689 | 8 | 12 | 0 | | 0 | . 2011 | 1 | 24 | 1 | 541 | 824 | DL | 1248 | N322NB | 103 | ⋯ | -23 | -4 | IAH | ATL | 689 | 14 | 10 | 0 | | 0 | . 2011 | 1 | 12 | 3 | 541 | 827 | DL | 1248 | N338NB | 106 | ⋯ | -20 | -4 | IAH | ATL | 689 | 10 | 10 | 0 | | 0 | . 2011 | 1 | 29 | 6 | 541 | 831 | DL | 1248 | N320NB | 110 | ⋯ | -16 | -4 | IAH | ATL | 689 | 14 | 10 | 0 | | 0 | . 2011 | 1 | 23 | 7 | 542 | 823 | DL | 1248 | N348NB | 101 | ⋯ | -24 | -3 | IAH | ATL | 689 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 17 | 1 | 542 | 831 | DL | 1248 | N347NB | 109 | ⋯ | -16 | -3 | IAH | ATL | 689 | 7 | 10 | 0 | | 0 | . 2011 | 1 | 30 | 7 | 542 | 831 | DL | 1248 | N339NB | 109 | ⋯ | -16 | -3 | IAH | ATL | 689 | 15 | 10 | 0 | | 0 | . 2011 | 1 | 16 | 7 | 542 | 834 | DL | 1248 | N364NB | 112 | ⋯ | -13 | -3 | IAH | ATL | 689 | 15 | 9 | 0 | | 0 | . 2011 | 1 | 8 | 6 | 542 | 843 | DL | 1248 | N341NB | 121 | ⋯ | -4 | -3 | IAH | ATL | 689 | 25 | 10 | 0 | | 0 | . 2011 | 1 | 5 | 3 | 543 | 834 | DL | 1248 | N332NB | 111 | ⋯ | -13 | -2 | IAH | ATL | 689 | 13 | 9 | 0 | | 0 | . 2011 | 1 | 31 | 1 | 543 | 840 | DL | 1248 | N339NB | 117 | ⋯ | -7 | -2 | IAH | ATL | 689 | 13 | 9 | 0 | | 0 | . 2011 | 1 | 21 | 5 | 544 | 838 | DL | 1248 | N370NB | 114 | ⋯ | -9 | -1 | IAH | ATL | 689 | 12 | 13 | 0 | | 0 | . 2011 | 1 | 28 | 5 | 545 | 835 | DL | 1248 | N348NB | 110 | ⋯ | -12 | 0 | IAH | ATL | 689 | 10 | 12 | 0 | | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2011 | 12 | 31 | 6 | NA | NA | XE | 4698 | N13913 | NA | ⋯ | NA | NA | IAH | CHS | 925 | NA | NA | 1 | C | 0 | . 2011 | 12 | 31 | 6 | NA | NA | XE | 4702 | N21154 | NA | ⋯ | NA | NA | IAH | IAD | 1190 | NA | NA | 1 | B | 0 | . 2011 | 12 | 29 | 4 | NA | NA | XE | 4708 | N17560 | NA | ⋯ | NA | NA | IAH | CAE | 878 | NA | NA | 1 | B | 0 | . 2011 | 12 | 31 | 6 | NA | NA | XE | 4708 | N16963 | NA | ⋯ | NA | NA | IAH | CAE | 878 | NA | NA | 1 | B | 0 | . 2011 | 12 | 30 | 5 | NA | NA | XE | 4710 | N13550 | NA | ⋯ | NA | NA | IAH | CRP | 201 | NA | NA | 1 | B | 0 | . 2011 | 12 | 12 | 1 | NA | NA | OO | 5246 | N908SW | NA | ⋯ | NA | NA | IAH | MAF | 429 | NA | NA | 1 | A | 0 | . 2011 | 12 | 31 | 6 | NA | NA | OO | 5239 | N693BR | NA | ⋯ | NA | NA | IAH | DAL | 216 | NA | NA | 1 | A | 0 | . 2011 | 12 | 31 | 6 | NA | NA | OO | 5243 | N941SW | NA | ⋯ | NA | NA | IAH | ELP | 667 | NA | NA | 1 | C | 0 | . 2011 | 12 | 29 | 4 | NA | NA | OO | 5245 | N912SW | NA | ⋯ | NA | NA | IAH | MAF | 429 | NA | NA | 1 | A | 0 | . 2011 | 12 | 29 | 4 | NA | NA | OO | 5233 | N927SW | NA | ⋯ | NA | NA | IAH | CLT | 912 | NA | NA | 1 | B | 0 | . 2011 | 12 | 29 | 4 | NA | NA | OO | 5237 | N971SW | NA | ⋯ | NA | NA | IAH | DAL | 216 | NA | NA | 1 | A | 0 | . 2011 | 12 | 21 | 3 | NA | NA | OO | 5237 | N958SW | NA | ⋯ | NA | NA | IAH | DAL | 216 | NA | NA | 1 | A | 0 | . 2011 | 12 | 31 | 6 | NA | NA | OO | 5193 | N727SK | NA | ⋯ | NA | NA | IAH | OKC | 395 | NA | NA | 1 | B | 0 | . 2011 | 12 | 12 | 1 | NA | NA | OO | 5162 | N702SK | NA | ⋯ | NA | NA | IAH | OMA | 781 | NA | NA | 1 | A | 0 | . 2011 | 12 | 4 | 7 | NA | NA | OO | 5162 | N768SK | NA | ⋯ | NA | NA | IAH | OMA | 781 | NA | NA | 1 | B | 0 | . 2011 | 12 | 31 | 6 | NA | NA | OO | 5173 | N793SK | NA | ⋯ | NA | NA | IAH | DFW | 224 | NA | NA | 1 | C | 0 | . 2011 | 12 | 12 | 1 | NA | NA | OO | 5176 | N794SK | NA | ⋯ | NA | NA | IAH | CMH | 986 | NA | NA | 1 | A | 0 | . 2011 | 12 | 1 | 4 | NA | NA | OO | 5218 | N770SK | NA | ⋯ | NA | NA | IAH | MCI | 643 | NA | NA | 1 | A | 0 | . 2011 | 12 | 27 | 2 | NA | NA | UA | 855 | | NA | ⋯ | NA | NA | IAH | SFO | 1635 | NA | NA | 1 | A | 0 | . 2011 | 12 | 9 | 5 | NA | NA | US | 1828 | | NA | ⋯ | NA | NA | IAH | PHL | 1325 | NA | NA | 1 | A | 0 | . 2011 | 12 | 27 | 2 | NA | NA | US | 1170 | | NA | ⋯ | NA | NA | IAH | CLT | 912 | NA | NA | 1 | A | 0 | . 2011 | 12 | 30 | 5 | NA | NA | US | 403 | | NA | ⋯ | NA | NA | IAH | PHX | 1009 | NA | NA | 1 | A | 0 | . 2011 | 12 | 1 | 4 | NA | NA | WN | 9 | N230WN | NA | ⋯ | NA | NA | HOU | HRL | 277 | NA | NA | 1 | A | 0 | . 2011 | 12 | 2 | 5 | NA | NA | WN | 6 | N946WN | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 2011 | 12 | 2 | 5 | NA | NA | WN | 16 | N281WN | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 2011 | 12 | 2 | 5 | NA | NA | WN | 1167 | N510SW | NA | ⋯ | NA | NA | HOU | OAK | 1642 | NA | NA | 1 | A | 0 | . 2011 | 12 | 3 | 6 | NA | NA | WN | 1491 | N348SW | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 2011 | 12 | 4 | 7 | NA | NA | WN | 2387 | N928WN | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 2011 | 12 | 5 | 1 | NA | NA | WN | 38 | N604SW | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 2011 | 12 | 6 | 2 | NA | NA | WN | 16 | N362SW | NA | ⋯ | NA | NA | HOU | DAL | 239 | NA | NA | 1 | A | 0 | . 칼럼으로 데이터 검색 대용량의 데이터 셋의 특정 칼럼을 기준으로 데이터를 검색할 수 있다. | 관계형 데이터 베이스에서 데이터 검색을 위한 select 문과 비슷한 기능을 수행하는 select() 함수에 대해서 알아본다. | . | . select(hflights,Year,Month,DepTime,ArrTime) . A data.frame: 227496 × 4 YearMonthDepTimeArrTime . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 54242011 | 1 | 1400 | 1500 | . 54252011 | 1 | 1401 | 1501 | . 54262011 | 1 | 1352 | 1502 | . 54272011 | 1 | 1403 | 1513 | . 54282011 | 1 | 1405 | 1507 | . 54292011 | 1 | 1359 | 1503 | . 54302011 | 1 | 1359 | 1509 | . 54312011 | 1 | 1355 | 1454 | . 54322011 | 1 | 1443 | 1554 | . 54332011 | 1 | 1443 | 1553 | . 54342011 | 1 | 1429 | 1539 | . 54352011 | 1 | 1419 | 1515 | . 54362011 | 1 | 1358 | 1501 | . 54372011 | 1 | 1357 | 1504 | . 54382011 | 1 | 1359 | 1459 | . 54392011 | 1 | 1359 | 1509 | . 54402011 | 1 | 1530 | 1634 | . 54412011 | 1 | 1408 | 1508 | . 54422011 | 1 | 1356 | 1503 | . 54432011 | 1 | 1507 | 1622 | . 54442011 | 1 | 1357 | 1459 | . 54452011 | 1 | 1355 | 1456 | . 54462011 | 1 | 1356 | 1501 | . 54472011 | 1 | 1356 | 1513 | . 54482011 | 1 | 1352 | 1452 | . 54492011 | 1 | 1353 | 1455 | . 54502011 | 1 | 1356 | 1458 | . 54512011 | 1 | 1359 | 1505 | . 54522011 | 1 | 1355 | 1455 | . 54532011 | 1 | 1359 | 1456 | . ⋮⋮ | ⋮ | ⋮ | ⋮ | . 60832302011 | 12 | 752 | 857 | . 60832312011 | 12 | 651 | 746 | . 60832322011 | 12 | 1728 | 1932 | . 60832332011 | 12 | 1115 | 1315 | . 60832342011 | 12 | 1753 | 1911 | . 60832352011 | 12 | 1222 | 1335 | . 60832362011 | 12 | 836 | 946 | . 60832372011 | 12 | 1352 | 1749 | . 60832382011 | 12 | 1850 | 2046 | . 60832392011 | 12 | 707 | 903 | . 60832402011 | 12 | 1335 | 1528 | . 60832412011 | 12 | 1005 | 1158 | . 60832422011 | 12 | 1723 | 1845 | . 60832432011 | 12 | 1139 | 1304 | . 60832442011 | 12 | 2023 | 2109 | . 60832452011 | 12 | 1542 | 1637 | . 60832462011 | 12 | 1728 | 1825 | . 60832472011 | 12 | 1252 | 1349 | . 60832482011 | 12 | 857 | 955 | . 60832492011 | 12 | 1939 | 2119 | . 60832502011 | 12 | 556 | 745 | . 60832512011 | 12 | 1026 | 1208 | . 60832522011 | 12 | 1611 | 1746 | . 60832532011 | 12 | 758 | 1051 | . 60832542011 | 12 | 1307 | 1600 | . 60832552011 | 12 | 1818 | 2111 | . 60832562011 | 12 | 2047 | 2334 | . 60832572011 | 12 | 912 | 1031 | . 60832582011 | 12 | 656 | 812 | . 60832592011 | 12 | 1600 | 1713 | . select(hflights,Year:ArrTime) # 만약 특정 칼럼 또는 칼럼의 범위를 검색에서 제외하려는 경우 제외하려는 칼럼 이름 또는 범위 앞에 -속성을 지정한다. . A data.frame: 227496 × 6 YearMonthDayofMonthDayOfWeekDepTimeArrTime . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 54242011 | 1 | 1 | 6 | 1400 | 1500 | . 54252011 | 1 | 2 | 7 | 1401 | 1501 | . 54262011 | 1 | 3 | 1 | 1352 | 1502 | . 54272011 | 1 | 4 | 2 | 1403 | 1513 | . 54282011 | 1 | 5 | 3 | 1405 | 1507 | . 54292011 | 1 | 6 | 4 | 1359 | 1503 | . 54302011 | 1 | 7 | 5 | 1359 | 1509 | . 54312011 | 1 | 8 | 6 | 1355 | 1454 | . 54322011 | 1 | 9 | 7 | 1443 | 1554 | . 54332011 | 1 | 10 | 1 | 1443 | 1553 | . 54342011 | 1 | 11 | 2 | 1429 | 1539 | . 54352011 | 1 | 12 | 3 | 1419 | 1515 | . 54362011 | 1 | 13 | 4 | 1358 | 1501 | . 54372011 | 1 | 14 | 5 | 1357 | 1504 | . 54382011 | 1 | 15 | 6 | 1359 | 1459 | . 54392011 | 1 | 16 | 7 | 1359 | 1509 | . 54402011 | 1 | 17 | 1 | 1530 | 1634 | . 54412011 | 1 | 18 | 2 | 1408 | 1508 | . 54422011 | 1 | 19 | 3 | 1356 | 1503 | . 54432011 | 1 | 20 | 4 | 1507 | 1622 | . 54442011 | 1 | 21 | 5 | 1357 | 1459 | . 54452011 | 1 | 22 | 6 | 1355 | 1456 | . 54462011 | 1 | 23 | 7 | 1356 | 1501 | . 54472011 | 1 | 24 | 1 | 1356 | 1513 | . 54482011 | 1 | 25 | 2 | 1352 | 1452 | . 54492011 | 1 | 26 | 3 | 1353 | 1455 | . 54502011 | 1 | 27 | 4 | 1356 | 1458 | . 54512011 | 1 | 28 | 5 | 1359 | 1505 | . 54522011 | 1 | 29 | 6 | 1355 | 1455 | . 54532011 | 1 | 30 | 7 | 1359 | 1456 | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 60832302011 | 12 | 6 | 2 | 752 | 857 | . 60832312011 | 12 | 6 | 2 | 651 | 746 | . 60832322011 | 12 | 6 | 2 | 1728 | 1932 | . 60832332011 | 12 | 6 | 2 | 1115 | 1315 | . 60832342011 | 12 | 6 | 2 | 1753 | 1911 | . 60832352011 | 12 | 6 | 2 | 1222 | 1335 | . 60832362011 | 12 | 6 | 2 | 836 | 946 | . 60832372011 | 12 | 6 | 2 | 1352 | 1749 | . 60832382011 | 12 | 6 | 2 | 1850 | 2046 | . 60832392011 | 12 | 6 | 2 | 707 | 903 | . 60832402011 | 12 | 6 | 2 | 1335 | 1528 | . 60832412011 | 12 | 6 | 2 | 1005 | 1158 | . 60832422011 | 12 | 6 | 2 | 1723 | 1845 | . 60832432011 | 12 | 6 | 2 | 1139 | 1304 | . 60832442011 | 12 | 6 | 2 | 2023 | 2109 | . 60832452011 | 12 | 6 | 2 | 1542 | 1637 | . 60832462011 | 12 | 6 | 2 | 1728 | 1825 | . 60832472011 | 12 | 6 | 2 | 1252 | 1349 | . 60832482011 | 12 | 6 | 2 | 857 | 955 | . 60832492011 | 12 | 6 | 2 | 1939 | 2119 | . 60832502011 | 12 | 6 | 2 | 556 | 745 | . 60832512011 | 12 | 6 | 2 | 1026 | 1208 | . 60832522011 | 12 | 6 | 2 | 1611 | 1746 | . 60832532011 | 12 | 6 | 2 | 758 | 1051 | . 60832542011 | 12 | 6 | 2 | 1307 | 1600 | . 60832552011 | 12 | 6 | 2 | 1818 | 2111 | . 60832562011 | 12 | 6 | 2 | 2047 | 2334 | . 60832572011 | 12 | 6 | 2 | 912 | 1031 | . 60832582011 | 12 | 6 | 2 | 656 | 812 | . 60832592011 | 12 | 6 | 2 | 1600 | 1713 | . 데이터 셋에 칼럼 추가 대용량의 데이터 셋을 대상으로 특정 칼럼을 추가하는 함수에 대해서 알아보자 | . | . mutate(hflights,gain=ArrDelay-DepDelay) # gain이라는 칼럼명을 추가해줄 것이고 수식은 ArrDelay-DepDelay와 같다. . A data.frame: 227496 × 22 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯DepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDivertedgain . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt; . 54242011 | 1 | 1 | 6 | 1400 | 1500 | AA | 428 | N576AA | 60 | ⋯ | 0 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | -10 | . 54252011 | 1 | 2 | 7 | 1401 | 1501 | AA | 428 | N557AA | 60 | ⋯ | 1 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | -10 | . 54262011 | 1 | 3 | 1 | 1352 | 1502 | AA | 428 | N541AA | 70 | ⋯ | -8 | IAH | DFW | 224 | 5 | 17 | 0 | | 0 | 0 | . 54272011 | 1 | 4 | 2 | 1403 | 1513 | AA | 428 | N403AA | 70 | ⋯ | 3 | IAH | DFW | 224 | 9 | 22 | 0 | | 0 | 0 | . 54282011 | 1 | 5 | 3 | 1405 | 1507 | AA | 428 | N492AA | 62 | ⋯ | 5 | IAH | DFW | 224 | 9 | 9 | 0 | | 0 | -8 | . 54292011 | 1 | 6 | 4 | 1359 | 1503 | AA | 428 | N262AA | 64 | ⋯ | -1 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | -6 | . 54302011 | 1 | 7 | 5 | 1359 | 1509 | AA | 428 | N493AA | 70 | ⋯ | -1 | IAH | DFW | 224 | 12 | 15 | 0 | | 0 | 0 | . 54312011 | 1 | 8 | 6 | 1355 | 1454 | AA | 428 | N477AA | 59 | ⋯ | -5 | IAH | DFW | 224 | 7 | 12 | 0 | | 0 | -11 | . 54322011 | 1 | 9 | 7 | 1443 | 1554 | AA | 428 | N476AA | 71 | ⋯ | 43 | IAH | DFW | 224 | 8 | 22 | 0 | | 0 | 1 | . 54332011 | 1 | 10 | 1 | 1443 | 1553 | AA | 428 | N504AA | 70 | ⋯ | 43 | IAH | DFW | 224 | 6 | 19 | 0 | | 0 | 0 | . 54342011 | 1 | 11 | 2 | 1429 | 1539 | AA | 428 | N565AA | 70 | ⋯ | 29 | IAH | DFW | 224 | 8 | 20 | 0 | | 0 | 0 | . 54352011 | 1 | 12 | 3 | 1419 | 1515 | AA | 428 | N577AA | 56 | ⋯ | 19 | IAH | DFW | 224 | 4 | 11 | 0 | | 0 | -14 | . 54362011 | 1 | 13 | 4 | 1358 | 1501 | AA | 428 | N476AA | 63 | ⋯ | -2 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | -7 | . 54372011 | 1 | 14 | 5 | 1357 | 1504 | AA | 428 | N552AA | 67 | ⋯ | -3 | IAH | DFW | 224 | 5 | 15 | 0 | | 0 | -3 | . 54382011 | 1 | 15 | 6 | 1359 | 1459 | AA | 428 | N462AA | 60 | ⋯ | -1 | IAH | DFW | 224 | 6 | 10 | 0 | | 0 | -10 | . 54392011 | 1 | 16 | 7 | 1359 | 1509 | AA | 428 | N555AA | 70 | ⋯ | -1 | IAH | DFW | 224 | 12 | 17 | 0 | | 0 | 0 | . 54402011 | 1 | 17 | 1 | 1530 | 1634 | AA | 428 | N518AA | 64 | ⋯ | 90 | IAH | DFW | 224 | 8 | 8 | 0 | | 0 | -6 | . 54412011 | 1 | 18 | 2 | 1408 | 1508 | AA | 428 | N507AA | 60 | ⋯ | 8 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | -10 | . 54422011 | 1 | 19 | 3 | 1356 | 1503 | AA | 428 | N523AA | 67 | ⋯ | -4 | IAH | DFW | 224 | 10 | 11 | 0 | | 0 | -3 | . 54432011 | 1 | 20 | 4 | 1507 | 1622 | AA | 428 | N425AA | 75 | ⋯ | 67 | IAH | DFW | 224 | 9 | 24 | 0 | | 0 | 5 | . 54442011 | 1 | 21 | 5 | 1357 | 1459 | AA | 428 | N251AA | 62 | ⋯ | -3 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | -8 | . 54452011 | 1 | 22 | 6 | 1355 | 1456 | AA | 428 | N551AA | 61 | ⋯ | -5 | IAH | DFW | 224 | 9 | 8 | 0 | | 0 | -9 | . 54462011 | 1 | 23 | 7 | 1356 | 1501 | AA | 428 | N479AA | 65 | ⋯ | -4 | IAH | DFW | 224 | 7 | 18 | 0 | | 0 | -5 | . 54472011 | 1 | 24 | 1 | 1356 | 1513 | AA | 428 | N531AA | 77 | ⋯ | -4 | IAH | DFW | 224 | 6 | 28 | 0 | | 0 | 7 | . 54482011 | 1 | 25 | 2 | 1352 | 1452 | AA | 428 | N561AA | 60 | ⋯ | -8 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | -10 | . 54492011 | 1 | 26 | 3 | 1353 | 1455 | AA | 428 | N541AA | 62 | ⋯ | -7 | IAH | DFW | 224 | 8 | 14 | 0 | | 0 | -8 | . 54502011 | 1 | 27 | 4 | 1356 | 1458 | AA | 428 | N512AA | 62 | ⋯ | -4 | IAH | DFW | 224 | 12 | 10 | 0 | | 0 | -8 | . 54512011 | 1 | 28 | 5 | 1359 | 1505 | AA | 428 | N4UBAA | 66 | ⋯ | -1 | IAH | DFW | 224 | 8 | 12 | 0 | | 0 | -4 | . 54522011 | 1 | 29 | 6 | 1355 | 1455 | AA | 428 | N491AA | 60 | ⋯ | -5 | IAH | DFW | 224 | 7 | 7 | 0 | | 0 | -10 | . 54532011 | 1 | 30 | 7 | 1359 | 1456 | AA | 428 | N561AA | 57 | ⋯ | -1 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | -13 | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 60832302011 | 12 | 6 | 2 | 752 | 857 | WN | 1628 | N435WN | 65 | ⋯ | -3 | HOU | MSY | 302 | 4 | 11 | 0 | | 0 | 5 | . 60832312011 | 12 | 6 | 2 | 651 | 746 | WN | 2534 | N232WN | 55 | ⋯ | -4 | HOU | MSY | 302 | 5 | 7 | 0 | | 0 | -5 | . 60832322011 | 12 | 6 | 2 | 1728 | 1932 | WN | 902 | N724SW | 244 | ⋯ | 23 | HOU | OAK | 1642 | 5 | 8 | 0 | | 0 | -16 | . 60832332011 | 12 | 6 | 2 | 1115 | 1315 | WN | 1167 | N455WN | 240 | ⋯ | 5 | HOU | OAK | 1642 | 6 | 9 | 0 | | 0 | -20 | . 60832342011 | 12 | 6 | 2 | 1753 | 1911 | WN | 513 | N362SW | 78 | ⋯ | 33 | HOU | OKC | 419 | 4 | 15 | 0 | | 0 | -2 | . 60832352011 | 12 | 6 | 2 | 1222 | 1335 | WN | 581 | N646SW | 73 | ⋯ | -3 | HOU | OKC | 419 | 3 | 9 | 0 | | 0 | -7 | . 60832362011 | 12 | 6 | 2 | 836 | 946 | WN | 1223 | N394SW | 70 | ⋯ | 1 | HOU | OKC | 419 | 4 | 8 | 0 | | 0 | -10 | . 60832372011 | 12 | 6 | 2 | 1352 | 1749 | WN | 3085 | N510SW | 177 | ⋯ | 72 | HOU | PHL | 1336 | 5 | 9 | 0 | | 0 | -13 | . 60832382011 | 12 | 6 | 2 | 1850 | 2046 | WN | 39 | N754SW | 176 | ⋯ | 70 | HOU | PHX | 1020 | 4 | 15 | 0 | | 0 | 1 | . 60832392011 | 12 | 6 | 2 | 707 | 903 | WN | 424 | N769SW | 176 | ⋯ | -3 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | 1 | . 60832402011 | 12 | 6 | 2 | 1335 | 1528 | WN | 1098 | N448WN | 173 | ⋯ | 20 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | -2 | . 60832412011 | 12 | 6 | 2 | 1005 | 1158 | WN | 1403 | N430WN | 173 | ⋯ | 15 | HOU | PHX | 1020 | 3 | 7 | 0 | | 0 | -2 | . 60832422011 | 12 | 6 | 2 | 1723 | 1845 | WN | 33 | N698SW | 202 | ⋯ | 78 | HOU | SAN | 1313 | 3 | 7 | 0 | | 0 | -8 | . 60832432011 | 12 | 6 | 2 | 1139 | 1304 | WN | 1212 | N226WN | 205 | ⋯ | -1 | HOU | SAN | 1313 | 2 | 10 | 0 | | 0 | -5 | . 60832442011 | 12 | 6 | 2 | 2023 | 2109 | WN | 207 | N354SW | 46 | ⋯ | 43 | HOU | SAT | 192 | 4 | 4 | 0 | | 0 | -14 | . 60832452011 | 12 | 6 | 2 | 1542 | 1637 | WN | 405 | N617SW | 55 | ⋯ | 12 | HOU | SAT | 192 | 4 | 8 | 0 | | 0 | 0 | . 60832462011 | 12 | 6 | 2 | 1728 | 1825 | WN | 628 | N389SW | 57 | ⋯ | 3 | HOU | SAT | 192 | 4 | 14 | 0 | | 0 | 2 | . 60832472011 | 12 | 6 | 2 | 1252 | 1349 | WN | 994 | N713SW | 57 | ⋯ | 7 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | 2 | . 60832482011 | 12 | 6 | 2 | 857 | 955 | WN | 1231 | N284WN | 58 | ⋯ | -3 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | 3 | . 60832492011 | 12 | 6 | 2 | 1939 | 2119 | WN | 124 | N522SW | 100 | ⋯ | 39 | HOU | STL | 687 | 4 | 15 | 0 | | 0 | -25 | . 60832502011 | 12 | 6 | 2 | 556 | 745 | WN | 280 | N728SW | 109 | ⋯ | -4 | HOU | STL | 687 | 13 | 9 | 0 | | 0 | -6 | . 60832512011 | 12 | 6 | 2 | 1026 | 1208 | WN | 782 | N476WN | 102 | ⋯ | 1 | HOU | STL | 687 | 4 | 12 | 0 | | 0 | -13 | . 60832522011 | 12 | 6 | 2 | 1611 | 1746 | WN | 1050 | N655WN | 95 | ⋯ | 16 | HOU | STL | 687 | 3 | 9 | 0 | | 0 | -25 | . 60832532011 | 12 | 6 | 2 | 758 | 1051 | WN | 201 | N903WN | 113 | ⋯ | -2 | HOU | TPA | 781 | 3 | 10 | 0 | | 0 | -2 | . 60832542011 | 12 | 6 | 2 | 1307 | 1600 | WN | 471 | N632SW | 113 | ⋯ | 7 | HOU | TPA | 781 | 5 | 10 | 0 | | 0 | -7 | . 60832552011 | 12 | 6 | 2 | 1818 | 2111 | WN | 1191 | N284WN | 113 | ⋯ | 8 | HOU | TPA | 781 | 5 | 11 | 0 | | 0 | -17 | . 60832562011 | 12 | 6 | 2 | 2047 | 2334 | WN | 1674 | N366SW | 107 | ⋯ | 7 | HOU | TPA | 781 | 4 | 9 | 0 | | 0 | -3 | . 60832572011 | 12 | 6 | 2 | 912 | 1031 | WN | 127 | N777QC | 79 | ⋯ | -3 | HOU | TUL | 453 | 4 | 14 | 0 | | 0 | -1 | . 60832582011 | 12 | 6 | 2 | 656 | 812 | WN | 621 | N727SW | 76 | ⋯ | -4 | HOU | TUL | 453 | 3 | 9 | 0 | | 0 | -9 | . 60832592011 | 12 | 6 | 2 | 1600 | 1713 | WN | 1597 | N745SW | 73 | ⋯ | 0 | HOU | TUL | 453 | 3 | 11 | 0 | | 0 | -12 | . hflights%&gt;%mutate(gain=ArrDelay-DayOfWeek) . A data.frame: 227496 × 22 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯DepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDivertedgain . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt; . 54242011 | 1 | 1 | 6 | 1400 | 1500 | AA | 428 | N576AA | 60 | ⋯ | 0 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | -16 | . 54252011 | 1 | 2 | 7 | 1401 | 1501 | AA | 428 | N557AA | 60 | ⋯ | 1 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | -16 | . 54262011 | 1 | 3 | 1 | 1352 | 1502 | AA | 428 | N541AA | 70 | ⋯ | -8 | IAH | DFW | 224 | 5 | 17 | 0 | | 0 | -9 | . 54272011 | 1 | 4 | 2 | 1403 | 1513 | AA | 428 | N403AA | 70 | ⋯ | 3 | IAH | DFW | 224 | 9 | 22 | 0 | | 0 | 1 | . 54282011 | 1 | 5 | 3 | 1405 | 1507 | AA | 428 | N492AA | 62 | ⋯ | 5 | IAH | DFW | 224 | 9 | 9 | 0 | | 0 | -6 | . 54292011 | 1 | 6 | 4 | 1359 | 1503 | AA | 428 | N262AA | 64 | ⋯ | -1 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | -11 | . 54302011 | 1 | 7 | 5 | 1359 | 1509 | AA | 428 | N493AA | 70 | ⋯ | -1 | IAH | DFW | 224 | 12 | 15 | 0 | | 0 | -6 | . 54312011 | 1 | 8 | 6 | 1355 | 1454 | AA | 428 | N477AA | 59 | ⋯ | -5 | IAH | DFW | 224 | 7 | 12 | 0 | | 0 | -22 | . 54322011 | 1 | 9 | 7 | 1443 | 1554 | AA | 428 | N476AA | 71 | ⋯ | 43 | IAH | DFW | 224 | 8 | 22 | 0 | | 0 | 37 | . 54332011 | 1 | 10 | 1 | 1443 | 1553 | AA | 428 | N504AA | 70 | ⋯ | 43 | IAH | DFW | 224 | 6 | 19 | 0 | | 0 | 42 | . 54342011 | 1 | 11 | 2 | 1429 | 1539 | AA | 428 | N565AA | 70 | ⋯ | 29 | IAH | DFW | 224 | 8 | 20 | 0 | | 0 | 27 | . 54352011 | 1 | 12 | 3 | 1419 | 1515 | AA | 428 | N577AA | 56 | ⋯ | 19 | IAH | DFW | 224 | 4 | 11 | 0 | | 0 | 2 | . 54362011 | 1 | 13 | 4 | 1358 | 1501 | AA | 428 | N476AA | 63 | ⋯ | -2 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | -13 | . 54372011 | 1 | 14 | 5 | 1357 | 1504 | AA | 428 | N552AA | 67 | ⋯ | -3 | IAH | DFW | 224 | 5 | 15 | 0 | | 0 | -11 | . 54382011 | 1 | 15 | 6 | 1359 | 1459 | AA | 428 | N462AA | 60 | ⋯ | -1 | IAH | DFW | 224 | 6 | 10 | 0 | | 0 | -17 | . 54392011 | 1 | 16 | 7 | 1359 | 1509 | AA | 428 | N555AA | 70 | ⋯ | -1 | IAH | DFW | 224 | 12 | 17 | 0 | | 0 | -8 | . 54402011 | 1 | 17 | 1 | 1530 | 1634 | AA | 428 | N518AA | 64 | ⋯ | 90 | IAH | DFW | 224 | 8 | 8 | 0 | | 0 | 83 | . 54412011 | 1 | 18 | 2 | 1408 | 1508 | AA | 428 | N507AA | 60 | ⋯ | 8 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | -4 | . 54422011 | 1 | 19 | 3 | 1356 | 1503 | AA | 428 | N523AA | 67 | ⋯ | -4 | IAH | DFW | 224 | 10 | 11 | 0 | | 0 | -10 | . 54432011 | 1 | 20 | 4 | 1507 | 1622 | AA | 428 | N425AA | 75 | ⋯ | 67 | IAH | DFW | 224 | 9 | 24 | 0 | | 0 | 68 | . 54442011 | 1 | 21 | 5 | 1357 | 1459 | AA | 428 | N251AA | 62 | ⋯ | -3 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | -16 | . 54452011 | 1 | 22 | 6 | 1355 | 1456 | AA | 428 | N551AA | 61 | ⋯ | -5 | IAH | DFW | 224 | 9 | 8 | 0 | | 0 | -20 | . 54462011 | 1 | 23 | 7 | 1356 | 1501 | AA | 428 | N479AA | 65 | ⋯ | -4 | IAH | DFW | 224 | 7 | 18 | 0 | | 0 | -16 | . 54472011 | 1 | 24 | 1 | 1356 | 1513 | AA | 428 | N531AA | 77 | ⋯ | -4 | IAH | DFW | 224 | 6 | 28 | 0 | | 0 | 2 | . 54482011 | 1 | 25 | 2 | 1352 | 1452 | AA | 428 | N561AA | 60 | ⋯ | -8 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | -20 | . 54492011 | 1 | 26 | 3 | 1353 | 1455 | AA | 428 | N541AA | 62 | ⋯ | -7 | IAH | DFW | 224 | 8 | 14 | 0 | | 0 | -18 | . 54502011 | 1 | 27 | 4 | 1356 | 1458 | AA | 428 | N512AA | 62 | ⋯ | -4 | IAH | DFW | 224 | 12 | 10 | 0 | | 0 | -16 | . 54512011 | 1 | 28 | 5 | 1359 | 1505 | AA | 428 | N4UBAA | 66 | ⋯ | -1 | IAH | DFW | 224 | 8 | 12 | 0 | | 0 | -10 | . 54522011 | 1 | 29 | 6 | 1355 | 1455 | AA | 428 | N491AA | 60 | ⋯ | -5 | IAH | DFW | 224 | 7 | 7 | 0 | | 0 | -21 | . 54532011 | 1 | 30 | 7 | 1359 | 1456 | AA | 428 | N561AA | 57 | ⋯ | -1 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | -21 | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 60832302011 | 12 | 6 | 2 | 752 | 857 | WN | 1628 | N435WN | 65 | ⋯ | -3 | HOU | MSY | 302 | 4 | 11 | 0 | | 0 | 0 | . 60832312011 | 12 | 6 | 2 | 651 | 746 | WN | 2534 | N232WN | 55 | ⋯ | -4 | HOU | MSY | 302 | 5 | 7 | 0 | | 0 | -11 | . 60832322011 | 12 | 6 | 2 | 1728 | 1932 | WN | 902 | N724SW | 244 | ⋯ | 23 | HOU | OAK | 1642 | 5 | 8 | 0 | | 0 | 5 | . 60832332011 | 12 | 6 | 2 | 1115 | 1315 | WN | 1167 | N455WN | 240 | ⋯ | 5 | HOU | OAK | 1642 | 6 | 9 | 0 | | 0 | -17 | . 60832342011 | 12 | 6 | 2 | 1753 | 1911 | WN | 513 | N362SW | 78 | ⋯ | 33 | HOU | OKC | 419 | 4 | 15 | 0 | | 0 | 29 | . 60832352011 | 12 | 6 | 2 | 1222 | 1335 | WN | 581 | N646SW | 73 | ⋯ | -3 | HOU | OKC | 419 | 3 | 9 | 0 | | 0 | -12 | . 60832362011 | 12 | 6 | 2 | 836 | 946 | WN | 1223 | N394SW | 70 | ⋯ | 1 | HOU | OKC | 419 | 4 | 8 | 0 | | 0 | -11 | . 60832372011 | 12 | 6 | 2 | 1352 | 1749 | WN | 3085 | N510SW | 177 | ⋯ | 72 | HOU | PHL | 1336 | 5 | 9 | 0 | | 0 | 57 | . 60832382011 | 12 | 6 | 2 | 1850 | 2046 | WN | 39 | N754SW | 176 | ⋯ | 70 | HOU | PHX | 1020 | 4 | 15 | 0 | | 0 | 69 | . 60832392011 | 12 | 6 | 2 | 707 | 903 | WN | 424 | N769SW | 176 | ⋯ | -3 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | -4 | . 60832402011 | 12 | 6 | 2 | 1335 | 1528 | WN | 1098 | N448WN | 173 | ⋯ | 20 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | 16 | . 60832412011 | 12 | 6 | 2 | 1005 | 1158 | WN | 1403 | N430WN | 173 | ⋯ | 15 | HOU | PHX | 1020 | 3 | 7 | 0 | | 0 | 11 | . 60832422011 | 12 | 6 | 2 | 1723 | 1845 | WN | 33 | N698SW | 202 | ⋯ | 78 | HOU | SAN | 1313 | 3 | 7 | 0 | | 0 | 68 | . 60832432011 | 12 | 6 | 2 | 1139 | 1304 | WN | 1212 | N226WN | 205 | ⋯ | -1 | HOU | SAN | 1313 | 2 | 10 | 0 | | 0 | -8 | . 60832442011 | 12 | 6 | 2 | 2023 | 2109 | WN | 207 | N354SW | 46 | ⋯ | 43 | HOU | SAT | 192 | 4 | 4 | 0 | | 0 | 27 | . 60832452011 | 12 | 6 | 2 | 1542 | 1637 | WN | 405 | N617SW | 55 | ⋯ | 12 | HOU | SAT | 192 | 4 | 8 | 0 | | 0 | 10 | . 60832462011 | 12 | 6 | 2 | 1728 | 1825 | WN | 628 | N389SW | 57 | ⋯ | 3 | HOU | SAT | 192 | 4 | 14 | 0 | | 0 | 3 | . 60832472011 | 12 | 6 | 2 | 1252 | 1349 | WN | 994 | N713SW | 57 | ⋯ | 7 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | 7 | . 60832482011 | 12 | 6 | 2 | 857 | 955 | WN | 1231 | N284WN | 58 | ⋯ | -3 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | -2 | . 60832492011 | 12 | 6 | 2 | 1939 | 2119 | WN | 124 | N522SW | 100 | ⋯ | 39 | HOU | STL | 687 | 4 | 15 | 0 | | 0 | 12 | . 60832502011 | 12 | 6 | 2 | 556 | 745 | WN | 280 | N728SW | 109 | ⋯ | -4 | HOU | STL | 687 | 13 | 9 | 0 | | 0 | -12 | . 60832512011 | 12 | 6 | 2 | 1026 | 1208 | WN | 782 | N476WN | 102 | ⋯ | 1 | HOU | STL | 687 | 4 | 12 | 0 | | 0 | -14 | . 60832522011 | 12 | 6 | 2 | 1611 | 1746 | WN | 1050 | N655WN | 95 | ⋯ | 16 | HOU | STL | 687 | 3 | 9 | 0 | | 0 | -11 | . 60832532011 | 12 | 6 | 2 | 758 | 1051 | WN | 201 | N903WN | 113 | ⋯ | -2 | HOU | TPA | 781 | 3 | 10 | 0 | | 0 | -6 | . 60832542011 | 12 | 6 | 2 | 1307 | 1600 | WN | 471 | N632SW | 113 | ⋯ | 7 | HOU | TPA | 781 | 5 | 10 | 0 | | 0 | -2 | . 60832552011 | 12 | 6 | 2 | 1818 | 2111 | WN | 1191 | N284WN | 113 | ⋯ | 8 | HOU | TPA | 781 | 5 | 11 | 0 | | 0 | -11 | . 60832562011 | 12 | 6 | 2 | 2047 | 2334 | WN | 1674 | N366SW | 107 | ⋯ | 7 | HOU | TPA | 781 | 4 | 9 | 0 | | 0 | 2 | . 60832572011 | 12 | 6 | 2 | 912 | 1031 | WN | 127 | N777QC | 79 | ⋯ | -3 | HOU | TUL | 453 | 4 | 14 | 0 | | 0 | -6 | . 60832582011 | 12 | 6 | 2 | 656 | 812 | WN | 621 | N727SW | 76 | ⋯ | -4 | HOU | TUL | 453 | 3 | 9 | 0 | | 0 | -15 | . 60832592011 | 12 | 6 | 2 | 1600 | 1713 | WN | 1597 | N745SW | 73 | ⋯ | 0 | HOU | TUL | 453 | 3 | 11 | 0 | | 0 | -14 | . 요약 통계 구하기 대용량의 데이터 셋을 대상으로 특정 칼럼을 대상으로 기술 통계량을 계산하는 관련 함수에 대해서 알아보자 | . | . summarise(hflights,avgAIRTIME = mean(AirTime,na.rm=T)) . A data.frame: 1 × 1 avgAIRTIME . &lt;dbl&gt; . 108.1423 | . hflights%&gt;%summarise(avg=mean(AirTime,na.rm=T)) . A data.frame: 1 × 1 avg . &lt;dbl&gt; . 108.1423 | . str(hflights) . &#39;data.frame&#39;: 227496 obs. of 21 variables: $ Year : int 2011 2011 2011 2011 2011 2011 2011 2011 2011 2011 ... $ Month : int 1 1 1 1 1 1 1 1 1 1 ... $ DayofMonth : int 1 2 3 4 5 6 7 8 9 10 ... $ DayOfWeek : int 6 7 1 2 3 4 5 6 7 1 ... $ DepTime : int 1400 1401 1352 1403 1405 1359 1359 1355 1443 1443 ... $ ArrTime : int 1500 1501 1502 1513 1507 1503 1509 1454 1554 1553 ... $ UniqueCarrier : chr &#34;AA&#34; &#34;AA&#34; &#34;AA&#34; &#34;AA&#34; ... $ FlightNum : int 428 428 428 428 428 428 428 428 428 428 ... $ TailNum : chr &#34;N576AA&#34; &#34;N557AA&#34; &#34;N541AA&#34; &#34;N403AA&#34; ... $ ActualElapsedTime: int 60 60 70 70 62 64 70 59 71 70 ... $ AirTime : int 40 45 48 39 44 45 43 40 41 45 ... $ ArrDelay : int -10 -9 -8 3 -3 -7 -1 -16 44 43 ... $ DepDelay : int 0 1 -8 3 5 -1 -1 -5 43 43 ... $ Origin : chr &#34;IAH&#34; &#34;IAH&#34; &#34;IAH&#34; &#34;IAH&#34; ... $ Dest : chr &#34;DFW&#34; &#34;DFW&#34; &#34;DFW&#34; &#34;DFW&#34; ... $ Distance : int 224 224 224 224 224 224 224 224 224 224 ... $ TaxiIn : int 7 6 5 9 9 6 12 7 8 6 ... $ TaxiOut : int 13 9 17 22 9 13 15 12 22 19 ... $ Cancelled : int 0 0 0 0 0 0 0 0 0 0 ... $ CancellationCode : chr &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; ... $ Diverted : int 0 0 0 0 0 0 0 0 0 0 ... . summarise(hflights,count=n(),delay=mean(AirTime,na.rm=T)) # n()은 데이터 셋의 관측치 길이를 구해준다. dplyr 패키지에서 제공해주는 함수이다. . A data.frame: 1 × 2 countdelay . &lt;int&gt;&lt;dbl&gt; . 227496 | 108.1423 | . 집단변수 대상 그룹화 | . data(iris) species = group_by(iris,Species) . 결과 변수를 확인하면 꽃의 종류별로 그룹화되어 있는 것을 볼 수 있다. | . str(species) . grouped_df [150 x 5] (S3: grouped_df/tbl_df/tbl/data.frame) $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &#34;setosa&#34;,&#34;versicolor&#34;,..: 1 1 1 1 1 1 1 1 1 1 ... - attr(*, &#34;groups&#34;)= tibble [3 x 2] (S3: tbl_df/tbl/data.frame) ..$ Species: Factor w/ 3 levels &#34;setosa&#34;,&#34;versicolor&#34;,..: 1 2 3 ..$ .rows : list&lt;int&gt; [1:3] .. ..$ : int [1:50] 1 2 3 4 5 6 7 8 9 10 ... .. ..$ : int [1:50] 51 52 53 54 55 56 57 58 59 60 ... .. ..$ : int [1:50] 101 102 103 104 105 106 107 108 109 110 ... .. ..@ ptype: int(0) ..- attr(*, &#34;.drop&#34;)= logi TRUE . species . A grouped_df: 150 × 5 Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5.4 | 3.9 | 1.7 | 0.4 | setosa | . 4.6 | 3.4 | 1.4 | 0.3 | setosa | . 5.0 | 3.4 | 1.5 | 0.2 | setosa | . 4.4 | 2.9 | 1.4 | 0.2 | setosa | . 4.9 | 3.1 | 1.5 | 0.1 | setosa | . 5.4 | 3.7 | 1.5 | 0.2 | setosa | . 4.8 | 3.4 | 1.6 | 0.2 | setosa | . 4.8 | 3.0 | 1.4 | 0.1 | setosa | . 4.3 | 3.0 | 1.1 | 0.1 | setosa | . 5.8 | 4.0 | 1.2 | 0.2 | setosa | . 5.7 | 4.4 | 1.5 | 0.4 | setosa | . 5.4 | 3.9 | 1.3 | 0.4 | setosa | . 5.1 | 3.5 | 1.4 | 0.3 | setosa | . 5.7 | 3.8 | 1.7 | 0.3 | setosa | . 5.1 | 3.8 | 1.5 | 0.3 | setosa | . 5.4 | 3.4 | 1.7 | 0.2 | setosa | . 5.1 | 3.7 | 1.5 | 0.4 | setosa | . 4.6 | 3.6 | 1.0 | 0.2 | setosa | . 5.1 | 3.3 | 1.7 | 0.5 | setosa | . 4.8 | 3.4 | 1.9 | 0.2 | setosa | . 5.0 | 3.0 | 1.6 | 0.2 | setosa | . 5.0 | 3.4 | 1.6 | 0.4 | setosa | . 5.2 | 3.5 | 1.5 | 0.2 | setosa | . 5.2 | 3.4 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.6 | 0.2 | setosa | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6.9 | 3.2 | 5.7 | 2.3 | virginica | . 5.6 | 2.8 | 4.9 | 2.0 | virginica | . 7.7 | 2.8 | 6.7 | 2.0 | virginica | . 6.3 | 2.7 | 4.9 | 1.8 | virginica | . 6.7 | 3.3 | 5.7 | 2.1 | virginica | . 7.2 | 3.2 | 6.0 | 1.8 | virginica | . 6.2 | 2.8 | 4.8 | 1.8 | virginica | . 6.1 | 3.0 | 4.9 | 1.8 | virginica | . 6.4 | 2.8 | 5.6 | 2.1 | virginica | . 7.2 | 3.0 | 5.8 | 1.6 | virginica | . 7.4 | 2.8 | 6.1 | 1.9 | virginica | . 7.9 | 3.8 | 6.4 | 2.0 | virginica | . 6.4 | 2.8 | 5.6 | 2.2 | virginica | . 6.3 | 2.8 | 5.1 | 1.5 | virginica | . 6.1 | 2.6 | 5.6 | 1.4 | virginica | . 7.7 | 3.0 | 6.1 | 2.3 | virginica | . 6.3 | 3.4 | 5.6 | 2.4 | virginica | . 6.4 | 3.1 | 5.5 | 1.8 | virginica | . 6.0 | 3.0 | 4.8 | 1.8 | virginica | . 6.9 | 3.1 | 5.4 | 2.1 | virginica | . 6.7 | 3.1 | 5.6 | 2.4 | virginica | . 6.9 | 3.1 | 5.1 | 2.3 | virginica | . 5.8 | 2.7 | 5.1 | 1.9 | virginica | . 6.8 | 3.2 | 5.9 | 2.3 | virginica | . 6.7 | 3.3 | 5.7 | 2.5 | virginica | . 6.7 | 3.0 | 5.2 | 2.3 | virginica | . 6.3 | 2.5 | 5.0 | 1.9 | virginica | . 6.5 | 3.0 | 5.2 | 2.0 | virginica | . 6.2 | 3.4 | 5.4 | 2.3 | virginica | . 5.9 | 3.0 | 5.1 | 1.8 | virginica | . 데이터프레임 병합 서로 다른 데이터프레임을 대상으로 공통 칼럼을 이용하여 하나의 데이터프레임으로 병합하는 함수에 대해서 알아보자 | . | . 공통 변수를 이용하여 내부조인 하기 | . df1 df2 . A data.frame: 5 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 1 | -0.8698428 | . 2 | -0.3587920 | . 3 | 1.3628454 | . 4 | 1.3764428 | . 5 | 0.7828960 | . A data.frame: 5 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 2 | -0.1237231 | . 3 | -1.2491581 | . 4 | -1.1889538 | . 5 | -0.2320964 | . 6 | -0.5577591 | . df1=data.frame(x=1:5,y=rnorm(5)) df2=data.frame(x=2:6,y=rnorm(5)) inner_join(df1,df2,by=&#39;x&#39;) # 공통으로 사용된 x는 병합을 위해 사용된다. # 병합의 결과는 양쪽 모두 x가 존재하는 2,3,4,5 관측치를 대상으로 병합된다. # inner_join은 내부조인이라고 부른다. . A data.frame: 4 × 3 xy.xy.y . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2 | -0.358792 | -0.1237231 | . 3 | 1.362845 | -1.2491581 | . 4 | 1.376443 | -1.1889538 | . 5 | 0.782896 | -0.2320964 | . 공통변수를 이용하여 왼쪽 조인하기 | . left_join(df1,df2,by=&#39;x&#39;) # 왼쪽에 위치한 df1의 x칼럼을 기준으로 오른쪽 df2와 병합한다. # 만약 오른쪽의 df2에서 해당하는 x의 값이 없는 경우에는 결측치 NA로 둔다. # 왿쪽 데이터프레임을 기준으로 병합하기 때문에 왼쪽 조인이라고 부른다. . A data.frame: 5 × 3 xy.xy.y . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | -0.8698428 | NA | . 2 | -0.3587920 | -0.1237231 | . 3 | 1.3628454 | -1.2491581 | . 4 | 1.3764428 | -1.1889538 | . 5 | 0.7828960 | -0.2320964 | . 공통변수를 이용하여 오른쪽 조인하기 | . right_join(df1,df2,by=&#39;x&#39;) . A data.frame: 5 × 3 xy.xy.y . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2 | -0.358792 | -0.1237231 | . 3 | 1.362845 | -1.2491581 | . 4 | 1.376443 | -1.1889538 | . 5 | 0.782896 | -0.2320964 | . 6 | NA | -0.5577591 | . 공통변수를 이용하여 전체 조인하기 | . full_join(df1,df2,by=&#39;x&#39;) . A data.frame: 6 × 3 xy.xy.y . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | -0.8698428 | NA | . 2 | -0.3587920 | -0.1237231 | . 3 | 1.3628454 | -1.2491581 | . 4 | 1.3764428 | -1.1889538 | . 5 | 0.7828960 | -0.2320964 | . 6 | NA | -0.5577591 | . 위와는 다른 상황인, 서로 다른 데이터프레임을 대상으로 행 단위 또는 열 단위로 합치는 함수에 대해서 알아보자 | . bind_rows(df1,df2) . A data.frame: 10 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 1 | -0.8698428 | . 2 | -0.3587920 | . 3 | 1.3628454 | . 4 | 1.3764428 | . 5 | 0.7828960 | . 2 | -0.1237231 | . 3 | -1.2491581 | . 4 | -1.1889538 | . 5 | -0.2320964 | . 6 | -0.5577591 | . bind_cols(df1,df2) . New names: * x -&gt; x...1 * y -&gt; y...2 * x -&gt; x...3 * y -&gt; y...4 . A data.frame: 5 × 4 x...1y...2x...3y...4 . &lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt; . 1 | -0.8698428 | 2 | -0.1237231 | . 2 | -0.3587920 | 3 | -1.2491581 | . 3 | 1.3628454 | 4 | -1.1889538 | . 4 | 1.3764428 | 5 | -0.2320964 | . 5 | 0.7828960 | 6 | -0.5577591 | . 칼럼명 수정하기 | . names(df1) . &lt;ol class=list-inline&gt;&#39;x&#39; | &#39;y&#39; | &lt;/ol&gt; attributes(df1) . $names &lt;ol class=list-inline&gt;&#39;x&#39; | &#39;y&#39; | &lt;/ol&gt; $class &#39;data.frame&#39; $row.names &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; 수정해보자 | . df1 . A data.frame: 5 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 1 | -0.8698428 | . 2 | -0.3587920 | . 3 | 1.3628454 | . 4 | 1.3764428 | . 5 | 0.7828960 | . df_rename = rename(df1,asd=x) . df_rename . A data.frame: 5 × 2 asdy . &lt;int&gt;&lt;dbl&gt; . 1 | -0.8698428 | . 2 | -0.3587920 | . 3 | 1.3628454 | . 4 | 1.3764428 | . 5 | 0.7828960 | . . reshape2 패키지 활용 reshape2 패키지에서 제공하는 dcast() 함수를 이용하여 긴 형식의 데이터를 넓은 형식의 데이터로 변경한다. | . | . 긴 형식을 넓은 형식으로 변경 | . install.packages(&#39;reshape2&#39;) . package &#39;reshape2&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp RtmpC2f3ED downloaded_packages . library(reshape2) . wide = dcast(데이터셋, 앞변수~뒷변수, 적용함수) . 이때 dcast() 함수를 실행하면 데이터 셋을 대상으로 앞 변수와 뒷 변수의 값이 같은 경우 측정변수를 대상으로 적용함수가 적용된다. 이때 앞 변수는 각 행을 구성하며, 뒷 변수를 각 열을 구성한다. 실행 후 출력되는 결과 메시지는 어떤 변수가 측정변수로 사용되어 정리 대상 변수가 되었다고 알려주는 메시지이다. | . 넓은 형식을 긴 형식으로 변경 reshape2 패키지에서 제공하는 melt() 함수를 이용하여 넓은 형식의 데이터를 긴 형식의 데이터로 변경할 수 있다. | . | . melted = melt(데이터 셋, id=&#39;칼럼명&#39;) . 넓은 형식의 데이터 셋을 대상으로 id=&#39;칼럼명&#39;로 지정된 칼럼명을 기준으로 데이터의 구조를 긴 형식으로 변경하는 과정이다. | 칼럼명을 변경하려면colnames(melted) = c(&#39;a&#39;,&#39;v&#39;,...) . | . data(smiths) smiths . A data.frame: 2 × 5 subjecttimeageweightheight . &lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . John Smith | 1 | 33 | 90 | 1.87 | . Mary Smith | 1 | NA | NA | 1.54 | . 현재는 넓은 형식의 데이터 셋이다. | . long = melt(smiths, id=1:2) long . A data.frame: 6 × 4 subjecttimevariablevalue . &lt;fct&gt;&lt;int&gt;&lt;fct&gt;&lt;dbl&gt; . John Smith | 1 | age | 33.00 | . Mary Smith | 1 | age | NA | . John Smith | 1 | weight | 90.00 | . Mary Smith | 1 | weight | NA | . John Smith | 1 | height | 1.87 | . Mary Smith | 1 | height | 1.54 | . smiths 데이터 셋을 대상으로 첫 번째 칼럼과 두 번째 칼럼을 기준으로 긴 형식으로 구조가 변경되어 4개의 칼럼과 6개의 관측치를 갖는 데이터프레임이 생성된다. | . 긴 형식을 넓은 형식으로 변경하기 | . dcast(long,subject+time~...) . A data.frame: 2 × 5 subjecttimeageweightheight . &lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . John Smith | 1 | 33 | 90 | 1.87 | . Mary Smith | 1 | NA | NA | 1.54 | . 긴 형식으로 변경된 데이터 셋을 대상으로 subject와 time 칼럼을 기준으로 다시 넓은 형식으로 구조를 변경하였다. | . 3차원 배열 형식으로 변경 | . data(&#39;airquality&#39;) . str(airquality) . &#39;data.frame&#39;: 153 obs. of 6 variables: $ Ozone : int 41 36 12 18 NA 28 23 19 8 NA ... $ Solar.R: int 190 118 149 313 NA NA 299 99 19 194 ... $ Wind : num 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ... $ Temp : int 67 72 74 62 56 66 65 59 61 69 ... $ Month : int 5 5 5 5 5 5 5 5 5 5 ... $ Day : int 1 2 3 4 5 6 7 8 9 10 ... . 칼럼 제목을 대문자로 일괄 변경 | . names(airquality) = toupper(names(airquality)) head(airquality) . A data.frame: 6 × 6 OZONESOLAR.RWINDTEMPMONTHDAY . &lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 141 | 190 | 7.4 | 67 | 5 | 1 | . 236 | 118 | 8.0 | 72 | 5 | 2 | . 312 | 149 | 12.6 | 74 | 5 | 3 | . 418 | 313 | 11.5 | 62 | 5 | 4 | . 5NA | NA | 14.3 | 56 | 5 | 5 | . 628 | NA | 14.9 | 66 | 5 | 6 | . melt() 함수를 이용하여 넓은 형식을 긴 형식으로 변경하기 | . air_melt = melt(airquality, id = c(&#39;MONTH&#39;,&#39;DAY&#39;),na.rm=T) head(air_melt) . A data.frame: 6 × 4 MONTHDAYvariablevalue . &lt;int&gt;&lt;int&gt;&lt;fct&gt;&lt;dbl&gt; . 15 | 1 | OZONE | 41 | . 25 | 2 | OZONE | 36 | . 35 | 3 | OZONE | 12 | . 45 | 4 | OZONE | 18 | . 65 | 6 | OZONE | 28 | . 75 | 7 | OZONE | 23 | . acast() 함수를 이용하여 3차원 구조로 변경하기 | . names(air_melt) = tolower(names(air_melt)) . head(air_melt) . A data.frame: 6 × 4 monthdayvariablevalue . &lt;int&gt;&lt;int&gt;&lt;fct&gt;&lt;dbl&gt; . 15 | 1 | OZONE | 41 | . 25 | 2 | OZONE | 36 | . 35 | 3 | OZONE | 12 | . 45 | 4 | OZONE | 18 | . 65 | 6 | OZONE | 28 | . 75 | 7 | OZONE | 23 | . acast = acast(air_melt,day~month~variable) acast . &lt;ol class=list-inline&gt;41 | 36 | 12 | 18 | &lt;NA&gt; | 28 | 23 | 19 | 8 | &lt;NA&gt; | 7 | 16 | 11 | 14 | 18 | 14 | 34 | 6 | 30 | 11 | 1 | 11 | 4 | 32 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 23 | 45 | 115 | 37 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 29 | &lt;NA&gt; | 71 | 39 | &lt;NA&gt; | &lt;NA&gt; | 23 | &lt;NA&gt; | &lt;NA&gt; | 21 | 37 | 20 | 12 | 13 | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | &lt;NA&gt; | 135 | 49 | 32 | &lt;NA&gt; | 64 | 40 | 77 | 97 | 97 | 85 | &lt;NA&gt; | 10 | 27 | &lt;NA&gt; | 7 | 48 | 35 | 61 | 79 | 63 | 16 | &lt;NA&gt; | &lt;NA&gt; | 80 | 108 | 20 | 52 | 82 | 50 | 64 | 59 | 39 | 9 | 16 | 78 | 35 | 66 | 122 | 89 | 110 | &lt;NA&gt; | &lt;NA&gt; | 44 | 28 | 65 | &lt;NA&gt; | 22 | 59 | 23 | 31 | 44 | 21 | 9 | &lt;NA&gt; | 45 | 168 | 73 | &lt;NA&gt; | 76 | 118 | 84 | 85 | 96 | 78 | 73 | 91 | 47 | 32 | 20 | 23 | 21 | 24 | 44 | 21 | 28 | 9 | 13 | 46 | 18 | 13 | 24 | 16 | 13 | 23 | 36 | 7 | 14 | 30 | &lt;NA&gt; | 14 | 18 | 20 | &lt;NA&gt; | 190 | 118 | 149 | 313 | &lt;NA&gt; | &lt;NA&gt; | 299 | 99 | 19 | 194 | &lt;NA&gt; | 256 | 290 | 274 | 65 | 334 | 307 | 78 | 322 | 44 | 8 | 320 | 25 | 92 | 66 | 266 | &lt;NA&gt; | 13 | 252 | 223 | 279 | 286 | 287 | 242 | 186 | 220 | 264 | 127 | 273 | 291 | 323 | 259 | 250 | 148 | 332 | ⋯ | 7.4 | 10.9 | 10.3 | 15.5 | 14.3 | 12.6 | 9.7 | 3.4 | 8 | 5.7 | 9.7 | 2.3 | 6.3 | 6.3 | 6.9 | 5.1 | 2.8 | 4.6 | 7.4 | 15.5 | 10.9 | 10.3 | 10.9 | 9.7 | 14.9 | 15.5 | 6.3 | 10.9 | 11.5 | 6.9 | 13.8 | 10.3 | 10.3 | 8 | 12.6 | 9.2 | 10.3 | 10.3 | 16.6 | 6.9 | 13.2 | 14.3 | 8 | 11.5 | &lt;NA&gt; | 67 | 72 | 74 | 62 | 56 | 66 | 65 | 59 | 61 | 69 | 74 | 69 | 66 | 68 | 58 | 64 | 66 | 57 | 68 | 62 | 59 | 73 | 61 | 61 | 57 | 58 | 57 | 67 | 81 | 79 | 76 | 78 | 74 | 67 | 84 | 85 | 79 | 82 | 87 | 90 | 87 | 93 | 92 | 82 | 80 | 79 | 77 | 72 | 65 | 73 | 76 | 77 | 76 | 76 | 76 | 75 | 78 | 73 | 80 | 77 | 83 | &lt;NA&gt; | 84 | 85 | 81 | 84 | 83 | 83 | 88 | 92 | 92 | 89 | 82 | 73 | 81 | 91 | 80 | 81 | 82 | 84 | 87 | 85 | 74 | 81 | 82 | 86 | 85 | 82 | 86 | 88 | 86 | 83 | 81 | 81 | 81 | 82 | 86 | 85 | 87 | 89 | 90 | 90 | 92 | 86 | 86 | 82 | 80 | 79 | 77 | 79 | 76 | 78 | 78 | 77 | 72 | 75 | 79 | 81 | 86 | 88 | 97 | 94 | 96 | 94 | 91 | 92 | 93 | 93 | 87 | 84 | 80 | 78 | 75 | 73 | 81 | 76 | 77 | 71 | 71 | 78 | 67 | 76 | 68 | 82 | 64 | 71 | 81 | 69 | 63 | 70 | 77 | 75 | 76 | 68 | &lt;NA&gt; | &lt;/ol&gt;",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/14/r.html",
            "relUrl": "/2022/02/14/r.html",
            "date": " • Feb 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "데이터 시각화, dplyr 패키지",
            "content": "data(iris) # iris 데이터 불러오기 attributes(iris) # iris 데이터프레임의 5개 컬럼명 확인 . $names &lt;ol class=list-inline&gt;&#39;Sepal.Length&#39; | &#39;Sepal.Width&#39; | &#39;Petal.Length&#39; | &#39;Petal.Width&#39; | &#39;Species&#39; | &lt;/ol&gt; $class &#39;data.frame&#39; $row.names &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | &lt;/ol&gt; names(iris) # 5개의 칼럼명을 names 혹은 attributes을 통해 확인할 수 있다. . &lt;ol class=list-inline&gt;&#39;Sepal.Length&#39; | &#39;Sepal.Width&#39; | &#39;Petal.Length&#39; | &#39;Petal.Width&#39; | &#39;Species&#39; | &lt;/ol&gt; # virginica 꽃을 대상으로 4개 변수를 비교하여 행렬구조로 차트를 그린 결과이다. pairs(iris[iris$Species == &#39;virginica&#39;,1:4]) . pairs(iris[iris$Species == &#39;setosa&#39;,1:4]) . iris에서 Species 칼럼인 꽃의 종 setosa, versicolor, virginica을 대상으로 하여 3차원 산점도로 데이터를 시각화한다. | . library(scatterplot3d) . iris_setosa = iris[iris$Species == &#39;setosa&#39;,] iris_versicolor = iris[iris$Species == &#39;versicolor&#39;,] iris_virginica = iris[iris$Species == &#39;virginica&#39;,] . d3 &lt;- scatterplot3d(iris$Petal.Length, iris$Sepal.Length, iris$Sepal.Width, type=&#39;n&#39;) # 각각 밑변, 오른쪽 변의 칼럼명, 왼쪽 변의 칼럼명 # type=&#39;n&#39; =&gt; 기본 산점도를 표시하지 않음 # 현재 만든 것은 3차원 틀 Frame을 생성한 것이다. # 여기서 셀을 갈라서 실행하면 실행이 안 됨 # 위 아래 셀 꼭 같이 실행해줘야함 # 예를 들어 예전에 배웠던 plot과 lines는 같은 셀에서 사용해야하며 # lines나 abline같은 건 독자적 사용이 불가능한 것과 일맥상통한 논리이다. # 이제 3차원 산점도를 시각화한다. d3$points3d(iris_setosa$Petal.Length, iris_setosa$Sepal.Length, iris_setosa$Sepal.Width, bg=&#39;orange&#39;,pch=21) d3$points3d(iris_versicolor$Petal.Length, iris_versicolor$Sepal.Length, iris_versicolor$Sepal.Width, bg=&#39;blue&#39;,pch=23) d3$points3d(iris_virginica$Petal.Length, iris_virginica$Sepal.Length, iris_virginica$Sepal.Width, bg=&#39;green&#39;,pch=25) . . dplyr 패키지는 데이터프레임 자료구조를 갖는 정형화된 데이터를 처리하는 데 적합한 패키지이다. | . 파이프 연산자 %&gt;%를 이용한 함수 적용 데이터프레임을 조작하는 데 필요한 함수를 순차적으로 적용할 경우 사용할 수 있는 연산자이다. | . | . library(dplyr) . iris %&gt;% head() %&gt;% subset(Sepal.Length&gt;=5) . A data.frame: 3 × 5 Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 15.1 | 3.5 | 1.4 | 0.2 | setosa | . 55.0 | 3.6 | 1.4 | 0.2 | setosa | . 65.4 | 3.9 | 1.7 | 0.4 | setosa | . 대용량의 관계형 데이터베이스나 데이터프레임에서 수집된 데이터 셋을 대상으로 콘솔 창의 크기에 맞게 데이터를 추출하고, 나머지는 축약형으로 제공한다면 데이터를 효과적으로 처리할 수 있을 것이다. | . library(hflights) . str(hflights) . &#39;data.frame&#39;: 227496 obs. of 21 variables: $ Year : int 2011 2011 2011 2011 2011 2011 2011 2011 2011 2011 ... $ Month : int 1 1 1 1 1 1 1 1 1 1 ... $ DayofMonth : int 1 2 3 4 5 6 7 8 9 10 ... $ DayOfWeek : int 6 7 1 2 3 4 5 6 7 1 ... $ DepTime : int 1400 1401 1352 1403 1405 1359 1359 1355 1443 1443 ... $ ArrTime : int 1500 1501 1502 1513 1507 1503 1509 1454 1554 1553 ... $ UniqueCarrier : chr &#34;AA&#34; &#34;AA&#34; &#34;AA&#34; &#34;AA&#34; ... $ FlightNum : int 428 428 428 428 428 428 428 428 428 428 ... $ TailNum : chr &#34;N576AA&#34; &#34;N557AA&#34; &#34;N541AA&#34; &#34;N403AA&#34; ... $ ActualElapsedTime: int 60 60 70 70 62 64 70 59 71 70 ... $ AirTime : int 40 45 48 39 44 45 43 40 41 45 ... $ ArrDelay : int -10 -9 -8 3 -3 -7 -1 -16 44 43 ... $ DepDelay : int 0 1 -8 3 5 -1 -1 -5 43 43 ... $ Origin : chr &#34;IAH&#34; &#34;IAH&#34; &#34;IAH&#34; &#34;IAH&#34; ... $ Dest : chr &#34;DFW&#34; &#34;DFW&#34; &#34;DFW&#34; &#34;DFW&#34; ... $ Distance : int 224 224 224 224 224 224 224 224 224 224 ... $ TaxiIn : int 7 6 5 9 9 6 12 7 8 6 ... $ TaxiOut : int 13 9 17 22 9 13 15 12 22 19 ... $ Cancelled : int 0 0 0 0 0 0 0 0 0 0 ... $ CancellationCode : chr &#34;&#34; &#34;&#34; &#34;&#34; &#34;&#34; ... $ Diverted : int 0 0 0 0 0 0 0 0 0 0 ... . 해당 데이터 셋의 자료 구조는 data.frame 형식이고 전체 관측치는 227,496행이며, 변수는 21개로 구성되어 있다. | . tbl_df(hflights) . A tibble: 227496 × 21 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯ArrDelayDepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDiverted . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt; . 2011 | 1 | 1 | 6 | 1400 | 1500 | AA | 428 | N576AA | 60 | ⋯ | -10 | 0 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1401 | 1501 | AA | 428 | N557AA | 60 | ⋯ | -9 | 1 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | . 2011 | 1 | 3 | 1 | 1352 | 1502 | AA | 428 | N541AA | 70 | ⋯ | -8 | -8 | IAH | DFW | 224 | 5 | 17 | 0 | | 0 | . 2011 | 1 | 4 | 2 | 1403 | 1513 | AA | 428 | N403AA | 70 | ⋯ | 3 | 3 | IAH | DFW | 224 | 9 | 22 | 0 | | 0 | . 2011 | 1 | 5 | 3 | 1405 | 1507 | AA | 428 | N492AA | 62 | ⋯ | -3 | 5 | IAH | DFW | 224 | 9 | 9 | 0 | | 0 | . 2011 | 1 | 6 | 4 | 1359 | 1503 | AA | 428 | N262AA | 64 | ⋯ | -7 | -1 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | . 2011 | 1 | 7 | 5 | 1359 | 1509 | AA | 428 | N493AA | 70 | ⋯ | -1 | -1 | IAH | DFW | 224 | 12 | 15 | 0 | | 0 | . 2011 | 1 | 8 | 6 | 1355 | 1454 | AA | 428 | N477AA | 59 | ⋯ | -16 | -5 | IAH | DFW | 224 | 7 | 12 | 0 | | 0 | . 2011 | 1 | 9 | 7 | 1443 | 1554 | AA | 428 | N476AA | 71 | ⋯ | 44 | 43 | IAH | DFW | 224 | 8 | 22 | 0 | | 0 | . 2011 | 1 | 10 | 1 | 1443 | 1553 | AA | 428 | N504AA | 70 | ⋯ | 43 | 43 | IAH | DFW | 224 | 6 | 19 | 0 | | 0 | . 2011 | 1 | 11 | 2 | 1429 | 1539 | AA | 428 | N565AA | 70 | ⋯ | 29 | 29 | IAH | DFW | 224 | 8 | 20 | 0 | | 0 | . 2011 | 1 | 12 | 3 | 1419 | 1515 | AA | 428 | N577AA | 56 | ⋯ | 5 | 19 | IAH | DFW | 224 | 4 | 11 | 0 | | 0 | . 2011 | 1 | 13 | 4 | 1358 | 1501 | AA | 428 | N476AA | 63 | ⋯ | -9 | -2 | IAH | DFW | 224 | 6 | 13 | 0 | | 0 | . 2011 | 1 | 14 | 5 | 1357 | 1504 | AA | 428 | N552AA | 67 | ⋯ | -6 | -3 | IAH | DFW | 224 | 5 | 15 | 0 | | 0 | . 2011 | 1 | 15 | 6 | 1359 | 1459 | AA | 428 | N462AA | 60 | ⋯ | -11 | -1 | IAH | DFW | 224 | 6 | 10 | 0 | | 0 | . 2011 | 1 | 16 | 7 | 1359 | 1509 | AA | 428 | N555AA | 70 | ⋯ | -1 | -1 | IAH | DFW | 224 | 12 | 17 | 0 | | 0 | . 2011 | 1 | 17 | 1 | 1530 | 1634 | AA | 428 | N518AA | 64 | ⋯ | 84 | 90 | IAH | DFW | 224 | 8 | 8 | 0 | | 0 | . 2011 | 1 | 18 | 2 | 1408 | 1508 | AA | 428 | N507AA | 60 | ⋯ | -2 | 8 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | . 2011 | 1 | 19 | 3 | 1356 | 1503 | AA | 428 | N523AA | 67 | ⋯ | -7 | -4 | IAH | DFW | 224 | 10 | 11 | 0 | | 0 | . 2011 | 1 | 20 | 4 | 1507 | 1622 | AA | 428 | N425AA | 75 | ⋯ | 72 | 67 | IAH | DFW | 224 | 9 | 24 | 0 | | 0 | . 2011 | 1 | 21 | 5 | 1357 | 1459 | AA | 428 | N251AA | 62 | ⋯ | -11 | -3 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | . 2011 | 1 | 22 | 6 | 1355 | 1456 | AA | 428 | N551AA | 61 | ⋯ | -14 | -5 | IAH | DFW | 224 | 9 | 8 | 0 | | 0 | . 2011 | 1 | 23 | 7 | 1356 | 1501 | AA | 428 | N479AA | 65 | ⋯ | -9 | -4 | IAH | DFW | 224 | 7 | 18 | 0 | | 0 | . 2011 | 1 | 24 | 1 | 1356 | 1513 | AA | 428 | N531AA | 77 | ⋯ | 3 | -4 | IAH | DFW | 224 | 6 | 28 | 0 | | 0 | . 2011 | 1 | 25 | 2 | 1352 | 1452 | AA | 428 | N561AA | 60 | ⋯ | -18 | -8 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | . 2011 | 1 | 26 | 3 | 1353 | 1455 | AA | 428 | N541AA | 62 | ⋯ | -15 | -7 | IAH | DFW | 224 | 8 | 14 | 0 | | 0 | . 2011 | 1 | 27 | 4 | 1356 | 1458 | AA | 428 | N512AA | 62 | ⋯ | -12 | -4 | IAH | DFW | 224 | 12 | 10 | 0 | | 0 | . 2011 | 1 | 28 | 5 | 1359 | 1505 | AA | 428 | N4UBAA | 66 | ⋯ | -5 | -1 | IAH | DFW | 224 | 8 | 12 | 0 | | 0 | . 2011 | 1 | 29 | 6 | 1355 | 1455 | AA | 428 | N491AA | 60 | ⋯ | -15 | -5 | IAH | DFW | 224 | 7 | 7 | 0 | | 0 | . 2011 | 1 | 30 | 7 | 1359 | 1456 | AA | 428 | N561AA | 57 | ⋯ | -14 | -1 | IAH | DFW | 224 | 7 | 11 | 0 | | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2011 | 12 | 6 | 2 | 752 | 857 | WN | 1628 | N435WN | 65 | ⋯ | 2 | -3 | HOU | MSY | 302 | 4 | 11 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 651 | 746 | WN | 2534 | N232WN | 55 | ⋯ | -9 | -4 | HOU | MSY | 302 | 5 | 7 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1728 | 1932 | WN | 902 | N724SW | 244 | ⋯ | 7 | 23 | HOU | OAK | 1642 | 5 | 8 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1115 | 1315 | WN | 1167 | N455WN | 240 | ⋯ | -15 | 5 | HOU | OAK | 1642 | 6 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1753 | 1911 | WN | 513 | N362SW | 78 | ⋯ | 31 | 33 | HOU | OKC | 419 | 4 | 15 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1222 | 1335 | WN | 581 | N646SW | 73 | ⋯ | -10 | -3 | HOU | OKC | 419 | 3 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 836 | 946 | WN | 1223 | N394SW | 70 | ⋯ | -9 | 1 | HOU | OKC | 419 | 4 | 8 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1352 | 1749 | WN | 3085 | N510SW | 177 | ⋯ | 59 | 72 | HOU | PHL | 1336 | 5 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1850 | 2046 | WN | 39 | N754SW | 176 | ⋯ | 71 | 70 | HOU | PHX | 1020 | 4 | 15 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 707 | 903 | WN | 424 | N769SW | 176 | ⋯ | -2 | -3 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1335 | 1528 | WN | 1098 | N448WN | 173 | ⋯ | 18 | 20 | HOU | PHX | 1020 | 4 | 10 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1005 | 1158 | WN | 1403 | N430WN | 173 | ⋯ | 13 | 15 | HOU | PHX | 1020 | 3 | 7 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1723 | 1845 | WN | 33 | N698SW | 202 | ⋯ | 70 | 78 | HOU | SAN | 1313 | 3 | 7 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1139 | 1304 | WN | 1212 | N226WN | 205 | ⋯ | -6 | -1 | HOU | SAN | 1313 | 2 | 10 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 2023 | 2109 | WN | 207 | N354SW | 46 | ⋯ | 29 | 43 | HOU | SAT | 192 | 4 | 4 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1542 | 1637 | WN | 405 | N617SW | 55 | ⋯ | 12 | 12 | HOU | SAT | 192 | 4 | 8 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1728 | 1825 | WN | 628 | N389SW | 57 | ⋯ | 5 | 3 | HOU | SAT | 192 | 4 | 14 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1252 | 1349 | WN | 994 | N713SW | 57 | ⋯ | 9 | 7 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 857 | 955 | WN | 1231 | N284WN | 58 | ⋯ | 0 | -3 | HOU | SAT | 192 | 5 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1939 | 2119 | WN | 124 | N522SW | 100 | ⋯ | 14 | 39 | HOU | STL | 687 | 4 | 15 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 556 | 745 | WN | 280 | N728SW | 109 | ⋯ | -10 | -4 | HOU | STL | 687 | 13 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1026 | 1208 | WN | 782 | N476WN | 102 | ⋯ | -12 | 1 | HOU | STL | 687 | 4 | 12 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1611 | 1746 | WN | 1050 | N655WN | 95 | ⋯ | -9 | 16 | HOU | STL | 687 | 3 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 758 | 1051 | WN | 201 | N903WN | 113 | ⋯ | -4 | -2 | HOU | TPA | 781 | 3 | 10 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1307 | 1600 | WN | 471 | N632SW | 113 | ⋯ | 0 | 7 | HOU | TPA | 781 | 5 | 10 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1818 | 2111 | WN | 1191 | N284WN | 113 | ⋯ | -9 | 8 | HOU | TPA | 781 | 5 | 11 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 2047 | 2334 | WN | 1674 | N366SW | 107 | ⋯ | 4 | 7 | HOU | TPA | 781 | 4 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 912 | 1031 | WN | 127 | N777QC | 79 | ⋯ | -4 | -3 | HOU | TUL | 453 | 4 | 14 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 656 | 812 | WN | 621 | N727SW | 76 | ⋯ | -13 | -4 | HOU | TUL | 453 | 3 | 9 | 0 | | 0 | . 2011 | 12 | 6 | 2 | 1600 | 1713 | WN | 1597 | N745SW | 73 | ⋯ | -12 | 0 | HOU | TUL | 453 | 3 | 11 | 0 | | 0 | . 원래는 R의 콘솔 창 크기에서 볼 수 있는 만큼 10개 행과 8개의 칼럼으로 결과가 나타나고 나머지는 아래에 생략된 행 수와 칼럼명으로 표시되어야 하는데, 현재 jupyter notebook이라서 이렇게 반환된 것 같다. | . . 조건에 맞는 데이터 필터링 대용량의 데이터 셋을 대상으로 필요한 데이터만 추출하는 필터링 관련 함수에 대해서 알아보자 | subset과 유사한가?,,,, | . | . filter(hflights,Month == 1 &amp; DayofMonth==2) . A data.frame: 678 × 21 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯ArrDelayDepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDiverted . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt; . 2011 | 1 | 2 | 7 | 1401 | 1501 | AA | 428 | N557AA | 60 | ⋯ | -9 | 1 | IAH | DFW | 224 | 6 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 719 | 821 | AA | 460 | N537AA | 62 | ⋯ | -14 | -1 | IAH | DFW | 224 | 9 | 10 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1959 | 2106 | AA | 533 | N461AA | 67 | ⋯ | -14 | -6 | IAH | DFW | 224 | 12 | 11 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1636 | 1759 | AA | 1121 | N579AA | 83 | ⋯ | 14 | 6 | IAH | DFW | 224 | 24 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1823 | 2132 | AA | 1294 | N3CCAA | 129 | ⋯ | 17 | 28 | IAH | MIA | 964 | 6 | 11 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1008 | 1321 | AA | 1700 | N3ASAA | 133 | ⋯ | -19 | -12 | IAH | MIA | 964 | 6 | 15 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1200 | 1303 | AA | 1820 | N589AA | 63 | ⋯ | -7 | -5 | IAH | DFW | 224 | 3 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 907 | 1018 | AA | 1824 | N569AA | 71 | ⋯ | -7 | -3 | IAH | DFW | 224 | 6 | 20 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 554 | 912 | AA | 1994 | N3DCAA | 138 | ⋯ | -3 | -6 | IAH | MIA | 964 | 5 | 18 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1823 | 2103 | AS | 731 | N627AS | 280 | ⋯ | -7 | -2 | IAH | SEA | 1874 | 7 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 703 | 1113 | B6 | 620 | N324JB | 190 | ⋯ | -6 | 3 | HOU | JFK | 1428 | 6 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1604 | 2040 | B6 | 622 | N324JB | 216 | ⋯ | 31 | 19 | HOU | JFK | 1428 | 9 | 31 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 939 | 1414 | CO | 1 | N76064 | 515 | ⋯ | 24 | 14 | IAH | HNL | 3904 | 5 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1833 | 1932 | CO | 5 | N77261 | 59 | ⋯ | -7 | 3 | IAH | MSY | 305 | 3 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1540 | 1636 | CO | 6 | N78509 | 56 | ⋯ | 11 | 15 | IAH | SAT | 191 | 3 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1523 | 1619 | CO | 33 | N27610 | 56 | ⋯ | 4 | 13 | IAH | MSY | 305 | 1 | 15 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1557 | 1648 | CO | 35 | N27421 | 51 | ⋯ | 31 | 32 | IAH | AUS | 140 | 4 | 17 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1925 | 2132 | CO | 47 | N56859 | 247 | ⋯ | 32 | 15 | IAH | LAX | 1379 | 9 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 748 | 941 | CO | 52 | N57111 | 233 | ⋯ | 10 | 3 | IAH | LAX | 1379 | 10 | 20 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1748 | 1922 | CO | 59 | N76504 | 154 | ⋯ | 5 | 8 | IAH | DEN | 862 | 12 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1209 | 1623 | CO | 60 | N76062 | 194 | ⋯ | -10 | 4 | IAH | EWR | 1400 | 17 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1505 | 1914 | CO | 62 | N14102 | 189 | ⋯ | 17 | 40 | IAH | EWR | 1400 | 13 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1151 | 1625 | CO | 73 | N76065 | 514 | ⋯ | 15 | 6 | IAH | HNL | 3904 | 4 | 18 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 617 | 1026 | CO | 89 | N72405 | 189 | ⋯ | 14 | 17 | IAH | EWR | 1400 | 10 | 21 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 733 | 947 | CO | 92 | N35271 | 254 | ⋯ | -16 | 3 | IAH | SFO | 1635 | 7 | 21 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1053 | 1448 | CO | 106 | N73152 | 175 | ⋯ | -19 | 8 | IAH | EWR | 1400 | 8 | 11 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 836 | 933 | CO | 128 | N72405 | 57 | ⋯ | 55 | 66 | IAH | MSY | 305 | 3 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1456 | 1657 | CO | 137 | N37427 | 241 | ⋯ | 47 | 31 | IAH | LAX | 1379 | 19 | 17 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1414 | 1629 | CO | 146 | N38443 | 135 | ⋯ | 39 | 59 | IAH | ORD | 925 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1829 | 2012 | CO | 150 | N76254 | 223 | ⋯ | 7 | 4 | IAH | ONT | 1334 | 7 | 14 | 0 | | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2011 | 1 | 2 | 7 | 2022 | 2329 | XE | 3036 | N14158 | 127 | ⋯ | 23 | 27 | IAH | CHS | 925 | 5 | 17 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 2004 | 2136 | XE | 3038 | N11119 | 92 | ⋯ | -28 | -6 | IAH | BNA | 657 | 5 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1027 | 1123 | XE | 3041 | N12172 | 56 | ⋯ | 2 | 7 | IAH | CRP | 201 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 2015 | 2302 | XE | 3050 | N11121 | 107 | ⋯ | 18 | 30 | IAH | JAX | 817 | 3 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1218 | 1330 | XE | 3054 | N10156 | 132 | ⋯ | 54 | 53 | IAH | ABQ | 744 | 6 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1302 | 1428 | XE | 3056 | N13949 | 86 | ⋯ | 0 | 2 | IAH | VPS | 528 | 5 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1035 | 1158 | XE | 3060 | N14952 | 83 | ⋯ | 23 | 15 | IAH | OKC | 395 | 4 | 15 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 922 | 1024 | XE | 3068 | N14937 | 62 | ⋯ | -10 | -3 | IAH | HRL | 295 | 3 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1406 | 1729 | XE | 3078 | N21197 | 143 | ⋯ | -12 | 0 | IAH | RIC | 1157 | 4 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1343 | 1643 | XE | 3082 | N12921 | 120 | ⋯ | -6 | -2 | IAH | SDF | 788 | 7 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1020 | 1311 | XE | 3086 | N27962 | 111 | ⋯ | 3 | 5 | IAH | JAX | 817 | 4 | 11 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 927 | 1121 | XE | 3088 | N19966 | 114 | ⋯ | 0 | -3 | IAH | MCI | 643 | 3 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1148 | 1336 | XE | 3092 | N13202 | 108 | ⋯ | -7 | -2 | IAH | MCI | 643 | 3 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1051 | 1355 | XE | 3094 | N18557 | 124 | ⋯ | -1 | -4 | IAH | GSP | 838 | 3 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 717 | 1027 | XE | 3096 | N11194 | 130 | ⋯ | -21 | -8 | IAH | CMH | 986 | 8 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1845 | 2008 | XE | 3101 | N15986 | 83 | ⋯ | -6 | 5 | IAH | MAF | 429 | 3 | 8 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1926 | 2042 | XE | 3105 | N14942 | 76 | ⋯ | -1 | 6 | IAH | LIT | 374 | 4 | 20 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1215 | 1309 | XE | 3106 | N13538 | 54 | ⋯ | 5 | 10 | IAH | BTR | 253 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 2123 | 2219 | XE | 3111 | N14198 | 116 | ⋯ | 1 | 3 | IAH | ELP | 667 | 3 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 957 | 1102 | XE | 3119 | N11193 | 65 | ⋯ | 17 | 27 | IAH | MOB | 427 | 5 | 8 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1314 | 1426 | XE | 3120 | N17928 | 72 | ⋯ | 1 | 4 | IAH | LIT | 374 | 4 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1823 | 1950 | XE | 3127 | N14943 | 87 | ⋯ | -18 | -2 | IAH | LBB | 458 | 5 | 10 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1535 | 1721 | XE | 3129 | N13133 | 106 | ⋯ | -12 | 0 | IAH | STL | 668 | 7 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1657 | 1952 | XE | 3132 | N14993 | 115 | ⋯ | 9 | 12 | IAH | JAX | 817 | 3 | 12 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1030 | 1338 | XE | 3135 | N13997 | 128 | ⋯ | 4 | 0 | IAH | IND | 845 | 9 | 19 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1955 | 2251 | XE | 3137 | N26141 | 116 | ⋯ | -14 | 0 | IAH | LEX | 828 | 6 | 13 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1026 | 1118 | XE | 3138 | N13988 | 52 | ⋯ | -8 | 1 | IAH | SAT | 191 | 3 | 9 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1117 | 1259 | XE | 3152 | N14942 | 102 | ⋯ | 4 | -3 | IAH | AMA | 519 | 8 | 14 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1051 | 1351 | XE | 3155 | N22971 | 120 | ⋯ | -12 | -4 | IAH | SDF | 788 | 7 | 16 | 0 | | 0 | . 2011 | 1 | 2 | 7 | 1526 | 1634 | XE | 3157 | N14143 | 128 | ⋯ | -5 | 1 | IAH | ABQ | 744 | 5 | 9 | 0 | | 0 | . hflights %&gt;% filter(Month==1 &amp; DayofMonth==1) . A data.frame: 552 × 21 YearMonthDayofMonthDayOfWeekDepTimeArrTimeUniqueCarrierFlightNumTailNumActualElapsedTime⋯ArrDelayDepDelayOriginDestDistanceTaxiInTaxiOutCancelledCancellationCodeDiverted . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt;⋯&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;int&gt; . 2011 | 1 | 1 | 6 | 1400 | 1500 | AA | 428 | N576AA | 60 | ⋯ | -10 | 0 | IAH | DFW | 224 | 7 | 13 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 728 | 840 | AA | 460 | N520AA | 72 | ⋯ | 5 | 8 | IAH | DFW | 224 | 6 | 25 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1631 | 1736 | AA | 1121 | N4WVAA | 65 | ⋯ | -9 | 1 | IAH | DFW | 224 | 16 | 12 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1756 | 2112 | AA | 1294 | N3DGAA | 136 | ⋯ | -3 | 1 | IAH | MIA | 964 | 9 | 14 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1012 | 1347 | AA | 1700 | N3DAAA | 155 | ⋯ | 7 | -8 | IAH | MIA | 964 | 12 | 26 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1211 | 1325 | AA | 1820 | N593AA | 74 | ⋯ | 15 | 6 | IAH | DFW | 224 | 6 | 29 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 557 | 906 | AA | 1994 | N3BBAA | 129 | ⋯ | -9 | -3 | IAH | MIA | 964 | 5 | 11 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1824 | 2106 | AS | 731 | N614AS | 282 | ⋯ | -4 | -1 | IAH | SEA | 1874 | 7 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 654 | 1124 | B6 | 620 | N324JB | 210 | ⋯ | 5 | -6 | HOU | JFK | 1428 | 6 | 23 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1639 | 2110 | B6 | 622 | N324JB | 211 | ⋯ | 61 | 54 | HOU | JFK | 1428 | 12 | 11 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 942 | 1356 | CO | 1 | N69063 | 494 | ⋯ | 6 | 17 | IAH | HNL | 3904 | 5 | 23 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1845 | 1947 | CO | 5 | N29717 | 62 | ⋯ | 13 | 15 | IAH | MSY | 305 | 3 | 16 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1533 | 1634 | CO | 6 | N47414 | 61 | ⋯ | 14 | 8 | IAH | SAT | 191 | 5 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1459 | 1602 | CO | 33 | N62631 | 63 | ⋯ | 19 | 18 | IAH | MSY | 305 | 2 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1551 | 1650 | CO | 35 | N14653 | 59 | ⋯ | 23 | 16 | IAH | AUS | 140 | 5 | 24 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1923 | 2115 | CO | 47 | N74856 | 232 | ⋯ | 15 | 13 | IAH | LAX | 1379 | 13 | 28 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 748 | 946 | CO | 52 | N19130 | 238 | ⋯ | 20 | 3 | IAH | LAX | 1379 | 16 | 17 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1807 | 1939 | CO | 59 | N35204 | 152 | ⋯ | 27 | 27 | IAH | DEN | 862 | 7 | 15 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1218 | 1623 | CO | 60 | N67157 | 185 | ⋯ | -2 | 13 | IAH | EWR | 1400 | 8 | 15 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1446 | 1906 | CO | 62 | N26123 | 200 | ⋯ | 17 | 21 | IAH | EWR | 1400 | 9 | 28 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1145 | 1612 | CO | 73 | N76065 | 507 | ⋯ | 2 | 0 | IAH | HNL | 3904 | 4 | 17 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1447 | 1925 | CO | 77 | N76062 | 518 | ⋯ | 35 | 22 | IAH | HNL | 3904 | 8 | 22 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 558 | 1006 | CO | 89 | N73406 | 188 | ⋯ | -6 | -2 | IAH | EWR | 1400 | 7 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1049 | 1458 | CO | 106 | N68159 | 189 | ⋯ | -9 | 4 | IAH | EWR | 1400 | 11 | 16 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1428 | 1608 | CO | 137 | N39415 | 220 | ⋯ | -2 | 3 | IAH | LAX | 1379 | 5 | 15 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1322 | 1552 | CO | 146 | N72405 | 150 | ⋯ | 2 | 7 | IAH | ORD | 925 | 9 | 24 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1933 | 2106 | CO | 150 | N78506 | 213 | ⋯ | 49 | 51 | IAH | ONT | 1334 | 5 | 22 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 935 | 1214 | CO | 170 | N56859 | 279 | ⋯ | 59 | 35 | IAH | SFO | 1635 | 6 | 22 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1927 | 2256 | CO | 190 | N33209 | 149 | ⋯ | 33 | 22 | IAH | MIA | 964 | 4 | 27 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 850 | 1025 | CO | 195 | N24729 | 215 | ⋯ | 5 | 15 | IAH | LAX | 1379 | 6 | 14 | 0 | | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋱ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2011 | 1 | 1 | 6 | 1118 | 1221 | XE | 3041 | N12142 | 63 | ⋯ | 60 | 58 | IAH | CRP | 201 | 3 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1956 | 2247 | XE | 3050 | N14203 | 111 | ⋯ | 8 | 11 | IAH | JAX | 817 | 5 | 12 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1642 | 1728 | XE | 3053 | N17928 | 46 | ⋯ | 40 | 57 | IAH | SHV | 192 | 8 | 9 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1126 | 1306 | XE | 3054 | N21154 | 160 | ⋯ | 30 | 1 | IAH | ABQ | 744 | 4 | 16 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1257 | 1430 | XE | 3056 | N14993 | 93 | ⋯ | 7 | -3 | IAH | VPS | 528 | 8 | 15 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1013 | 1124 | XE | 3060 | N18556 | 71 | ⋯ | -11 | -7 | IAH | OKC | 395 | 3 | 12 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1806 | 1854 | XE | 3071 | N13997 | 48 | ⋯ | 19 | 36 | IAH | AEX | 190 | 5 | 13 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1828 | 1934 | XE | 3078 | N14998 | 126 | ⋯ | 8 | 3 | IAH | ELP | 667 | 2 | 18 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1356 | 1648 | XE | 3082 | N18556 | 112 | ⋯ | -13 | -4 | IAH | SDF | 788 | 6 | 12 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 849 | 1103 | XE | 3083 | N14902 | 134 | ⋯ | 52 | 64 | IAH | MKE | 984 | 4 | 16 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1017 | 1324 | XE | 3086 | N17115 | 127 | ⋯ | 16 | 2 | IAH | JAX | 817 | 4 | 23 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1438 | 1601 | XE | 3087 | N11193 | 83 | ⋯ | -3 | -5 | IAH | TUL | 429 | 5 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 942 | 1136 | XE | 3088 | N13979 | 114 | ⋯ | 15 | 12 | IAH | MCI | 643 | 4 | 25 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1223 | 1710 | XE | 3092 | N11181 | NA | ⋯ | NA | 33 | IAH | MCI | 643 | 6 | 16 | 0 | | 1 | . 2011 | 1 | 1 | 6 | 1055 | 1414 | XE | 3094 | N12552 | 139 | ⋯ | 18 | 0 | IAH | GSP | 838 | 5 | 31 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1041 | 1413 | XE | 3101 | N17108 | 152 | ⋯ | 10 | 1 | IAH | CMH | 986 | 13 | 22 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 934 | 1049 | XE | 3103 | N16976 | 75 | ⋯ | 24 | 14 | IAH | DFW | 224 | 5 | 28 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1916 | 2029 | XE | 3105 | N14930 | 73 | ⋯ | -9 | -4 | IAH | LIT | 374 | 4 | 17 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 858 | 1043 | XE | 3108 | N41104 | 105 | ⋯ | -18 | -2 | IAH | STL | 668 | 3 | 20 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 2131 | 2235 | XE | 3111 | N12195 | 124 | ⋯ | 22 | 11 | IAH | ELP | 667 | 4 | 14 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1256 | 1404 | XE | 3120 | N14943 | 68 | ⋯ | -6 | -4 | IAH | LIT | 374 | 5 | 14 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1822 | 1959 | XE | 3127 | N14943 | 97 | ⋯ | -4 | -3 | IAH | LBB | 458 | 5 | 22 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1533 | 1718 | XE | 3129 | N41104 | 105 | ⋯ | -10 | -2 | IAH | STL | 668 | 5 | 17 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1645 | 1941 | XE | 3132 | N22971 | 116 | ⋯ | 3 | 0 | IAH | JAX | 817 | 4 | 13 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1032 | 1335 | XE | 3135 | N13958 | 123 | ⋯ | 1 | 2 | IAH | IND | 845 | 4 | 21 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 2030 | 2325 | XE | 3137 | N27190 | 115 | ⋯ | 25 | 35 | IAH | LEX | 828 | 7 | 12 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1024 | 1133 | XE | 3138 | N14977 | 69 | ⋯ | 7 | -1 | IAH | SAT | 191 | 4 | 26 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1120 | 1254 | XE | 3152 | N14945 | 94 | ⋯ | -1 | 0 | IAH | AMA | 519 | 4 | 11 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1052 | 1346 | XE | 3155 | N27962 | 114 | ⋯ | -17 | -3 | IAH | SDF | 788 | 5 | 15 | 0 | | 0 | . 2011 | 1 | 1 | 6 | 1436 | 1548 | XE | 3157 | N17196 | 132 | ⋯ | -1 | -4 | IAH | ABQ | 744 | 3 | 13 | 0 | | 0 | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/13/r.html",
            "relUrl": "/2022/02/13/r.html",
            "date": " • Feb 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "여러가지 형태의 시각화",
            "content": "data = c(31214,13234,5435,11136,14116,7111,2575,37486) # 칼럼명 지정 names(data)=c(&#39;1&#39;,&#39;20&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;) # 자료구조 보기 str(data) . Named num [1:8] 31214 13234 5435 11136 14116 ... - attr(*, &#34;names&#34;)= chr [1:8] &#34;1&#34; &#34;20&#34; &#34;3&#34; &#34;4&#34; ... . par(mfrow = c(1,1)) dotchart(data, color = c(&#39;blue&#39;,&#39;red&#39;),lcolor = &#39;black&#39;, pch = 1:2, labels = names(data), xlab = &#39;매출액&#39;, main = &#39;분기별 판매현황 : 점차트 시각화&#39;, cex = 1.2) # lcolor = 구분선 색상 지정 # pch = 점 모양 # labels = 점에 대한 레이블 표시 # cex =character expansion 확대 . 원형 차트 시각화 | . par(mfrow = c(1,1)) pie(data, labels = names(data), col = rainbow(8),cex=3) title(&#39;2018~2019년도 분기별 매출 현황&#39;) # clockwise를 TRUE 설정해주면 시계방향으로 데이터를 표시한다. 기본값은 FALSE이다. . 연속 변수 시각화(시간, 길이 등과 같이 연속성을 가진 변수) 상자 그래프, 히스토그램, 산점도 등으로 시각화하면 효과적이다. | . | . 1) 상자 그래프 시각화 요약 정보를 시각화하는 데 효과적이다. 특히 데이터의 분포 정도와 이상치 발견을 목적으로 하는 경우 유용하게 사용된다. | . | . boxplot(VADeaths, range = 0) # range = 0 속성은 최소값과 최대값을 점선으로 연결 . boxplot(VADeaths, range = 0, notch = T) # notch = T 속성에 의해서 중위수 비교할 수 있음 abline(h=37,lty=3,col=&#39;red&#39;) . Warning message in bxp(list(stats = structure(c(11.7, 18.1, 26.9, 41, 66, 8.7, 11.7, : &#34;some notches went outside hinges (&#39;box&#39;): maybe set notch=FALSE&#34; . 2) 히스토그램 시각화 측정값의 범위(구간)를 그래프의 x축으로 놓고, 범위에 속하는 측정값의 출현 빈도수를 y축으로 나타낸 그래프 형태를 히스토그램이라고 한다. 여기서 도수의 값을 선으로 연결하면 곡선이 이어지는데, 이것을 분포곡선이라 한다. | . | . data(iris) # iris 데이터 셋을 메모리로 가져오기 names(iris) # iris 칼럼명 보기 cat(&#39; n&#39;) str(iris) # iris 데이터 구조 보기 . &lt;ol class=list-inline&gt;&#39;Sepal.Length&#39; | &#39;Sepal.Width&#39; | &#39;Petal.Length&#39; | &#39;Petal.Width&#39; | &#39;Species&#39; | &lt;/ol&gt; &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &#34;setosa&#34;,&#34;versicolor&#34;,..: 1 1 1 1 1 1 1 1 1 1 ... . summary(iris$Sepal.Length) . Min. 1st Qu. Median Mean 3rd Qu. Max. 4.300 5.100 5.800 5.843 6.400 7.900 . hist(iris$Sepal.Length, xlab = &#39;iris의 Sepal length&#39;,xlim = c(4,8), col=&#39;magenta&#39;,main = &#39;iris 꽃받침 길이 Histogram&#39;) . summary(iris$Sepal.Width) hist(iris$Sepal.Width, xlab=&#39;iris$Sepal.Width&#39;,col=&#39;mistyrose&#39;,main=&#39;iris 꽃받침 넓이 Histogram&#39;, xlim = c(2,4.5)) . Min. 1st Qu. Median Mean 3rd Qu. Max. 2.000 2.800 3.000 3.057 3.300 4.400 . 히스토그램에서 빈도와 밀도 표현하기 | . par(mfrow=c(1,2)) # 빈도수에 의해서 히스토그램 그리기 hist(iris$Sepal.Width,xlab=&#39;iris$Sepal.Width&#39;,col=&#39;green&#39;,main=&#39;iris 꽃받침 너비 Histogram 빈도수&#39;,xlim = c(2,4.5)) # 확률 밀도에 의해서 히스토그램 그리기 hist(iris$Sepal.Width, xlab = &#39;iris$Sepal.Width&#39;,col=&#39;mistyrose&#39;, freq=F, main = &#39;iris 꽃받침너비 Histogram: 확률밀도&#39;,xlim=c(2,4.5)) # freq=F : 계급에 대한 밀도를 y축으로 표현하게 해준다. 잘보면 왼쪽 그래프와 y축 분포가 상이한 것을 알 수 있다. # 밀도를 기준으로 ,line추가 lines(density(iris$Sepal.Width),col=&#39;red&#39;) . 정규분포 추정 곡선 나타내기 | . par(mfrow=c(1,1)) hist(iris$Sepal.Width,xlab=&#39;iris$Sepal.Width&#39;,col=&#39;mistyrose&#39;,freq=F,main=&#39;iris 꽃받침 너비 Histogram&#39;,xlim=c(2,4.5)) # 히스토그램에 밀도를 기준으로 분포곡선 추가 lines(density(iris$Sepal.Width),col=&#39;red&#39;) # 히스토그램에 정규분포 추정 곡선 추가 x=seq(2,4.5,.1) curve(dnorm(x,mean=mean(iris$Sepal.Width),sd=sd(iris$Sepal.Width)),col=&#39;blue&#39;,add=T) . 3) 산점도 시각화 두 개 이상의 변수들 사이의 분포를 점으로 표시한 차트를 의미한다. | 두 변수의 관계를 시각적으로 분석할 떄 유용 | . | . price=runif(10,min=1,max=100) plot(price,col=&#39;red&#39;) par(new=T) # 새로운 차트 추가 line_chart =1:100 # 대각선 추가 : &#39;axes = F&#39; 속성과 &#39;ann=F&#39; 속성 사용 # x축과 y축의 눈금과 축 이름 제거 plot(line_chart, type = &#39;l&#39;, col=&#39;red&#39;,axes=F, ann=F) # 텍스트 추가 text(80,80,&#39;대각선 추가&#39;,col=&#39;blue&#39;,cex=2) . par(mfrow=c(2,2)) plot(price, type=&#39;l&#39;) plot(price, type=&#39;o&#39;) plot(price, type=&#39;h&#39;) plot(price, type=&#39;s&#39;) . par(mfrow=c(2,2)) plot(price, type=&#39;o&#39;,pch=5) plot(price, type=&#39;o&#39;,pch=15) plot(price, type=&#39;o&#39;,pch=20,col=&#39;blue&#39;) plot(price, type=&#39;o&#39;,pch=20,col=&#39;orange&#39;,cex=5) . par(mfrow=c(1,1)) plot(price, type=&#39;o&#39;,pch=20,col=&#39;green&#39;,cex=2,lwd=3) . . 중첩 자료 시각화 2차원의 산점도 그래프는 x축과 y축의 교차점에 점을 나타내는 원리로 그려진다. 만약 x축과 y축의 동일한 좌표값을 갖는 여러 개의 자료가 존재한다면 점이 중첩되어서 해당 좌표에는 하나의 점으로만 표시된다. 이렇게 중첩된 자료를 중첩된 자료의 수 만큼 점의 크기를 확대하여 시각화해보자 | . | . x=c(1,2,3,4,2,4) y=rep(2,6) table(x,y) # 교차 테이블 작성 . y x 2 1 1 2 2 3 1 4 2 . table = 1,1개/2,2개/3,1개/4,2개 | table = 2만 있는데, x의 1과는 1개, x의 2와는 2개 ... 이런식으로 겹친다. | . plot(x,y) . x=2,x=4에서 겹치기 때문에 점이 6개가 아니라 4개만 출력된다. | . xy.df = as.data.frame(table(x,y)) xy.df # as.data.frame 함수를 이용하여 교차테이블의 결과를 데이터프레임으로 변환하여 세 개의 칼럼이 생성된다. # x 벡터 원소는 x 칼럼으로 y 벡터 원소는 y 칼럼으로 x와 y 벡터의 중복되는 수는 Freq 칼럼으로 만들어진다. . A data.frame: 4 × 3 xyFreq . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 1 | 2 | 1 | . 2 | 2 | 2 | . 3 | 2 | 1 | . 4 | 2 | 2 | . plot(x,y,pch=&#39;@&#39;,col=rainbow(3),cex=1.8*xy.df$Freq,xlab=&#39;x 벡터 원소&#39;, ylab=&#39;y 벡터 원소&#39;) # pch = 점의 모양 # cex = 점의 크기 확대 . . library(UsingR) data(galton) . galtonData=as.data.frame(table(galton$child,galton$parent)) head(galtonData) . A data.frame: 6 × 3 Var1Var2Freq . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 161.7 | 64 | 1 | . 262.2 | 64 | 0 | . 363.2 | 64 | 2 | . 464.2 | 64 | 4 | . 565.2 | 64 | 1 | . 666.2 | 64 | 2 | . names(galtonData)=c(&#39;child&#39;,&#39;parent&#39;,&#39;freq&#39;) head(galtonData) mode(galtonData) class(galtonData) str(galtonData) # 데이터 프레임을 산점도로 시각화하기 위해서는 데이터프레임에서 parent 칼럼과 child 칼럼을 numeric() 함수를 이용하여 # 연산이 가능한 숫자형으로 변환하여 추출해야한다. # str 부분을 보면 childdhk parent부분이 3개의 변수형으로 이루어진 것을 알 수 있고 각각 freq제외하곤 Factor형으로 # 되어 있는 것을 알 수 있다. 따라서 numeric으로 변경하여 연산할 수 있게 해주어야 한다. parent = as.numeric(galtonData$parent) child = as.numeric(galtonData$child) . A data.frame: 6 × 3 childparentfreq . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 161.7 | 64 | 1 | . 262.2 | 64 | 0 | . 363.2 | 64 | 2 | . 464.2 | 64 | 4 | . 565.2 | 64 | 1 | . 666.2 | 64 | 2 | . &#39;list&#39; &#39;data.frame&#39; &#39;data.frame&#39;: 154 obs. of 3 variables: $ child : Factor w/ 14 levels &#34;61.7&#34;,&#34;62.2&#34;,..: 1 2 3 4 5 6 7 8 9 10 ... $ parent: Factor w/ 11 levels &#34;64&#34;,&#34;64.5&#34;,&#34;65.5&#34;,..: 1 1 1 1 1 1 1 1 1 1 ... $ freq : int 1 0 2 4 1 2 2 1 1 0 ... . plot(parent,child,pch=21,col=&#39;red&#39;,lwd=5,bg=&#39;mistyrose&#39;,cex=.2*galtonData$freq,xlab=&#39;parent&#39;,ylab=&#39;child&#39;) # cex 중복수에 .2를 곱하여 좌표 평면상에 가중치가 적용된 형태로 점을 확대하여 나타낼 수 있게 해준다. .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/12/r.html",
            "relUrl": "/2022/02/12/r.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "주요 내장함수, data visualization",
            "content": "기술통계량 처리 관련 내장함수 전체 자료를 대표하는 대표값, 중심에 얼마나 떨어졌는가를 나타내는 산포도 등을 나타내는 기술통계량 처리 관련 내장함수에 대해 알아보자 | . | . 단계1) 데이터 셋 불러오기 . library(RSADBE) # 패키지를 메모리에 로드 data(&#39;Bug_Metrics_Software&#39;) # RSADBE 패키지에서 제공하는 데이터 셋 불러오기 Bug_Metrics_Software[,,1] # 전체 자료 보기 # [,,] -&gt; 행열면을 의미하며 [,,1]이 의미하는 건 1면을 보겠다는 것이다. . Bugs Software Bugs NT.Bugs Major Critical H.Priority JDT 11605 10119 1135 432 459 PDE 5803 4191 362 100 96 Equinox 325 1393 156 71 14 Lucene 1714 1714 0 0 0 Mylyn 14577 6806 592 235 8804 . 단계2) 행 단위 합계와 평균 구하기 . rowSums(Bug_Metrics_Software[,,1]) # 소프트웨어 별 버그 수 합계 . &lt;dl class=dl-inline&gt;JDT23750PDE10552Equinox1959Lucene3428Mylyn31014&lt;/dl&gt; rowMeans(Bug_Metrics_Software[,,1]) # 소프트웨어 별 버그 수 평균 . &lt;dl class=dl-inline&gt;JDT4750PDE2110.4Equinox391.8Lucene685.6Mylyn6202.8&lt;/dl&gt; 단계3) 열 단위 합계와 평균 구하기 . colSums(Bug_Metrics_Software[,,1]) # 버그 종류별 버그 수 합계 . &lt;dl class=dl-inline&gt;Bugs34024NT.Bugs24223Major2245Critical838H.Priority9373&lt;/dl&gt; colSums(Bug_Metrics_Software[,,1]) # 버그 종류별 버그 수 평균 . &lt;dl class=dl-inline&gt;Bugs34024NT.Bugs24223Major2245Critical838H.Priority9373&lt;/dl&gt; 기술통계량 관련 내장함수 | . seq(-2,2,by=.2) # -2~2범위에서 0.2씩 증가 . &lt;ol class=list-inline&gt;-2 | -1.8 | -1.6 | -1.4 | -1.2 | -1 | -0.8 | -0.6 | -0.4 | -0.2 | 0 | 0.2 | 0.4 | 0.6 | 0.8 | 1 | 1.2 | 1.4 | 1.6 | 1.8 | 2 | &lt;/ol&gt; vec=1:10 min(vec) max(vec) range(vec) # 범위 mean(vec) median(vec) # 중위수 sum(vec) sd(rnorm(10)) # 정규분포 자료 10개를 무작위 추출하여 이를 대상으로 표준편차(standard deviation) 구하기 var(rnorm(10)) # 정규분포 자료 10개를 무작위 추출하여 이를 대상으로 분산(variance) 구하기 table(vec) # 벡터 자료 대상으로 빈도수 구하기 . 1 10 &lt;ol class=list-inline&gt;1 | 10 | &lt;/ol&gt; 5.5 5.5 55 1.03662256445267 0.499229273025413 vec 1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1 . . 난수를 발생하는 함수와 확률 분포의 관계를 알아보자 | 정규분포(연속형)의 난수 생성 | . rnorm(10,0,1) # 개수, 평균, 표준편차(standard deviation) . &lt;ol class=list-inline&gt;-0.587899193447361 | 0.105663589463193 | 0.754980766904111 | 1.18324340871246 | 0.938404987026827 | -0.258727216372821 | -0.630778323800865 | -1.2854416417066 | -0.486353442348488 | -0.115155298710146 | &lt;/ol&gt; hist(rnorm(10000,0,1)) . 균등분포(연속형)의 난수 생성 | . runif(10,0,1) # 개수, 최소값, 최대값 . &lt;ol class=list-inline&gt;0.905393289169297 | 0.692594053223729 | 0.513968185754493 | 0.679906442528591 | 0.857219050405547 | 0.37504345132038 | 0.0806612875312567 | 0.186369446571916 | 0.199321727268398 | 0.202069519087672 | &lt;/ol&gt; hist(runif(10000,0,1)) . 0&lt;n&lt;1 사이의 범위에서 난수를 발생한다. 난수를 히스토그램으로 그려보면 계급에 따라서 빈도가 균등한 분포로 그려진다. | . 이항분포(이산형)의 난수 생성 이항분포는 정규분포와 같은 이상적인 분포형을 갖지만 연속형이 아닌 이산변량을 갖는다. | . | . rbinom(20,1,1/2) # 주사위를 1번 던지는 시행인데 앞면이 나오는 사건이 확률변수 x인 확률 분포에서 임의로 20개의 데이터를 추출한다. rbinom(20,2,1/3) # 주사위를 2번 던지는 시행인데 앞면이 나오는 사건이 확률변수 x인 확률 분포에서 임의로 20개의 데이터를 추출한다. rbinom(100,5,0.9) # 주사위를 5번 던지는 시행인데 앞면이 나오는 사건이 확률변수 x인 확률 분포에서 임의로 100개의 데이터를 추출한다. rbinom(100,3,0.9) # 주사위를 3번 던지는 시행인데 앞면이 나오는 사건이 확률변수 x인 확률 분포에서 임의로 100개의 데이터를 추출한다. rbinom(100,10,0.1) # . &lt;ol class=list-inline&gt;1 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 1 | &lt;/ol&gt; &lt;ol class=list-inline&gt;0 | 1 | 0 | 1 | 1 | 1 | 2 | 1 | 1 | 0 | 2 | 0 | 0 | 0 | 0 | 1 | 1 | 2 | 1 | 0 | &lt;/ol&gt; &lt;ol class=list-inline&gt;4 | 5 | 5 | 5 | 5 | 5 | 5 | 4 | 5 | 5 | 5 | 4 | 5 | 4 | 5 | 3 | 4 | 4 | 4 | 4 | 5 | 5 | 3 | 5 | 5 | 5 | 5 | 4 | 4 | 5 | 5 | 4 | 5 | 3 | 5 | 5 | 5 | 4 | 5 | 5 | 4 | 5 | 5 | 5 | 4 | 5 | 5 | 4 | 5 | 3 | 4 | 2 | 4 | 5 | 4 | 4 | 5 | 5 | 5 | 5 | 5 | 5 | 4 | 5 | 4 | 5 | 5 | 4 | 3 | 5 | 4 | 4 | 4 | 5 | 4 | 4 | 4 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 5 | 4 | 5 | 5 | 3 | 5 | 4 | 5 | 5 | 4 | 5 | 4 | 5 | 5 | 5 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;2 | 3 | 3 | 3 | 3 | 2 | 3 | 2 | 3 | 3 | 3 | 3 | 2 | 2 | 3 | 3 | 3 | 2 | 3 | 2 | 3 | 3 | 3 | 3 | 3 | 2 | 2 | 3 | 2 | 1 | 1 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 1 | 3 | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 1 | 3 | 3 | 2 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 3 | 3 | 3 | 1 | 3 | 3 | 1 | 2 | 2 | 1 | 2 | 3 | 3 | 3 | 1 | 3 | 3 | 3 | 2 | 2 | 3 | 3 | 3 | 3 | 3 | 3 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 1 | 2 | 1 | 0 | 0 | 0 | 1 | 2 | 0 | 1 | 2 | 3 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 2 | 0 | 0 | 2 | 3 | 1 | 1 | 0 | 3 | 3 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 3 | 0 | 0 | 0 | 1 | 0 | 4 | 0 | 0 | 2 | 2 | 0 | 0 | 2 | 1 | 0 | 0 | 1 | 3 | 1 | 1 | 0 | 2 | 1 | 0 | 2 | 2 | 0 | 1 | 2 | 0 | 2 | 1 | 1 | 1 | 1 | 2 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 2 | 2 | 0 | 1 | &lt;/ol&gt; 종자값으로 동일한 난수 생성 | . set.seed(1234) # 1234는 다른 임의의 정수로 대체 가능하다. rnorm(10,2,3) . &lt;ol class=list-inline&gt;-1.62119724815626 | 2.83228772633198 | 5.25332353004917 | -5.03709310788805 | 3.28737406643315 | 3.51816767647272 | 0.275780119596054 | 0.360104432647439 | 0.306644002720151 | -0.670113487132311 | &lt;/ol&gt; 그런데 위 셀처럼 한 셀안에 넣어준 후 실행시켜주어야 한다. | 다른 셀에서 각각 실행하면 동일한 난수가 생성되지 않는다. | . . 수학 관련 내장함수 | . vec=1:10 prod(vec) # factorial과 유사함 factorial(vec) factorial(vec)[10] factorial(5) abs(-12) sqrt(121) cumsum(vec) # 벡터 값에 대한 누적 합 log(exp(1)) # 밑이 자연상수 e log2(2) # 밑이 2 log10(10) # 밑이 10 . 3628800 &lt;ol class=list-inline&gt;1 | 2 | 6 | 24 | 120 | 720 | 5040 | 40320 | 362880 | 3628800 | &lt;/ol&gt; 3628800 120 12 11 &lt;ol class=list-inline&gt;1 | 3 | 6 | 10 | 15 | 21 | 28 | 36 | 45 | 55 | &lt;/ol&gt; 1 1 1 . 행렬연산 관련 내장함수 | . x=matrix(1:9,nrow=3,ncol=3,byrow=T) y=matrix(1:3) . ncol(x) nrow(y) . 3 3 x . A matrix: 3 × 3 of type int 1 | 2 | 3 | . 4 | 5 | 6 | . 7 | 8 | 9 | . t(x) . A matrix: 3 × 3 of type int 1 | 4 | 7 | . 2 | 5 | 8 | . 3 | 6 | 9 | . cbind(x,1:3) . A matrix: 3 × 4 of type int 1 | 2 | 3 | 1 | . 4 | 5 | 6 | 2 | . 7 | 8 | 9 | 3 | . rbind(x,1:3) . A matrix: 4 × 3 of type int 1 | 2 | 3 | . 4 | 5 | 6 | . 7 | 8 | 9 | . 1 | 2 | 3 | . diag(x) . &lt;ol class=list-inline&gt;1 | 5 | 9 | &lt;/ol&gt; det(x) . -6.66133814775094e-16 apply(x,1,sum) # 행에 대해 접근 apply(x,2,sum) # 열에 대해 접근 . &lt;ol class=list-inline&gt;6 | 15 | 24 | &lt;/ol&gt; &lt;ol class=list-inline&gt;12 | 15 | 18 | &lt;/ol&gt; svd(x) . $d &lt;ol class=list-inline&gt;16.8481033526142 | 1.06836951455471 | 1.40266540432574e-16 | &lt;/ol&gt; $u A matrix: 3 × 3 of type dbl -0.2148372 | 0.8872307 | 0.4082483 | . -0.5205874 | 0.2496440 | -0.8164966 | . -0.8263375 | -0.3879428 | 0.4082483 | . $v A matrix: 3 × 3 of type dbl -0.4796712 | -0.77669099 | 0.4082483 | . -0.5723678 | -0.07568647 | -0.8164966 | . -0.6650644 | 0.62531805 | 0.4082483 | . eigen(x) . eigen() decomposition $values [1] 1.611684e+01 -1.116844e+00 -9.759185e-16 $vectors [,1] [,2] [,3] [1,] -0.2319707 -0.78583024 0.4082483 [2,] -0.5253221 -0.08675134 -0.8164966 [3,] -0.8186735 0.61232756 0.4082483 . x%*%y . A matrix: 3 × 1 of type dbl 14 | . 32 | . 50 | . | 파이썬에서는 위와같이 해결할 수 있었음 | . . 집합연산 관련 내장함수 | . x=seq(1,9,2) y=c(3,7) . union(x,y) . &lt;ol class=list-inline&gt;1 | 3 | 5 | 7 | 9 | &lt;/ol&gt; setequal(x,y) . FALSE intersect(x,y) . &lt;ol class=list-inline&gt;3 | 7 | &lt;/ol&gt; setdiff(x,y) # y-x 차집합인데 결과는 공집합이므로 아무것도 출력되지 않는다. setdiff(y,x) . &lt;ol class=list-inline&gt;1 | 5 | 9 | &lt;/ol&gt; 5%in%y . FALSE . 데이터 시각화 이산변수와 연속변수에 따라서 이용될 수 있는 도구가 달라진다. 이산변수는 막대, 점, 원형 차트를 주로 이용하고 연속변수는 상자 박스, 히스토그램, 산점도 등을 이용한다. | . | . 이산변수 시각화 이산변수는 정수 단위로 나누어 측정할 수 있는 변수를 의미한다. 이러한 변수들은 막대 ㅁ차트, 점 차트, 원 차트 등을 이용하여 데이터를 시각화하면 효과적이다. | . | . 막대 차트 시각화 barplot() 함수를 이용하여 세로 막대 차트와 가로 막대 차트를 그릴 수 있다. | 기본적으로 세로 막대 차트를 제공한다. | . | . data = c(31214,13234,5435,11136,14116,7111,2575,37486) # 칼럼명 지정 names(data)=c(&#39;1&#39;,&#39;20&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;) # 자료구조 보기 str(data) . Named num [1:8] 31214 13234 5435 11136 14116 ... - attr(*, &#34;names&#34;)= chr [1:8] &#34;1&#34; &#34;20&#34; &#34;3&#34; &#34;4&#34; ... . data . &lt;dl class=dl-inline&gt;1312142013234354354111365141166711172575837486&lt;/dl&gt; 세로 막대 차트 그리기 | . barplot(data,ylim=c(0,100000),col=rainbow(9),main = &#39;nothing&#39;) # col은 각 막대를 나타낼 색상을 지정해준다. # main은 barplot의 제목이다 . # 를 통해서 사용법을 알 수 있다. . 막대 차트의 가로축과 세로축에 레이블 추가 | . barplot(data,ylim=c(0,100000),col=rainbow(2),main = &#39;nothing&#39; ,ylab=&#39;asdaf&#39;,xlab=&#39;asdafg&#39;) . 가로 막대 차트 horiz=T 속성을 추가해주면 된다 | 주의해야 할 것은 그래프가 가로이기 때문에 y축의 범위를 지정해주면 안 되고 x축의 범위를 지정해주어야 한다. | 그에 따라 x축과 y축의 라벨로 반대로 바꿔주어야 할 것이다 | . | . barplot(data,xlim=c(0,100000),col=rainbow(8),main = &#39;nothing&#39; ,ylab=&#39;asdafg&#39;,xlab=&#39;asdaf&#39;,horiz=T) . 막대와 막대 사이의 간격을 조정하고, 축 이름의 크기를 지정 | . barplot(data,xlim=c(0,100000),col=rainbow(8),main = &#39;nothing&#39; ,ylab=&#39;asdaf&#39;,xlab=&#39;asdafg&#39;,horiz=T, space = 0.7, cex.names=2) # space = 막대와 막대 사이의 간격, 간격이 넓어질수록 막대의 굵기는 얇아질 것이다. # cex.names = 축 이름의 크기 지정 . 막대 차트에서 막대의 색상 지정하기 특정 막대들을 골라서 3회 반복해보자 | . | . barplot(data,xlim=c(0,100000),main = &#39;nothing&#39; ,ylab=&#39;asdaf&#39;,xlab=&#39;asdafg&#39;,horiz=T, space = 0.7, cex.names=2, col=rep(c(&#39;red&#39;,&#39;green&#39;),2)) . 해당 그래프는 바로 위 데이터와 데이터 전체적 분포는 다를바없지만 그냥 색깔만 왔다갔다 할 수 있도록 설정해준 것이다. | 혹은 아래와 같이 할 수도 있다. | . barplot(data,xlim=c(0,100000),main = &#39;nothing&#39; ,ylab=&#39;asdaf&#39;,xlab=&#39;asdafg&#39;,horiz=T, space = 0.7, cex.names=2, col=rep(c(2,4),4)) . 1~7까지이며, 검빨초파하자노 순이다. | . . 누적 막대 차트 하나의 칼럼에 여러 개의 자료를 가지고 있는 경우 자료를 개별적인 막대로 표현하거나 누적 형태로 표현할 수 있다. | 무슨 말인지 직관적으로 이해되지 않으니 주어지는 dataset과 그에 따른 막대 차트를 그려보자 | . | . data(VADeaths) VADeaths . A matrix: 5 × 4 of type dbl Rural MaleRural FemaleUrban MaleUrban Female . 50-5411.7 | 8.7 | 15.4 | 8.4 | . 55-5918.1 | 11.7 | 24.3 | 13.6 | . 60-6426.9 | 20.3 | 37.0 | 19.3 | . 65-6941.0 | 30.9 | 54.6 | 35.1 | . 70-7466.0 | 54.3 | 71.1 | 50.0 | . dataset 구조 살펴보자 | . str(VADeaths) . num [1:5, 1:4] 11.7 18.1 26.9 41 66 8.7 11.7 20.3 30.9 54.3 ... - attr(*, &#34;dimnames&#34;)=List of 2 ..$ : chr [1:5] &#34;50-54&#34; &#34;55-59&#34; &#34;60-64&#34; &#34;65-69&#34; ... ..$ : chr [1:4] &#34;Rural Male&#34; &#34;Rural Female&#34; &#34;Urban Male&#34; &#34;Urban Female&#34; . mode(VADeaths) . &#39;numeric&#39; 하나의 칼럼에 여러 개의 자료를 가지고 있는 경우 자료를 개별적인 막대 혹은 누적 형태로 표현하기 위해서는 기존의 barplot() 함수에서 추가로 사용할 속성이 있다. | . # 파이썬에서 fig,(ax1,ax2) = plt.subplots(1,2)와 유사한 기능같다. par(mfrow = c(1,2)) # 우선 개별 차트 그려보자 barplot(VADeaths, beside=T, col=rainbow(5),main = &#39;미국 버지니아주 하위계층 사망 비율&#39;) legend(19,71,c(&#39;50~54&#39;,&#39;55~59&#39;,&#39;60~64&#39;,&#39;65~69&#39;,&#39;70~74&#39;), cex = .8, fill = rainbow(5)) # beside = x축 값을 측면으로 배열, F로 설정해주면 하나의 막대에 누적해주는 것이다. # legent = 도화지의 19,71위치쯤에 무지개색으로 5개의 범례를 표시해준다. # 이제 누적 차트를 그려보자 barplot(VADeaths, beside=F, col=rainbow(5),main = &#39;미국 버지니아주 하위계층 사망 비율&#39;) legend(3.8,200,c(&#39;50~54&#39;,&#39;55~59&#39;,&#39;60~64&#39;,&#39;65~69&#39;,&#39;70~74&#39;), cex = .8, fill = rainbow(5)) # 혹은 각 그래프의 제목을 표시해줄때, barplot안에 안 넣고 따로 # title(main = &#39;제목명&#39;, font.main=4) 이렇게 설정해줘도 된다. 이때 font.maind은 차트 제목의 글꼴 유형을 지정하는 역할을 해준다. .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/11/r.html",
            "relUrl": "/2022/02/11/r.html",
            "date": " • Feb 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "연산자, 조건문, 반복문, 함수, 몬테카를로 함수",
            "content": "산술연산자 | . 5/2 . 2.5 5%%2 . 1 5^2 5**2 . 25 25 파이썬에서는...5//2 =&gt; 몫 5%2 =&gt; 나머지 5**2 =&gt; 제곱 . | . 100^20 . 1e+40 1e+40 =&gt; 1뒤에 40개의 0이 있다는 표현으로 아주 큰 값을 표기해야 하는 경우 | . . 관계연산자는 파이썬과 동일하다 ==,!=,&lt;,&gt;,&lt;=,&gt;= | . | . . 논리연산자 산술연산자와 관계연산자를 이용한 논리식이 참이면 TRUE 거짓이면 FALSE를 반환 | &amp;,| | . | . !(100&gt;=50) # 괄호 안의 관계식 판단 결과에 대한 부정 . FALSE x=TRUE;y=FALSE # 배타적 논리합을 연산하는 xor() 함수는 두 논리적인 값이 상반되는 경우 TRUE를 반환하고, 같으면 FALSE를 반환한다. xor(x,y) . TRUE . 조건문 | . 1) if() 함수 . 비교판단문을 작성할 수 있다. | . x=50;y=4;z=x*y if(x*y&gt;=40){ cat(&#39;x*y의 결과는 40이상입니다. n&#39;) cat(&#39;x*y=&#39;,z) }else{ cat(&#39;x*y의 결과는 40미만입니다. x*y = &#39;,z) } . x*y의 결과는 40이상입니다. x*y= 200 . cat은 format과 print와 유사한 출력함수이다. | 동일하진 않고 일부 차이가 있는 것으로 보인다. | . score=79;result=&#39;노력&#39; if(score&gt;=80){ result&lt;-&#39;우수&#39; }else{ result=&#39;노력필요&#39;} cat(&#39;당신의 학점은&#39;,result,score) . 당신의 학점은 노력필요 79 . result . &#39;노력필요&#39; score=90 if(score&gt;=90){ result=&#39;a&#39; }else if(score&gt;=80){ result=&#39;b&#39; }else if(score&gt;=70){ result=&#39;c&#39;} . cat(&#39;당신의 학점은&#39;,result) . 당신의 학점은 a . 파이썬에서는 else if가 아니라 elif였음 | . . ifelse(조건식, 참인경우일때 처리문, 거짓인 경우일 때의 처리문) | . score=90 ifelse(score&gt;=80,&#39;우수&#39;,&#39;노력&#39;) . &#39;우수&#39; ifelse의 조건식에서, a&gt;=2 &amp; a&lt;=4 이런식으로 논리 연산자 사용 가능하다 | . . switch() 함수 비교 문장의 내용에 따라서 여러 개의 실행 문장 중 하나를 선택할 수 있도록 프로그램을 작성할 수 있다. | swtich(비교문, 실행문1[,실행문2,실행문3,...]) | . | . 비교문 위치에 있는 변수의 이름이 실행문 위치에 있는 변수의 이름과 일치할 때 일치하는 변수에 할당된 값을 출력한다. | . switch(&#39;name&#39;,id=&#39;a&#39;,age=32,name=&#39;awf&#39;) . &#39;awf&#39; . which() 벡터 객체를 대상으로 특정 데이터를 검색하는 데 사용되는 함수 이다. | . | . name=c(&#39;a1&#39;,&#39;a2&#39;,&#39;a3&#39;,&#39;a4&#39;) which(name!=&#39;a3&#39;) which(name==&#39;a2&#39;) . &lt;ol class=list-inline&gt;1 | 2 | 4 | &lt;/ol&gt; 2 which(name==&#39;a5&#39;) . 조건식의 결과가 참인 벡터 원소의 위치(인덱스)가 출력되며, 조건식의 결과가 거짓이면 0이 출력된다. btw 거짓이면 아무것도 출력되지 않는 것 같다. | . | . data.frame에서 활용해보자 | . no = 1:4 name = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;) score = c(12,123,4,124) exam = data.frame(학번=no, 이름=name, 성적=score) exam . A data.frame: 4 × 3 학번이름성적 . &lt;int&gt;&lt;chr&gt;&lt;dbl&gt; . 1 | a | 12 | . 2 | b | 123 | . 3 | c | 4 | . 4 | d | 124 | . which(exam$이름==&#39;b&#39;) . 2 exam[2,] . A data.frame: 1 × 3 학번이름성적 . &lt;int&gt;&lt;chr&gt;&lt;dbl&gt; . 22 | b | 123 | . which 함수는 크기가 큰 데이터프레임이나 테이블 구조의 자료를 대상으로 특정 정보를 검색하는 데 유용하게 사용된다. | . . 반복문 | . for(n in 1:10){ print(n) print(n * 10)} . [1] 1 [1] 10 [1] 2 [1] 20 [1] 3 [1] 30 [1] 4 [1] 40 [1] 5 [1] 50 [1] 6 [1] 60 [1] 7 [1] 70 [1] 8 [1] 80 [1] 9 [1] 90 [1] 10 [1] 100 . for(n in 1:10) if(n%%2==0) print(n) . [1] 2 [1] 4 [1] 6 [1] 8 [1] 10 . 바로 위 셀처럼 반복할 문장이 하나 뿐일 때는 {}를 생략할 수 있다 | . for(n in 1:10){ if(n%%2==0){ next # 다음 문장으로 skip, 반복문 계속(continue와 동일) }else{ print(n)}} . [1] 1 [1] 3 [1] 5 [1] 7 [1] 9 . for() 함수의 반복 범위에서 문장을 실행하지 않고 계속 반복할 때는 next문을 사용한다. | . exam . A data.frame: 4 × 3 학번이름성적 . &lt;int&gt;&lt;chr&gt;&lt;dbl&gt; . 1 | a | 12 | . 2 | b | 123 | . 3 | c | 4 | . 4 | d | 124 | . 변수의 칼럼명 출력하기 | . names(exam) . &lt;ol class=list-inline&gt;&#39;학번&#39; | &#39;이름&#39; | &#39;성적&#39; | &lt;/ol&gt; for(n in c(names(exam))){ print(n)} . [1] &#34;학번&#34; [1] &#34;이름&#34; [1] &#34;성적&#34; . . i=1 name=c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) for(s in c(85,95,98)){ cat(name[i],&#39;-&gt;&#39;,s,&#39; n&#39;) i=i+1 } . a -&gt; 85 b -&gt; 95 c -&gt; 98 . . while() 함수 for() 함수와 동일한 방식으로 수행된다. for() 함수와 차이점으로 for() 함수는 반복 회수를 결정하는 변수를 사용하는 대신에 while 함수는 사용자가 블록 내에서 증감식을 이용하여 반복 회수를 지정해야 한다. | . | . i=0 while(i&lt;10){ # 이런식으로 증감식을 이용하여 반복 횟수를 지정한다. print(i) i=i+1} . [1] 0 [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 [1] 6 [1] 7 [1] 8 [1] 9 . . 함수 정의 | . # 파이썬에서는 아래와 같이 함수를 정의하지만 def f(x): print(x+2) # R에서는 아래와 같이 함수를 정의한다. . f1=function(매개변수 자리인데 없이도 가능하다){실행문} . f1=function(){ print(&#39;매개변수가 없는 함수&#39;)} f1() . [1] &#34;매개변수가 없는 함수&#34; . 매개변수가 없는 함수는 &#39;함수명()&#39; 형태로 함수명에 빈 괄호를 붙여 호출한다. | 정의된 함수를 호출하지 않으면 함수의 내용은 실행되지 않는다 | . f3=function(x,y){ add &lt;- x+y return(add)} . f3(10,20) . 30 . 기술통계량을 계산하는 함수 정의 추론 통계의 기초 정보를 제공하는 요약 통계량, 빈도수 등의 기술통계량을 계싼하는 함수를 정의해본다 | 119p 참고! | . | . . 분산과 표준편차를 구하는 사용자 함수 정의 | . x=c(7,5,12,9,15,6) var_sd = function(x){ var = sum((x-mean(x))^2/length(x)-1) # 표본 분산 sd = sqrt(var) cat(&#39;표본 분산&#39;,var,&#39; n&#39;) cat(&#39;표본 표준 편차&#39;,sd)} . var_sd(x) . 표본 분산 6.333333 표본 표준 편차 2.516611 . 구구단 함수 정의 | . gugudan=function(i,j){ for(x in i){ # 단수 지정 cat(x,&#39;단을 외워봅시다 n&#39;) for(y in j){ cat(x,&#39;*&#39;,y,&#39;=&#39;,x*y,&#39; n&#39;) } cat(&#39; n&#39;)}} gugudan(2:9,1:9) . 2 단을 외워봅시다 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 단을 외워봅시다 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 단을 외워봅시다 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 단을 외워봅시다 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 단을 외워봅시다 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 단을 외워봅시다 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 단을 외워봅시다 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 단을 외워봅시다 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . 결측치 포함 자료의 평균 계산 함수 정의 | . data= c(10,20,5,4,40,7,NA,6,3,NA,2,NA) . na = function(x){ # 첫 번째 방법 : NA제거 cat(x,&#39; n&#39;) cat(mean(x,na.rm=T),&#39; n&#39;) cat(&#39; n&#39;) # 두 번째 방법 : NA를 0으로 대체하여 처리 data = ifelse(!is.na(x),x,0) cat(data,&#39; n&#39;) cat(mean(data),&#39; n&#39;) cat(&#39; n&#39;) # 세 번째 방법 : NA를 평균으로 대체하여 처리 data2 = ifelse(!is.na(x),x,round(mean(x,na.rm=T),2)) cat(data2,&#39; n&#39;) cat(mean(data2),&#39; n&#39;)} . na(data) . 10 20 5 4 40 7 NA 6 3 NA 2 NA 10.77778 10 20 5 4 40 7 0 6 3 0 2 0 8.083333 10 20 5 4 40 7 10.78 6 3 10.78 2 10.78 10.77833 . . 몬테카를로 시뮬레이션 함수 정의 현실적으로 불가능한 문제의 해답을 얻기 위해서 난수의 확률 분포를 이용하는 모의 시험으로 근사적 해를 구하는 기법 | . | . coin=function(n){ r = runif(n,min=0,max=1) result=numeric() for(i in 1:n){ if(r[i]&lt;=0.5) result[i]=0 # 앞면, 실행문이 하나일 땐 {}생략 가능하다 else result[i]=1} # 뒷면 return(result)} . coin(10) . &lt;ol class=list-inline&gt;1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | &lt;/ol&gt; montaCoin=function(n){ cnt = 0 for(i in 1:n){ cnt = cnt + coin(1) # n 시행 횟수만큼 동정 함수 호출 } result = cnt/n return(result)} . montaCoin(1000) montaCoin(100000) . 0.486 0.50078",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/09/r.html",
            "relUrl": "/2022/02/09/r.html",
            "date": " • Feb 9, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "데이터 처리 연습",
            "content": "키보드 직접 데이터 입력받기 | . num &lt;- scan() . 파이썬에서의 input()과 동일하다. | 다만 주피터 노트북에서는 실행이 안 되고 Rstudio에서 가능한 것 같다. | 입력된 데이터는 입력된 순서대로 벡터 변수 num에 저장된다. | . name &lt;- scan(what = character()) . 키보드로 문자를 입력하기 위함이다. | 입력한 문자는 순서대로 name 벡터로 저장된다. | . . df = data.frame() df = edit(df) . 데이터 입력을 돕기 위해 표 형식의 데이터 편집기를 제공한다. | Rstudio에서 실행시 사용할 수 있다. | . . 파일에 저장된 데이터를 불러오기 | . read.table() 테이블(칼럼이 모여서 레코드 구성) 형태로 작성되어 있으며, 칼럼이 공백, 탭, 콜론, 세미콜론, 콤마 등으로 구분된 자료 파일을 불러올 수 있는 함수이다. | 만약 구분자가 공백이거나 탭이면 sep 속성을 생략할 수 있다. 또한 칼럼명이 있는 경우 header 속성은 TRUE로 지정한다. | . | . getwd() # 현재 작업 디렉토리의 경로 확인 . &#39;C:/Users/ehfus/Downloads/R&#39; setwd(&#39;C:/Users/ehfus/Downloads/R&#39;) # 작업 디렉토리 설정 . student &lt;- read.table(file = &#39;first.txt&#39;) . student # 칼럼명이 없을 경우 기본으로 V1~으로 설정된다. . A data.frame: 4 × 4 V1V2V3V4 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . names(student)&lt;-c(&#39;a&#39;,&#39;a2&#39;,&#39;a3&#39;,&#39;a4&#39;) student . A data.frame: 4 × 4 aa2a3a4 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . 101 | 1 | 1 | 1 | . . student &lt;- read.table(file = &#39;second.txt&#39;,sep=&#39;,&#39;,header=T,encoding=&quot;UTF-8&quot; ) . student . A data.frame: 4 × 4 번호이름성별몸무게 . &lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt; . 10 | 1 | 1 | 1 | . 10 | 1 | 1 | 1 | . 10 | 1 | 1 | 1 | . sd | ad | ad | ad | . student &lt;- read.table(file = &#39;second.txt&#39;) . student . A data.frame: 3 × 1 V1 . &lt;chr&gt; . 10,1,1,1 | . 10,1,1,1 | . sd,ad,ad,ad | . 구분자 입력 안 해줘서 10,1,1,1이 하나의 요소로 해석된 모양이다 | . . 탐색기를 통해서 파일 선택하기 | . student &lt;- read.table(file.choose(),sep=&#39;,&#39;,header=T,encoding=&quot;UTF-8&quot;) . student . A data.frame: 4 × 4 번호이름성별몸무게 . &lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt; . 10 | 1 | 1 | 1 | . 10 | 1 | 1 | 1 | . 10 | 1 | 1 | 1 | . sd | ad | ad | ad | . 파일에 특정 문자열을 NA로 처리하여 파일을 불러올 수 있다. na.strings = &#39;-&#39;를 통해 처리할 수 있다. | . | . . 엑셀에서는 작업한 파일을 R에서 처리할 수 있도록 CSV 형식으로 변환하여 저장할 수 있다. | CSV(comma separation valule) 파일 형식은 콤마를 기준으로 각 칼럼을 구분하여 저장한 데이터 형식을 말한다. | sep=&#39;,&#39;가 기본값이며, header=T가 기본값이다. 따라서 칼럼명이 있는 경우에 header속성은 생략할 수 있다. | . read.csv(file = &#39;third.csv&#39;,encoding=&quot;UTF-8&quot;) . A data.frame: 2 × 4 X.U.FEFF.asasdasdasd.1곽 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 1 | 123 | 1234 | 123 | . 1234 | 214 | 124 | 24 | . csv파일 형식이 아닌 엑셀 파일(.xlsx)을 직접 R에서 불러올 수도 있다. | 엑셀 파일은 일반 파일과는 달리 시트(sheet) 단위로 자료를 저장한다. 따라서 엑셀 파일을 읽을 때는 시트명과 셀의 범위를 지정해서 읽는다. | . install.packages(&#39;readxl&#39;) library(readxl) . package &#39;readxl&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp RtmpEH2tA1 downloaded_packages . 기본함수가 아니기 때문에 위와 같은 셀이 필요하다 | . read_excel(path=&#39;fourth.xlsx&#39;,sheet=&#39;fourth&#39;) . New names: * asd -&gt; asd...2 * asd -&gt; asd...3 . A tibble: 2 × 4 asasdasd...2asd...3곽 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 123 | 1234 | 123 | . 1234 | 214 | 124 | 24 | . . 인터넷에서 파일 가져오기 인터넷에서 제공하는 CSV 파일 형식의 데이터를 해당 사이트에서 직접 R 스트립트로 가져와서 데이터를 가공 처리한 후 분석에 활용할 수 있다. | 99p를 참고하자 | . | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/07/r.html",
            "relUrl": "/2022/02/07/r.html",
            "date": " • Feb 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "data.frame, List, stringr",
            "content": "data.frame 객체 자료 처리 함수 | . df = data.frame(x=1:5, y=seq(1,9,2),z=c(&#39;abfa&#39;,&#39;aavd&#39;,&#39;avs&#39;,&#39;S&#39;,&#39;S&#39;)) df . A data.frame: 5 × 3 xyz . &lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 1 | 1 | abfa | . 2 | 3 | aavd | . 3 | 5 | avs | . 4 | 7 | S | . 5 | 9 | S | . str(df) # 데이터 프레임의 구조를 보여준다. . &#39;data.frame&#39;: 5 obs. of 3 variables: $ x: int 1 2 3 4 5 $ y: num 1 3 5 7 9 $ z: chr &#34;abfa&#34; &#34;aavd&#34; &#34;avs&#34; &#34;S&#34; ... . 5 obs. of 3 variables : 5개의 관측치와 3개의 변수로 구성됨 | . ncol(df) . 3 nrow(df) . 5 names(df) . &lt;ol class=list-inline&gt;&#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &lt;/ol&gt; df[c(2,3),1] # R은 파이썬과 달리 index가 1부터 시작함! . &lt;ol class=list-inline&gt;2 | 3 | &lt;/ol&gt; df[1] # 첫 번째 열 . A data.frame: 5 × 1 x . &lt;int&gt; . 1 | . 2 | . 3 | . 4 | . 5 | . summary(df) # 요약 통계량을 볼 수 있다. # 숫자로 구성된 칼럼에 대해서만 수행된다. . x y z Min. :1 Min. :1 Length:5 1st Qu.:2 1st Qu.:3 Class :character Median :3 Median :5 Mode :character Mean :3 Mean :5 3rd Qu.:4 3rd Qu.:7 Max. :5 Max. :9 . df[,c(1,2)] . A data.frame: 5 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 1 | 1 | . 2 | 3 | . 3 | 5 | . 4 | 7 | . 5 | 9 | . df[c(1,2)] . A data.frame: 5 × 2 xy . &lt;int&gt;&lt;dbl&gt; . 1 | 1 | . 2 | 3 | . 3 | 5 | . 4 | 7 | . 5 | 9 | . apply(df[,c(1,2)],2,sum) . &lt;dl class=dl-inline&gt;x15y25&lt;/dl&gt; apply(df[c(1,2)],2,sum) . &lt;dl class=dl-inline&gt;x15y25&lt;/dl&gt; 데이터프레임의 부분 객체 만들기 데이터 프레임 객체의 데이터를 대상으로 조건에 만족하는 행을 추출하여 독립된 객체를 생성할 수 있다. | . | . x1 &lt;- subset(df,x&gt;=3) x1 . A data.frame: 3 × 3 xyz . &lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 33 | 5 | avs | . 44 | 7 | S | . 55 | 9 | S | . 행 기준이다. | . x2 &lt;- subset(df, x&gt;=2 &amp; y&lt;=6) x2 . A data.frame: 2 × 3 xyz . &lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 22 | 3 | aavd | . 33 | 5 | avs | . 이렇게 두 개의 조건으로 부분 객체를 만들 수도 있다. | . . sid = c(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;) score = c(12,123,13,5) subject = c(&#39;컴퓨터1&#39;,&#39;컴퓨터2&#39;,&#39;컴퓨터3&#39;,&#39;컴퓨터4&#39;) student = data.frame(sid ,score, subject) student . A data.frame: 4 × 3 sidscoresubject . &lt;chr&gt;&lt;dbl&gt;&lt;chr&gt; . a | 12 | 컴퓨터1 | . b | 123 | 컴퓨터2 | . c | 13 | 컴퓨터3 | . d | 5 | 컴퓨터4 | . mode(student) class(student) . &#39;list&#39; &#39;data.frame&#39; str(sid);str(score);str(subject);str(student) # 벡터 자료구조와 데이터 프레임 자료구조 . chr [1:4] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34; num [1:4] 12 123 13 5 chr [1:4] &#34;컴퓨터1&#34; &#34;컴퓨터2&#34; &#34;컴퓨터3&#34; &#34;컴퓨터4&#34; &#39;data.frame&#39;: 4 obs. of 3 variables: $ sid : chr &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34; $ score : num 12 123 13 5 $ subject: chr &#34;컴퓨터1&#34; &#34;컴퓨터2&#34; &#34;컴퓨터3&#34; &#34;컴퓨터4&#34; . . h &lt;- data.frame(id = c(1,2), height = c(123,1234)) w &lt;- data.frame(id2 = c(1,2), weight = c(123,43)) . h;w . A data.frame: 2 × 2 idheight . &lt;dbl&gt;&lt;dbl&gt; . 1 | 123 | . 2 | 1234 | . A data.frame: 2 × 2 id2weight . &lt;dbl&gt;&lt;dbl&gt; . 1 | 123 | . 2 | 43 | . merge(h,w,by.x=&#39;id&#39;,by.y=&#39;id2&#39;) . A data.frame: 2 × 3 idheightweight . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 123 | 123 | . 2 | 1234 | 43 | . by.x=&#39;id&#39;,by.y=&#39;id2&#39; -&gt; 병합 시에 기준이 되는 칼럼명이 상이할 때 사용함 | . . install.packages(&#39;UsingR&#39;) # 패키지 설치 library(UsingR) # 패키지 로드 data(galton) # galton 데이터 셋 가져오기 . package &#39;UsingR&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users ehfus AppData Local Temp RtmpYpStoY downloaded_packages . Loading required package: MASS Loading required package: HistData Loading required package: Hmisc Loading required package: lattice Loading required package: survival Loading required package: Formula Loading required package: ggplot2 Attaching package: &#39;Hmisc&#39; The following objects are masked from &#39;package:base&#39;: format.pval, units Attaching package: &#39;UsingR&#39; The following object is masked from &#39;package:survival&#39;: cancer . str(galton) . &#39;data.frame&#39;: 928 obs. of 2 variables: $ child : num 61.7 61.7 61.7 61.7 61.7 62.2 62.2 62.2 62.2 62.2 ... $ parent: num 70.5 68.5 65.5 64.5 64 67.5 67.5 67.5 66.5 66.5 ... . dim(galton) . &lt;ol class=list-inline&gt;928 | 2 | &lt;/ol&gt; head(galton, 5) . A data.frame: 5 × 2 childparent . &lt;dbl&gt;&lt;dbl&gt; . 161.7 | 70.5 | . 261.7 | 68.5 | . 361.7 | 65.5 | . 461.7 | 64.5 | . 561.7 | 64.0 | . . List 자료구조 List는 성격이 다른 자료형(문자열, 숫자형, 논리형)과 자료구조(벡터, 행렬, 리스트, 데이터 프레임)를 객체로 생성할 수 있다. | 하나의 메모리 영역에는 키과 값이 한 쌍 | Python의 dict 자료구조와 유사하다. | list 생성 함수 : list() | list 자료 처리 함수 : unlist(), lapply(), sapply() | list는 키와 값을 한 쌍으로 하여 원소가 저장되는 자료구조이다. 만약 키를 생략하면 자동으로 기본 키가 생성된다. | . | . list1 &lt;- list(&#39;lee&#39;,&#39;lee2&#39;,95) # list 객체 생성 list1 . &#39;lee&#39; | &#39;lee2&#39; | 95 | key를 지정하지 않아서 임의로 지정됐음 | list 객체는 키를 통해서 값이 저장되기 때문에 서로 다른 자료형을 저장할 수 있다. list와 data.frame은 상이한 자료형을 혼합할 수 있다. | . | . list를 vector로 변경해보자 | . unlist &lt;- unlist(list1) unlist . &lt;ol class=list-inline&gt;&#39;lee&#39; | &#39;lee2&#39; | &#39;95&#39; | &lt;/ol&gt; 리스트 자료구조에 다량의 데이터가 저장되는 경우 리스트 형태로 출력하면 여러 줄로 출력되기 때문에 벡터 형식으로 변환할 경우 자료 처리가 용이해진다. | character &gt; numeric &gt; logical 순서로 벡터에 저장되기 때문에 전부 character로 변환하여 반환되었음 | . list2 &lt;- list(c(1:5),c(5:1)) list2 . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; | &lt;ol class=list-inline&gt;5 | 4 | 3 | 2 | 1 | &lt;/ol&gt; | list3 &lt;- list(matrix(1:6,2),array(1:12,c(3,2,2))) list3 . A matrix: 2 × 3 of type int 1 | 3 | 5 | . 2 | 4 | 6 | . | &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | &lt;/ol&gt; | 이렇게 list 객체의 value에 저장될 수 있는 자료구조는 VECTOR 뿐만이 아니라 matrix 혹은 array도 가능하다. | . . key 명명하자 | . list4 &lt;- list(name = c(&#39;홍길동&#39;,&#39;유관순&#39;), age = c(1234,1245)) list4 . $name &lt;ol class=list-inline&gt;&#39;홍길동&#39; | &#39;유관순&#39; | &lt;/ol&gt; $age &lt;ol class=list-inline&gt;1234 | 1245 | &lt;/ol&gt; list4$name list4$name[2] . &lt;ol class=list-inline&gt;&#39;홍길동&#39; | &#39;유관순&#39; | &lt;/ol&gt; &#39;유관순&#39; list4$age list4$age[1] . &lt;ol class=list-inline&gt;1234 | 1245 | &lt;/ol&gt; 1234 list4$age[1]&lt;-1245 # 원소 수정 가능 list4$newkey &lt;- &#39;asdf&#39; # 새로운 키 추가 list4$newkey[c(1,2)] &lt;- c(124,1255) # 새롭게 추가 된 키에 새로운 value 추가 . list4 . $name &lt;ol class=list-inline&gt;&#39;홍길동&#39; | &#39;유관순&#39; | &lt;/ol&gt; $age &lt;ol class=list-inline&gt;1245 | 1245 | &lt;/ol&gt; $newkey &lt;ol class=list-inline&gt;&#39;124&#39; | &#39;1255&#39; | &lt;/ol&gt; length(list4) length(list4$name) mode(list4) class(list4) . 3 2 &#39;list&#39; &#39;list&#39; list4$new&lt;- NULL . list4 . $name &lt;ol class=list-inline&gt;&#39;홍길동&#39; | &#39;유관순&#39; | &lt;/ol&gt; $age &lt;ol class=list-inline&gt;1245 | 1245 | &lt;/ol&gt; $newkey &lt;ol class=list-inline&gt;&#39;124&#39; | &#39;1255&#39; | &lt;/ol&gt; 일부 key와 value 제거 | . list4 &lt;- NULL . list4 . NULL . 모두 제거 | . . 리스트 객체의 자료 처리 함수 | . a = list(c(1:5)) b = list(c(6:10)) lapply(c(a,b),max) # 리스트 객체에 max 함수 적용 . 5 | 10 | lapply() 함수는 두 개의 리스트 객체 a와 b를 대상으로 max() 함수를 적용하여 각 리스트 객체의 자료 중에서 가장 큰 값을 리스트 형태로 반환한다. | 동일한 결과를 벡터 형식으로 반환해보자 | . sapply(c(a,b),max) . &lt;ol class=list-inline&gt;5 | 10 | &lt;/ol&gt; lapply()는 연산 결과를 리스트 형태로 반환하지만, sapply()는 결과를 벡터형식으로 반환하기 때문에 많은 원소를 포함하고 있는 리스트 객체를 보다 효과적으로 처리할 수 있다. | . . 다차원 리스트 객체를 생성해보자 리스트 자료구조에 또 다른 리스트가 중첩된 자료구조를 다차원 리스트라고 한다. | 즉 value가 list이다 | . | . complex = list(c1 = list(1,2,3), c2 = list(4,5,6), c3 = list(7,8,9)) complex . $c1 1 | 2 | 3 | $c2 4 | 5 | 6 | $c3 7 | 8 | 9 | complex$c1 . 1 | 2 | 3 | 다차원 리스트를 열 단위로 바인딩하기 | . do.call(cbind, complex) . A matrix: 3 × 3 c1c2c3 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 4 | 7 | . 2 | 5 | 8 | . 3 | 6 | 9 | . class(do.call(cbind, complex)) . &lt;ol class=list-inline&gt;&#39;matrix&#39; | &#39;array&#39; | &lt;/ol&gt; do.call(rbind, complex) . A matrix: 3 × 3 c11 | 2 | 3 | . c24 | 5 | 6 | . c37 | 8 | 9 | . class(do.call(rbind, complex)) . &lt;ol class=list-inline&gt;&#39;matrix&#39; | &#39;array&#39; | &lt;/ol&gt; 3개의 value를 구성하는 list 자료가 열 단위로 묶여서 matrix 객체가 생성된다. 특히 do.call() 함수는 다차원 리스트를 구성하는 리스트를 각각 분해한 후 지정된 함수(cbind 또는 rbind)를 호출하여 리스트 자료를 처리하는 데 효과적이다. | . . 텍스트 자료나 SNS에서 가공 처리된 빅데이터를 처리하기 위해서는 필요한 문자열을 적절하게 자르고 교체하고 추출하는 작업이 중요하다. 문자열을 효과적으로 처리하는 stringr 패키지에 대해 알아보자 | . install.packages(&#39;stringr&#39;) library(stringr) . Warning message: &#34;package &#39;stringr&#39; is in use and will not be installed&#34; . str_extract(&quot;홍길동35이순신45유관순25&quot;,&quot;[1-9]{2}&quot;) str_extract_all(&quot;홍길동35이순신45유관순25&quot;,&quot;[1-9]{2}&quot;) . &#39;35&#39; &lt;ol class=list-inline&gt;&#39;35&#39; | &#39;45&#39; | &#39;25&#39; | &lt;/ol&gt; | str_extract() 함수는 지정된 문자열을 대상으로 정규 표현식 &#39;[1-9]{2}&#39;의 패턴(숫자 2개가 연속된 경우)과 일치하는 가장 처음에 발견된 문자열을 추출해준다. | str_extract_all는 지정된 문자열을 대상으로 정규 표현식 &#39;[1-9]{2}&#39;의 패턴(숫자 2개가 연속된 경우)과 일치하는 모든 문자열을 추출해준다. | . . 정규 표현식 문자열 처리 관련 함수는 대부분 정규표현식을 이용하여 문자열의 패턴을 검사하고 해당 문자열을 대상으로 문자열을 교체하거나 추출하게 된다. 정규표현식은 약속된 기호인 메타문자들에 의해 표현된다. | . | . 반복 관련 정규 표현식 []기호는 대괄호 안의 문자가 한 번만 반복되고, {n}은 n만큼 반복된다. 예를 들면 [a-z]의 정규 표현식은 영문 소문자 a에서 z까지 범위 중에서 한 개의 영문 소문자를 의미하고 [a-z]{3}은 영문 소문자가 연속으로 3개 발생한다는 의미이다. | . | . | . string = &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlek.&#39; . str_extract_all(string, &#39;[a-z]{4}&#39;) # 영문 소문자가 4글자 연속하는 경우 추출 . &lt;ol class=list-inline&gt;&#39;rhkr&#39; | &#39;ehtj&#39; | &#39;ddms&#39; | &#39;rhdq&#39; | &#39;nfmf&#39; | &#39;xhde&#39; | &#39;kfgk&#39; | &#39;rjtd&#39; | &lt;/ol&gt; | str_extract_all(string, &#39;[a-z]{4,}&#39;) # 영문 소문자가 4글자 **이상** 연속하는 경우 추출 . &lt;ol class=list-inline&gt;&#39;rhkrehtjddms&#39; | &#39;rhdqnfmf&#39; | &#39;xhdekfgkf&#39; | &#39;rjtdlek&#39; | &lt;/ol&gt; | str_extract_all(string, &#39;[a-z]{3,5}&#39;) # 영문 소문자가 4글자 **이상** 5글자 **이하** 연속하는 경우 추출 . &lt;ol class=list-inline&gt;&#39;rhkre&#39; | &#39;htjdd&#39; | &#39;rhdqn&#39; | &#39;fmf&#39; | &#39;xhdek&#39; | &#39;fgkf&#39; | &#39;rjtdl&#39; | &lt;/ol&gt; | str_extract_all(string, &#39;rhkrehtjd&#39;) # 해당 문자열 추출 . &#39;rhkrehtjd&#39; | str_extract_all(string,&#39;2&#39;) # 해당 숫자 추출 . &#39;2&#39; | str_extract_all(string,&#39;[가-힣]{2,}&#39;) # 연속된 3개 이상의 한글 문자열 추출 . &#39;곽도성&#39; | 대문자 추출할 땐 [A-Z]를 이용한다. | 제외할 땐 [^a-z] | 영문자는 일단 제외하고 남은 것중 4글자 추출 [^a-z]{4} , 남은 것중 문자종류 상관없이 4글자 추출 | . | . . 한 개의 숫자와 단어 관련 정규표현식 | . jm = &#39;12344-125215&#39; str_extract(jm,&#39;[0-9]{5}-[0-9]{2,}&#39;) . &#39;12344-125215&#39; str_extract_all(jm,&#39; d{5}- d{6}&#39;) . &#39;12344-125215&#39; | string = &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; . str_extract_all(string,&#39; w{3,}&#39;) # 3글자 이상의 단어만 추출, 허나 특수문자는 포함하지 않는다. . &lt;ol class=list-inline&gt;&#39;rhkrehtjddms123&#39; | &#39;rhdqnfmf444&#39; | &#39;Rh곽도성&#39; | &#39;xhdekfgkf&#39; | &#39;rjtdlekrhkrehtjd&#39; | &lt;/ol&gt; | str_length(string) . 64 str_locate(string,&#39;rhkrehtjd&#39;) # 문자열 내에서 특정 문자열의 모든 위치의 index 시작과 끝 str_locate_all(string,&#39;rhkrehtjd&#39;) . A matrix: 1 × 2 of type int startend . 1 | 9 | . A matrix: 2 × 2 of type int startend . 1 | 9 | . 55 | 63 | . | . 부분 문자열 만들기 | . string . &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; sub = str_sub(string,1,length(string)-20) sub . &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf&#39; 대소문자 변경 | . change = str_to_upper(string) change . &#39;RHKREHTJDDMS123 DL RHDQNFMF444 RH곽도성 XHDEKFGKF RJTDLEKRHKREHTJD.&#39; change = str_to_lower(string) change . &#39;rhkrehtjddms123 dl rhdqnfmf444 rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; 문자열 교체 | . string . &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; rep1 = str_replace(string,&#39;123&#39;,&#39;dl&#39;) rep1 # 123을 dl로 변경 . &#39;rhkrehtjddmsdl dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; 문자열 결합 | . str_c(string,rep1) . &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.rhkrehtjddmsdl dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.&#39; str_c(string,&#39;1111111111111&#39;) . &#39;rhkrehtjddms123 dl rhdqnfmf444 Rh곽도성 xhdekfgkf rjtdlekrhkrehtjd.1111111111111&#39; 문자열 분리 | . a=str_split(string,&#39;r&#39;) # r기준으로 문자열 분리 a . &lt;ol class=list-inline&gt;&#39;&#39; | &#39;hk&#39; | &#39;ehtjddms123 dl &#39; | &#39;hdqnfmf444 Rh곽도성 xhdekfgkf &#39; | &#39;jtdlek&#39; | &#39;hk&#39; | &#39;ehtjd.&#39; | &lt;/ol&gt; | mode(a) class(a) . &#39;list&#39; &#39;list&#39; 문자열 합치기 | . new = c(&#39;asd&#39;,&#39;asdadfd&#39;,&#39;asds&#39;,&#39;aqefsd&#39;) # 콤마를 기준으로 문자열 벡터 합치자 join = paste(new,collapse = &#39;,&#39;) join . &#39;asd,asdadfd,asds,aqefsd&#39; 벡터 객체로 반환해준다 | 예를 들면 문자열 100개가 1개씩 우너소를 차지하는 벡터 객체를 대상으로 paste()함수를 적용하여 1개의 원소로 축소가 가능하다. | 따라서 방대한 자료를 분석하기 위해서 실습 예에서와 같은 방법으로 처리 단위를 축소한다면 빅데이터를 효율적으로 처리할 수 있다. | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/06/r.html",
            "relUrl": "/2022/02/06/r.html",
            "date": " • Feb 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Vector & Matrix & Array 자료구조",
            "content": "연속된 1차원의 선형구조의 형태로 만들어짐 | 같은 자료형의 데이터만 저장할 수 있다. | 첫 번째 셀에서 정수와 문자를 혼합하여 저장했지만 반환되는 건 모두 문자로 변환되어 반환된다. | 첫 번째 셀과 두 번째 셀을 비교해보자 | . df=c(1,2,&#39;ㅁㄴㅇ&#39;) df . &lt;ol class=list-inline&gt;&#39;1&#39; | &#39;2&#39; | &#39;ㅁㄴㅇ&#39; | &lt;/ol&gt; df_=c(1,2,3) df_ . &lt;ol class=list-inline&gt;1 | 2 | 3 | &lt;/ol&gt; 벡터 생성 함수 : c(), seq(), rep() | 벡터 자료 처리 함수 : union(), setdiff(), intersect() | . c(1:10) 1:10 c(1,2,3,4,5,6,7,8,9,10) . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;/ol&gt; seq(1,10,3) # 1부터 10까지 3씩 증가 . &lt;ol class=list-inline&gt;1 | 4 | 7 | 10 | &lt;/ol&gt; rep(1:3,3) . &lt;ol class=list-inline&gt;1 | 2 | 3 | 1 | 2 | 3 | 1 | 2 | 3 | &lt;/ol&gt; rep(1,3) . &lt;ol class=list-inline&gt;1 | 1 | 1 | &lt;/ol&gt; rep(1:3,each=2) # 각 자료가 반복 . &lt;ol class=list-inline&gt;1 | 1 | 2 | 2 | 3 | 3 | &lt;/ol&gt; 벡터 자료 처리 | . x&lt;-c(1,2,3,4) y&lt;-c(2,3) union(x,y) # 합집합 setdiff(x,y) # x-y . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 4 | &lt;/ol&gt; setdiff(y,x) # y-x는 남는 게 없음 . intersect(x,y) # 교집합 . &lt;ol class=list-inline&gt;2 | 3 | &lt;/ol&gt; 변수에 다양한 형식의 벡터 자료를 저장할 수 있다. 하지만 벡터 자료는 같은 유형의 자료만 하나의 변수에 저장할 수 있다. | 만약 숫자형과 문자형 또는 논리형이 혼합되는 경우에는 데이터 유형이 변경될 수 있다. | . v&lt;-c(T,TRUE,F,FALSE) v v&lt;-c(T,TRUE,F,FALSE,1) v v&lt;-c(T,TRUE,F,FALSE,1,&#39;1&#39;) v . &lt;ol class=list-inline&gt;TRUE | TRUE | FALSE | FALSE | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 1 | 0 | 0 | 1 | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;TRUE&#39; | &#39;TRUE&#39; | &#39;FALSE&#39; | &#39;FALSE&#39; | &#39;1&#39; | &#39;1&#39; | &lt;/ol&gt; character &lt;- numeric &lt;- logical 순으로 우선순위를 두고 변경 됨 | R에서는 세미콜론(;)을 구분자로하여 한 줄에 여러 개의 R 스크립트 명령문을 사용할 수 있음 | . age=c(30,40,50) age names(age)=c(&#39;곽도성의 나이&#39;,&#39;곽도성2의 나이&#39;,&#39;곽도성3의 나이&#39;) age age&lt;-NULL # NaN은 되긴 하지만 NULL과 의미가 다른가? age . &lt;ol class=list-inline&gt;30 | 40 | 50 | &lt;/ol&gt; &lt;dl class=dl-inline&gt;곽도성의 나이30곽도성2의 나이40곽도성3의 나이50&lt;/dl&gt; NULL . 위 셀처럼 벡터 객체의 값에 칼럼명 지정 | . a&lt;-c(1:12) a[1:5] . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; 파이썬은 index 0번이 첫 번째 원소를 뜻하지만 R에서는 index 1이 첫 번째 원소를 뜻한다. | . length(a) . 12 벡터 객체에서 첨자를 이용하여 원소를 조회할 경우 c() 함수의 인수에 콤마를 사용할 수 있다. 이때 콤마는 1차원 자료구조에서 하나의 원소를 지정하는 역할을 한다. | . c1&lt;-c(1,2,3,4,2:5) c1 c1[c(1,3)] c1[c(1:3)] . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 3 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 2 | 3 | &lt;/ol&gt; 위 셀처럼 벡터 객체의 원소를 참조하기 위해서 c() 함수의 인수로 콤마와 콜론(:)을 이용할 수 있다. 콤마는 개별 원소 하나씩 지정하며 콜론은 원소의 범위를 지정하는 역할을 한다. | . c1 . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 2 | 3 | 4 | 5 | &lt;/ol&gt; c1[-1] c1[-c(2,4)] c1[c(-2,-4)] c1[c(-2:-4)] c1[c(-4:-1)] . &lt;ol class=list-inline&gt;2 | 3 | 4 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 3 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 3 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;2 | 3 | 4 | 5 | &lt;/ol&gt; index를 음수값으로 지정하는 경우에는 여집합의 개념으로 해당 첨자가 제외된다. 벡터 객체를 대상으로 위 셀처럼 c1[-1]을 지정할 경우 1번째만 제외하고 나머지 모든 벡터 자료가 반환된다. | . . Matrix : 동일한 자료형을 갖는 2차원의 배열구조를 갖는다. | 행과 열의 2차원 배열구조의 객체를 생성한다. | 동일한 타입의 데이터만 저장할 수 있다. | 행렬 생성 함수 : matrix(),rbind(),cbind() | 행렬 자료 처리 함수 :apply() | . m=matrix(c(1:5)) m . A matrix: 5 × 1 of type int 1 | . 2 | . 3 | . 4 | . 5 | . 위 셀처럼 matrix() 함수에서 c() 함수를 인수로 지정하여 matrix 객체를 생성할 수 있다. c() 함수는 기본적으로 열을 기준으로 객체를 만들어준다. | . m=matrix(1:10,nrow=2) m m=matrix(c(1:10),nrow=2) m . A matrix: 2 × 5 of type int 1 | 3 | 5 | 7 | 9 | . 2 | 4 | 6 | 8 | 10 | . A matrix: 2 × 5 of type int 1 | 3 | 5 | 7 | 9 | . 2 | 4 | 6 | 8 | 10 | . 이렇게 일단 열 기준임! | . m=matrix(c(1:11),nrow=3) m . Warning message in matrix(c(1:11), nrow = 3): &#34;데이터의 길이[11]가 행의 개수[3]의 배수가 되지 않습니다&#34; . A matrix: 3 × 4 of type int 1 | 4 | 7 | 10 | . 2 | 5 | 8 | 11 | . 3 | 6 | 9 | 1 | . 자료의 개수와 행과 열이 맞아 떨어지지 않으면 알아서 broadcast하여 채워 넣음 | . 벡터 데이터를 대상으로 행렬 객체를 생성하면 기본적으로 열 우선으로 데이터가 생성된다. | 행 우선으로 데이터를 생성해보자 | . m=matrix(1:10,nrow=2,byrow = T) m m=matrix(1:10,nrow=2,byrow = TRUE) m . A matrix: 2 × 5 of type int 1 | 2 | 3 | 4 | 5 | . 6 | 7 | 8 | 9 | 10 | . A matrix: 2 × 5 of type int 1 | 2 | 3 | 4 | 5 | . 6 | 7 | 8 | 9 | 10 | . 행 또는 열 묶음으로 행렬 객체 생성해보자 | . x1&lt;-c(1,2,3,6:10) x2&lt;-c(1,2,3,5:1) . bond&lt;-rbind(x1,x2) bond bond&lt;-cbind(x1,x2) bond . A matrix: 2 × 8 of type dbl x11 | 2 | 3 | 6 | 7 | 8 | 9 | 10 | . x21 | 2 | 3 | 5 | 4 | 3 | 2 | 1 | . A matrix: 8 × 2 of type dbl x1x2 . 1 | 1 | . 2 | 2 | . 3 | 3 | . 6 | 5 | . 7 | 4 | . 8 | 3 | . 9 | 2 | . 10 | 1 | . 각각 8개로 개수가 맞아서 rbind가 잘 됐음 | 개수 안 맞으면 bind 안 됨 | . . matrix() 함수에 직접 인수를 적용하여 행렬 객체를 생성할 수 있다. | matrix() 함수의 형식은 다음과 같다.matrix(data=NA,nrow =1, ncol=1, byrow=TRUE,dimnames=NULL) . | . m3=matrix(10:19,2) m3 . A matrix: 2 × 5 of type int 10 | 12 | 14 | 16 | 18 | . 11 | 13 | 15 | 17 | 19 | . mode(m3) class(m3) . &#39;numeric&#39; &lt;ol class=list-inline&gt;&#39;matrix&#39; | &#39;array&#39; | &lt;/ol&gt; index를 이용하여 행렬 객체에 접근하기 | . m3[1,] # 1행 m3[,3] # 3열 m3[1,3] # 1행 3열 m3[1,2:4] . &lt;ol class=list-inline&gt;10 | 12 | 14 | 16 | 18 | &lt;/ol&gt; &lt;ol class=list-inline&gt;14 | 15 | &lt;/ol&gt; 14 &lt;ol class=list-inline&gt;12 | 14 | 16 | &lt;/ol&gt; matrix(1:9,nrow=3,byrow=T) . A matrix: 3 × 3 of type int 1 | 2 | 3 | . 4 | 5 | 6 | . 7 | 8 | 9 | . 행렬 객체 자료 처리 함수 | . length(m3) # 원소 개수 ncol(m3) # 열 개수 nrow(m3) # 행 개수 . 10 5 2 apply() 함수는 행렬 구조의 자료를 처리하는 데 유용한 함수이다. | 함수 사용법 : apply(행렬객체, 1:행 or 2:열, 행렬 자료에 적용할 함수) | . m3 . A matrix: 2 × 5 of type int 10 | 12 | 14 | 16 | 18 | . 11 | 13 | 15 | 17 | 19 | . apply(m3,1,max) apply(m3,2,max) apply(m3,1,mean) . &lt;ol class=list-inline&gt;18 | 19 | &lt;/ol&gt; &lt;ol class=list-inline&gt;11 | 13 | 15 | 17 | 19 | &lt;/ol&gt; &lt;ol class=list-inline&gt;14 | 15 | &lt;/ol&gt; 당연히 사용자 정의 함수도 apply()에 사용할 수 있을 것이다. | . 이건 파이썬에서 함수 정의하는 방법이고def f(x): return(x+2) . | 이건 R에서 함수 정의하는 방법f &lt;- function(x){ x*c(1,2,3)} . | . f &lt;- function(x){ x*3} . m3 . A matrix: 2 × 5 of type int 10 | 12 | 14 | 16 | 18 | . 11 | 13 | 15 | 17 | 19 | . apply(m3,1,f) # 행 우선 순위로 f함수 적용 # 벡터 데이터 연산할 때 열 단위로 결과 출력 # 벡터 자료와 연산하면 기본적으로 열 우선 순서로 출력된다. # 이러한 행렬 구조를 전치행렬이라고 한다. . A matrix: 5 × 2 of type dbl 30 | 33 | . 36 | 39 | . 42 | 45 | . 48 | 51 | . 54 | 57 | . apply(m3,2,f) . A matrix: 2 × 5 of type dbl 30 | 36 | 42 | 48 | 54 | . 33 | 39 | 45 | 51 | 57 | . . 벡터 객체 에서 이름 지정하기 | . age=c(30,40,50) age names(age)=c(&#39;곽도성의 나이&#39;,&#39;곽도성2의 나이&#39;,&#39;곽도성3의 나이&#39;) age . &lt;ol class=list-inline&gt;30 | 40 | 50 | &lt;/ol&gt; &lt;dl class=dl-inline&gt;곽도성의 나이30곽도성2의 나이40곽도성3의 나이50&lt;/dl&gt; 행렬 객체에서 이름 지정하기 | . m3 . A matrix: 2 × 5 of type int 10 | 12 | 14 | 16 | 18 | . 11 | 13 | 15 | 17 | 19 | . colnames(m3)=c(12,3,4,5,5) m3 . A matrix: 2 × 5 of type int 123455 . 10 | 12 | 14 | 16 | 18 | . 11 | 13 | 15 | 17 | 19 | . . Array 자료구조 : 같은 자료형을 갖는 다차원 배열구조를 갖는다. | 행, 열, 면의 3차원 배열 형태의 객체를 생성한다. | 다른 자료구조에 비해서 상대적으로 활용도가 낮다. | 배열 생성 함수 : array() &lt;*apply()와 혼동 주의&gt; | . vec=c(1:12) arr &lt;- array(vec,c(3,2,2)) arr # 3행 2열 2면 생성 . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | &lt;/ol&gt; arr[,,1] # 1면 조회 arr[,,2] # 2먼 조회 . A matrix: 3 × 2 of type int 1 | 4 | . 2 | 5 | . 3 | 6 | . A matrix: 3 × 2 of type int 7 | 10 | . 8 | 11 | . 9 | 12 | . mode(arr) class(arr) . &#39;numeric&#39; &#39;array&#39; . DataFrame 자료구조 : R에서 가장 많이 활용 데이터 베이스의 테이블 구조와 유사하다. | 칼럼 단위로 서로 다른 데이터의 저장이 가능 | 리스트와 벡터의 혼합형으로 칼럼은 리스트, 칼럼 내의 데이터는 벡터 자료 구조를 갖는다. | 데이터프레임 생성함수 : data.frame(),read.table(), read.csv() | 데이터프레임 자료 처리 함수 : str(), ncol(), nrow(), apply(), summary(), subset() | . | . 데이터 프레임은 열 단위로 서로 다른 자료형을 포함할 수 있어서 벡터와 행렬을 이용하여 데이터 프레임 객체를 생성할 수 있다. | 기존의 데이터 파일을 불러와서 데이터 프레임 객체를 생성할 수도 있다. | 사용법 : data.frame(칼럼1=자료, 칼럼2=자료, ...) | . 벡터를 이용한 데이터 프레임 객체 생성 . no &lt;- c(1:3) name &lt;- c(&#39;k&#39;,&#39;b&#39;,&#39;s&#39;) pay &lt;- c(150, 200, 300) vemp &lt;- data.frame(칼럼1 = no, 칼럼2 = name, 칼럼3 = pay) vemp . A data.frame: 3 × 3 칼럼1칼럼2칼럼3 . &lt;int&gt;&lt;chr&gt;&lt;dbl&gt; . 1 | k | 150 | . 2 | b | 200 | . 3 | s | 300 | . vemp[1,1] . 1 여러 개의 벡터 객체를 이용하여 데이터 프레임을 생성할 수 있다. | 이때 각 벡터 객체의 칼럼 길이는 동일해야한다. | . 매트릭스를 이용한 데이터프레임 객체 생성 . m=matrix(c(1,&quot;k&quot;,150, 2,&#39;b&#39;,200, 3,&#39;s&#39;,250) ,3,by=T) memp=data.frame(m) memp . A data.frame: 3 × 3 X1X2X3 . &lt;chr&gt;&lt;chr&gt;&lt;chr&gt; . 1 | k | 150 | . 2 | b | 200 | . 3 | s | 250 | . memp[1,1] . &#39;1&#39; vemp[1,1] . 1 애초에 매트릭스를 이용해 데이터 프레임 객체를 생성할 때 매트릭스는 동일한 자료밖에 안 되기에 안의 원소가 전부 character로 변경됐었지만 vemp는 상이한 벡터 객체들을 데이터 프레임을 통해서 모아놓은 것이기 떄문에 자료형이 변하지 않고 유지되었음 | . df = data.frame(x=1:5, y=seq(1,9,2),z=c(&#39;abfa&#39;,&#39;aavd&#39;,&#39;avs&#39;,&#39;S&#39;,&#39;S&#39;)) df . A data.frame: 5 × 3 xyz . &lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 1 | 1 | abfa | . 2 | 3 | aavd | . 3 | 5 | avs | . 4 | 7 | S | . 5 | 9 | S | . 데이터 프레임의 칼럼명 참조하기 | . df$x df$y df$z . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | &lt;/ol&gt; &lt;ol class=list-inline&gt;1 | 3 | 5 | 7 | 9 | &lt;/ol&gt; &lt;ol class=list-inline&gt;&#39;abfa&#39; | &#39;aavd&#39; | &#39;avs&#39; | &#39;S&#39; | &#39;S&#39; | &lt;/ol&gt; $는 데이터 프레임에선 칼럼을 의미하며 리스트에서는 키를 의미한다. | .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/05/r.html",
            "relUrl": "/2022/02/05/r.html",
            "date": " • Feb 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "변수,자료형,기본 함수, 작업공간",
            "content": "변수는 분석에 필요한 자료를 일시적으로 저장하거나 처리결과를 담을 수 있는 기억장소를 지정해주는 역할을 한다. 즉 변수의 이름은 값을 저장하는 메모리 영역의 이름으로 할당된다. 또한 R은 모든 변수가 객체(object) 형태로 생성되기 때문에 하나의 변수에 자료와 함수 그리고 차트와 같은 이미지까지 모든 형식을 저장할 수 있다. 변수 이름 작성 규칙 첫 자는 영문자로 시작 | 두 번째 단어는 숫자와 밑줄 문자 그리고 점(.)을 이용할 수 있다. | 대문자와 소문자는 서로 다른 변수로 인식한다. | 변수 이름은 의미를 파악할 수 있는 이름으로 지정하는 것이 좋다. | 두 단어를 포함하여 변수 이름을 지정할 경우 두 번째 단어의 첫 자는 대문자로 표기한다. | 한 번 정의된 변수는 재사용이 가능하고 가장 최근에 할당된 값으로 수정된다. | . | . | . var1 &lt;- 0 var1 = 9 . var1 . 9 = 나 &lt;- 둘 다 사용가능하다 | . . 스칼라 변수 : 한 개의 값만 갖는 변수를 의미한다. | 벡터 변수 : 두 개 이상의 값을 갖는 변수를 의미한다. 여러 개의 자료를 저장할 수 있는 1차원의 선형 자료구조이다. | . | . age&lt;-35 # 정수 name&lt;-&#39;홍길동&#39; # 문자열 age;name name&lt;-c(&#39;홍길동&#39;,&#39;이순신&#39;,&#39;곽도성&#39;) # 이건 두 개 이상의 값을 갖는 변수, 여러 개의 자료를 저장할 수 있는 1차원의 선형 자료구조 # 즉 벡터변수 . 35 &#39;홍길동&#39; . R은 변수를 선언할 때 별도의 자료형(type)을 선언하지 않는다. 즉 변수에 저장하는 자료의 유형에 의해서 변수의 타입이 결정된다! 숫자형 : 정수, 실수 | 문자형 : 문자, 문자열 | 논리형 : 참, 거짓 | 결측 데이터 : 결측치, 비숫자(NA,NaN) | . | . int&lt;-20 string&lt;-&#39;홍길동&#39; boolean&lt;-TRUE # True파이썬에서는 이렇게 작성해야 함 . sum(10,20,30) # 3개의 숫자형 값의 합계 연산 . 60 sum(10,20,30,NA) # sum 안 됨 sum(10,20,30,NA,na.rm=TRUE) # na.rm=TRUE를 통해 NA 결측치 제거 후 합계 연산 . &lt;NA&gt; 60 ls() . &lt;ol class=list-inline&gt;&#39;age&#39; | &#39;boolean&#39; | &#39;int&#39; | &#39;name&#39; | &#39;string&#39; | &#39;var1&#39; | &lt;/ol&gt; . 자료형 확인 변수에 저장된 자료형을 확인하는 함수를 이용하여 반환되는 TRUE 또는 FALSE의 결과를 통해서 해당 변수의 자료형을 확인할 수 있다. | is.numeric(x) - 수치형 여부 | is.logical(x) | is.character(x) - 문자형 여부 | is.data.frame(x) - 데이터프레임 여부 | is.na(x) | is.integer(x) - 정수형 여부 | is.double(x) - 실수형 여부 | is.complex(x) | is.factor(x) - 범주형 여부 | is.nan(x) | . | . is.character(string) . TRUE . 자료형 변환 변수에 저장된 자료형을 다른 자료형으로 변환하자 as.numeric(x) - 수치형 변환 | as.logical(x) | as.character(x) - 문자형 변환 | as.data.frame(x) - 데이터프레임 변환 | as.list(x) - 리스트형 변환 | as.array(x) - 다차원 배열 변환 | as.integer(x) - 정수형 변환 | as.double(x) - 실수형 변환 | as.complex(x) | as.factor(x) - 요인형 변환 | as.Data(x) - 날짜형 변환 | . | . | . x&lt;-c(1,2,&#39;3&#39;) # 3개의 원소를 갖는 벡터 생성 # x*3 # 이렇게 작성하면 이항연산자에 수치가 아닌 인수가 있다는 error가 발생하게 됨 result&lt;-as.numeric(x)*3 result2&lt;-as.integer(x)*3 result result2 . &lt;ol class=list-inline&gt;3 | 6 | 9 | &lt;/ol&gt; &lt;ol class=list-inline&gt;3 | 6 | 9 | &lt;/ol&gt; c() 함수를 이용하여 벡터를 생성할 경우 원소 중 한 개라도 문자이면 모든 원소를 문자로 하여 객체가 생성된다. 따라서 이항연산자에 수치가 아닌 인수가 있다는 error가 발생하게 된다. | . . 복소수 | . z&lt;-5.3-3i Re(z) # 실수 Im(z) # 허수 is.complex(z) . 5.3 -3 TRUE as.complex(123) . 123+0i . 자료형과 자료구조 보기 자료형은 변수에 저장된 자료의 성격(숫자형, 문자형, 논리형)을 의미하고, 자료구조는 변수에 저장된 자료의 메모리 구조(배열, 리스트, 테이블)를 의미한다. 메모리 구조는 객체가 생성될 때 만들어지기 때문에 자료구조를 객체형(Object Type)이라고도 한다. R에서는 mode()를 이용하여 자료형을 확인할 수 있고, class()를 이용하여 자료 구조, 즉 메모리 구조를 확인할 수 있다. | . | . int&lt;-3 mode(int) # 자료의 성격을 알려준다. class(int) # 자료구조의 성격을 알려준다. . &#39;numeric&#39; &#39;numeric&#39; 이처럼 벡터 변수가 아닌 스칼라 변수일 땐 자료의 성격을 알려주는 mode()와 자료 구조의 성격을 알려주는 class() 함수의 결과는 같은 유형으로 나타난다. | . . 요인(Factor)형 변환 요인(Factor)은 같은 성격인 값의 목록을 범주로 갖는 벡터 자료를 의미한다. 범주는 변수가 가질 수 있는 값의 범위로 예를 들면 성별 변수의 범주는 남자와 여자가 되낟. 요인형은 순서에 의미가 없는 Nominal 유형과 순서에 의미가 있는 Ordinal 유형으로 구분된다. Nominal : 범주의 순서는 알파벳 순서로 정렬 | Ordinal : 범주의 순서는 사용자가 지정한 순서대로 정렬 | . | . | . gender&lt;- c(&#39;man&#39;,&#39;woman&#39;,&#39;woman&#39;,&#39;man&#39;,&#39;man&#39;) # plot(gender) # error 발생, 차트는 수치 데이터만 가능하다. . Factor Nominal : 벡터 원소를 요인형으로 변환한 경우 범주의 순서가 알파벳 순서로 정렬되는 요인형의 기본 유형이다. | . Ngender&lt;-as.factor(gender) # Factor형 변환 . Ngender . &lt;ol class=list-inline&gt;man | woman | woman | man | man | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt;&#39;man&#39; | &#39;woman&#39; | &lt;/ol&gt; 여기서 Levels가 의미하는 것이 범주이다. 여기서 범주의 수준(Levels)은 값의 목록을 알파벳 순서로 정렬한다. | . table(Ngender) # 빈도수 구하기 . Ngender man woman 3 2 . gender 원소 중에서 같은 값의 수량을 수치화한 빈도수를 확인할 수 있다. 여기서 man과 woman은 범주가 된다. 범주가 된다는 의미는 gender 변수가 값을 가질 수 잇는 범위를 의미한다. 또한 빈도수는 해당 범주의 발생 수를 의미한다. | . plot(Ngender) . mode(Ngender) class(Ngender) is.factor(Ngender) . &#39;numeric&#39; &#39;factor&#39; TRUE . - Factor Ordinal : &#48276;&#51452;&#51032; &#49692;&#49436;&#47484; &#49324;&#50857;&#51088;&#44032; &#51648;&#51221;&#54620; &#49692;&#49436;&#45824;&#47196; &#51221;&#47148;&#54616;&#45716; &#44592;&#45733;&#51004;&#47196; factor() &#54632;&#49688;&#51032; &#54805;&#49885;&#51008; &#45796;&#51020;&#44284; &#44057;&#45796;. . factor(x,levels,ordered) . args(factor) . &lt;pre class=language-r&gt;function (x = character(), levels, labels = levels, exclude = NA, &lt;span style=white-space:pre-wrap&gt; ordered = is.ordered(x), nmax = NA) &lt;/span&gt; NULL&lt;/pre&gt; Ogender&lt;-factor(gender,levels=c(&#39;woman&#39;,&#39;man&#39;),ordered = TRUE) Ogender # factor 함수에서 사용할 수 있는 매개변수를 확인하고, 해당 변수를 이용하여 순서 잇는 요인형으로 변환한 후 Levels:에서 범주의 순서를 확인할 수 있다. # 전에는 man이 먼저 나왔는데 이번엔 woman이 먼저 나온 것을 확인할 수 있다. . &lt;ol class=list-inline&gt;man | woman | woman | man | man | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt;&#39;woman&#39; | &#39;man&#39; | &lt;/ol&gt; par(mfrow=c(1,2)) # 두 개의 그래프를 Plots 영역에 나타낼 수 있다. # (2,2)라고 바꿔주면 4개의 그래프를 그릴 수 있다. plot(Ngender) plot(Ogender) . . 날짜형 변환 : 인터넷 또는 로컬 파일로부터 가져온 자료 중에서 날짜형 칼럼은 요인형 또는 문자형으로 인식되기 때문에 정확한 날짜형으로 변환할 필요가 있다. | . a=as.Date(&#39;20/02/28&#39;,&#39;%y/%m/%d&#39;) a class(a) . 2020-02-28 &#39;Date&#39; dates=c(&#39;15/02/24&#39;,&#39;10/02/2&#39;,&#39;16/08/14&#39;) as.Date(dates,&#39;%y/%m/%d&#39;) . &lt;ol class=list-inline&gt;2015-02-24 | 2010-02-02 | 2016-08-14 | &lt;/ol&gt; dates=c(&#39;15/22/24&#39;,&#39;98/02/2&#39;,&#39;16/08/14&#39;) as.Date(dates,&#39;%y/%m/%d&#39;) . &lt;ol class=list-inline&gt;&lt;NA&gt; | 1998-02-02 | 2016-08-14 | &lt;/ol&gt; 22월이라는 날짜는 없으므로 NA처리 되었다. | 년도 4자리로 작성 : %Y | 년도 2자리로 작성 : %y | 24시간 : %H | 12시간 : %I | 분 : %M | 초 : %S | . . 현재 날짜와 시간 확인 | . a=Sys.time() mode(a) class(a) . &#39;numeric&#39; &lt;ol class=list-inline&gt;&#39;POSIXct&#39; | &#39;POSIXt&#39; | &lt;/ol&gt; strptime()를 이용한 날짜형 변환 | . sdate&lt;-&#39;2019-11-11 12:17:6&#39; class(sdate) today&lt;-strptime(sdate,format=&#39;%Y-%m-%d %H:%M:%S&#39;) today class(today) . &#39;character&#39; [1] &#34;2019-11-11 12:17:06 KST&#34; . &lt;ol class=list-inline&gt;&#39;POSIXlt&#39; | &#39;POSIXt&#39; | &lt;/ol&gt; 반면 as.Date()는 날짜 자료만 형 변환이 가능하다. | . . 기본 함수와 작업공간 R 패키지에서 제공되는 수많은 함수 사용법을 머릿속에 기억하기는 불가능한 일이다. 따라서 해당 함수의 사용법을 제공하는 도움말 기능을 이용할 수 있어야 한다. | &#39;help(함수명)&#39; 또는 &#39;?함수명&#39;형식으로 볼 수 있다. | 파이썬에서는 &#39;함수명?&#39;이다. | google에서는 &#39;함수명() in r&#39; 형식으로 검색한 뒤 확인할 수 있다. | . | arg(함수명) : 특정 함수를 대상으로 사용 가능한 함수 파라미터를 보여준다. 예를 들어보자 | . | . args(max) # na.rm은 FALSE가 default이다. . &lt;pre class=language-r&gt;function (..., na.rm = FALSE) NULL&lt;/pre&gt; example() 함수는 R에서 제공되는 기본 함수들을 사용하는 예제를 제공해준다. | . example(seq) . seq&gt; seq(0, 1, length.out = 11) [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 seq&gt; seq(stats::rnorm(20)) # effectively &#39;along&#39; [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq&gt; seq(1, 9, by = 2) # matches &#39;end&#39; [1] 1 3 5 7 9 seq&gt; seq(1, 9, by = pi) # stays below &#39;end&#39; [1] 1.000000 4.141593 7.283185 seq&gt; seq(1, 6, by = 3) [1] 1 4 seq&gt; seq(1.575, 5.125, by = 0.05) [1] 1.575 1.625 1.675 1.725 1.775 1.825 1.875 1.925 1.975 2.025 2.075 2.125 [13] 2.175 2.225 2.275 2.325 2.375 2.425 2.475 2.525 2.575 2.625 2.675 2.725 [25] 2.775 2.825 2.875 2.925 2.975 3.025 3.075 3.125 3.175 3.225 3.275 3.325 [37] 3.375 3.425 3.475 3.525 3.575 3.625 3.675 3.725 3.775 3.825 3.875 3.925 [49] 3.975 4.025 4.075 4.125 4.175 4.225 4.275 4.325 4.375 4.425 4.475 4.525 [61] 4.575 4.625 4.675 4.725 4.775 4.825 4.875 4.925 4.975 5.025 5.075 5.125 seq&gt; seq(17) # same as 1:17, or even better seq_len(17) [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . seq() 함수를 사용하는 예로 다양한 방법으로 벡터 원소를 생성하는 과정을 보여준다. | mean의 예제도 알아보자 | . example(mean) . mean&gt; x &lt;- c(0:10, 50) mean&gt; xm &lt;- mean(x) mean&gt; c(xm, mean(x, trim = 0.10)) [1] 8.75 5.50 .",
            "url": "https://rhkrehtjd.github.io/INTROr/2022/02/04/R.html",
            "relUrl": "/2022/02/04/R.html",
            "date": " • Feb 4, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rhkrehtjd.github.io/INTROr/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rhkrehtjd.github.io/INTROr/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}